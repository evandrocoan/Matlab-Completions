{
	"scope": "source.matlab, source.m",
	"completions":
	[
		{"trigger": "NumericTypeScope\tFixedPoint method", "contents": "NumericTypeScope(${1:args})"} ,
		{"trigger": "accumneg\tFixedPoint method", "contents": "accumneg(${1:args})"} ,
		{"trigger": "accumpos\tFixedPoint method", "contents": "accumpos(${1:args})"} ,
		{"trigger": "autofixexp\tFixedPoint method", "contents": "autofixexp(${1:args})"} ,
		{"trigger": "bin\tFixedPoint method", "contents": "bin(${1:args})"} ,
		{"trigger": "bin2num\tFixedPoint method", "contents": "bin2num(${1:args})"} ,
		{"trigger": "bitandreduce\tFixedPoint method", "contents": "bitandreduce(${1:args})"} ,
		{"trigger": "bitconcat\tFixedPoint method", "contents": "bitconcat(${1:args})"} ,
		{"trigger": "bitorreduce\tFixedPoint method", "contents": "bitorreduce(${1:args})"} ,
		{"trigger": "bitreplicate\tFixedPoint method", "contents": "bitreplicate(${1:args})"} ,
		{"trigger": "bitrol\tFixedPoint method", "contents": "bitrol(${1:args})"} ,
		{"trigger": "bitror\tFixedPoint method", "contents": "bitror(${1:args})"} ,
		{"trigger": "bitsliceget\tFixedPoint method", "contents": "bitsliceget(${1:args})"} ,
		{"trigger": "bitsll\tFixedPoint method", "contents": "bitsll(${1:args})"} ,
		{"trigger": "bitsra\tFixedPoint method", "contents": "bitsra(${1:args})"} ,
		{"trigger": "bitsrl\tFixedPoint method", "contents": "bitsrl(${1:args})"} ,
		{"trigger": "bitxorreduce\tFixedPoint method", "contents": "bitxorreduce(${1:args})"} ,
		{"trigger": "buffer\tFixedPoint method", "contents": "buffer(${1:args})"} ,
		{"trigger": "buildInstrumentedMex\tFixedPoint method", "contents": "buildInstrumentedMex(${1:args})"} ,
		{"trigger": "ceil\tFixedPoint method", "contents": "ceil(${1:args})"} ,
		{"trigger": "clearInstrumentationResults\tFixedPoint method", "contents": "clearInstrumentationResults(${1:args})"} ,
		{"trigger": "coder.approximation\tFixedPoint method", "contents": "coder.approximation(${1:args})"} ,
		{"trigger": "coder.config\tFixedPoint method", "contents": "coder.config(${1:args})"} ,
		{"trigger": "coder.mexconfig\tFixedPoint method", "contents": "coder.mexconfig(${1:args})"} ,
		{"trigger": "coder.newtype\tFixedPoint method", "contents": "coder.newtype(${1:args})"} ,
		{"trigger": "coder.resize\tFixedPoint method", "contents": "coder.resize(${1:args})"} ,
		{"trigger": "convergent\tFixedPoint method", "contents": "convergent(${1:args})"} ,
		{"trigger": "convertToSingle\tFixedPoint method", "contents": "convertToSingle(${1:args})"} ,
		{"trigger": "cordicabs\tFixedPoint method", "contents": "cordicabs(${1:args})"} ,
		{"trigger": "cordicangle\tFixedPoint method", "contents": "cordicangle(${1:args})"} ,
		{"trigger": "cordicatan2\tFixedPoint method", "contents": "cordicatan2(${1:args})"} ,
		{"trigger": "cordiccart2pol\tFixedPoint method", "contents": "cordiccart2pol(${1:args})"} ,
		{"trigger": "cordiccexp\tFixedPoint method", "contents": "cordiccexp(${1:args})"} ,
		{"trigger": "cordiccos\tFixedPoint method", "contents": "cordiccos(${1:args})"} ,
		{"trigger": "cordicpol2cart\tFixedPoint method", "contents": "cordicpol2cart(${1:args})"} ,
		{"trigger": "cordicrotate\tFixedPoint method", "contents": "cordicrotate(${1:args})"} ,
		{"trigger": "cordicsin\tFixedPoint method", "contents": "cordicsin(${1:args})"} ,
		{"trigger": "cordicsincos\tFixedPoint method", "contents": "cordicsincos(${1:args})"} ,
		{"trigger": "cordicsqrt\tFixedPoint method", "contents": "cordicsqrt(${1:args})"} ,
		{"trigger": "dec\tFixedPoint method", "contents": "dec(${1:args})"} ,
		{"trigger": "denormalmax\tFixedPoint method", "contents": "denormalmax(${1:args})"} ,
		{"trigger": "denormalmin\tFixedPoint method", "contents": "denormalmin(${1:args})"} ,
		{"trigger": "divide\tFixedPoint method", "contents": "divide(${1:args})"} ,
		{"trigger": "errmean\tFixedPoint method", "contents": "errmean(${1:args})"} ,
		{"trigger": "errpdf\tFixedPoint method", "contents": "errpdf(${1:args})"} ,
		{"trigger": "errvar\tFixedPoint method", "contents": "errvar(${1:args})"} ,
		{"trigger": "exponentbias\tFixedPoint method", "contents": "exponentbias(${1:args})"} ,
		{"trigger": "exponentlength\tFixedPoint method", "contents": "exponentlength(${1:args})"} ,
		{"trigger": "exponentmax\tFixedPoint method", "contents": "exponentmax(${1:args})"} ,
		{"trigger": "exponentmin\tFixedPoint method", "contents": "exponentmin(${1:args})"} ,
		{"trigger": "fi\tFixedPoint method", "contents": "fi(${1:args})"} ,
		{"trigger": "fiaccel\tFixedPoint method", "contents": "fiaccel(${1:args})"} ,
		{"trigger": "fimath\tFixedPoint method", "contents": "fimath(${1:args})"} ,
		{"trigger": "fipref\tFixedPoint method", "contents": "fipref(${1:args})"} ,
		{"trigger": "fixed.Quantizer\tFixedPoint method", "contents": "fixed.Quantizer(${1:args})"} ,
		{"trigger": "fixpt_instrument_purge\tFixedPoint method", "contents": "fixpt_instrument_purge(${1:args})"} ,
		{"trigger": "fractionlength\tFixedPoint method", "contents": "fractionlength(${1:args})"} ,
		{"trigger": "getlsb\tFixedPoint method", "contents": "getlsb(${1:args})"} ,
		{"trigger": "getmsb\tFixedPoint method", "contents": "getmsb(${1:args})"} ,
		{"trigger": "globalfimath\tFixedPoint method", "contents": "globalfimath(${1:args})"} ,
		{"trigger": "hex\tFixedPoint method", "contents": "hex(${1:args})"} ,
		{"trigger": "innerprodintbits\tFixedPoint method", "contents": "innerprodintbits(${1:args})"} ,
		{"trigger": "isboolean\tFixedPoint method", "contents": "isboolean(${1:args})"} ,
		{"trigger": "isdouble\tFixedPoint method", "contents": "isdouble(${1:args})"} ,
		{"trigger": "isequivalent\tFixedPoint method", "contents": "isequivalent(${1:args})"} ,
		{"trigger": "isfi\tFixedPoint method", "contents": "isfi(${1:args})"} ,
		{"trigger": "isfimath\tFixedPoint method", "contents": "isfimath(${1:args})"} ,
		{"trigger": "isfimathlocal\tFixedPoint method", "contents": "isfimathlocal(${1:args})"} ,
		{"trigger": "isfipref\tFixedPoint method", "contents": "isfipref(${1:args})"} ,
		{"trigger": "isfixed\tFixedPoint method", "contents": "isfixed(${1:args})"} ,
		{"trigger": "isnumerictype\tFixedPoint method", "contents": "isnumerictype(${1:args})"} ,
		{"trigger": "ispropequal\tFixedPoint method", "contents": "ispropequal(${1:args})"} ,
		{"trigger": "isquantizer\tFixedPoint method", "contents": "isquantizer(${1:args})"} ,
		{"trigger": "isscaleddouble\tFixedPoint method", "contents": "isscaleddouble(${1:args})"} ,
		{"trigger": "isscaledtype\tFixedPoint method", "contents": "isscaledtype(${1:args})"} ,
		{"trigger": "isscalingbinarypoint\tFixedPoint method", "contents": "isscalingbinarypoint(${1:args})"} ,
		{"trigger": "isscalingslopebias\tFixedPoint method", "contents": "isscalingslopebias(${1:args})"} ,
		{"trigger": "isscalingunspecified\tFixedPoint method", "contents": "isscalingunspecified(${1:args})"} ,
		{"trigger": "issigned\tFixedPoint method", "contents": "issigned(${1:args})"} ,
		{"trigger": "issingle\tFixedPoint method", "contents": "issingle(${1:args})"} ,
		{"trigger": "isslopebiasscaled\tFixedPoint method", "contents": "isslopebiasscaled(${1:args})"} ,
		{"trigger": "logreport\tFixedPoint method", "contents": "logreport(${1:args})"} ,
		{"trigger": "lowerbound\tFixedPoint method", "contents": "lowerbound(${1:args})"} ,
		{"trigger": "lsb\tFixedPoint method", "contents": "lsb(${1:args})"} ,
		{"trigger": "maxlog\tFixedPoint method", "contents": "maxlog(${1:args})"} ,
		{"trigger": "minlog\tFixedPoint method", "contents": "minlog(${1:args})"} ,
		{"trigger": "mpy\tFixedPoint method", "contents": "mpy(${1:args})"} ,
		{"trigger": "nearest\tFixedPoint method", "contents": "nearest(${1:args})"} ,
		{"trigger": "noperations\tFixedPoint method", "contents": "noperations(${1:args})"} ,
		{"trigger": "noverflows\tFixedPoint method", "contents": "noverflows(${1:args})"} ,
		{"trigger": "nts\tFixedPoint method", "contents": "nts(${1:args})"} ,
		{"trigger": "num2bin\tFixedPoint method", "contents": "num2bin(${1:args})"} ,
		{"trigger": "num2int\tFixedPoint method", "contents": "num2int(${1:args})"} ,
		{"trigger": "numberofelements\tFixedPoint method", "contents": "numberofelements(${1:args})"} ,
		{"trigger": "numerictype\tFixedPoint method", "contents": "numerictype(${1:args})"} ,
		{"trigger": "nunderflows\tFixedPoint method", "contents": "nunderflows(${1:args})"} ,
		{"trigger": "oct\tFixedPoint method", "contents": "oct(${1:args})"} ,
		{"trigger": "quantize\tFixedPoint method", "contents": "quantize(${1:args})"} ,
		{"trigger": "randquant\tFixedPoint method", "contents": "randquant(${1:args})"} ,
		{"trigger": "range\tFixedPoint method", "contents": "range(${1:args})"} ,
		{"trigger": "reinterpretcast\tFixedPoint method", "contents": "reinterpretcast(${1:args})"} ,
		{"trigger": "removefimath\tFixedPoint method", "contents": "removefimath(${1:args})"} ,
		{"trigger": "removeglobalfimathpref\tFixedPoint method", "contents": "removeglobalfimathpref(${1:args})"} ,
		{"trigger": "rescale\tFixedPoint method", "contents": "rescale(${1:args})"} ,
		{"trigger": "resetglobalfimath\tFixedPoint method", "contents": "resetglobalfimath(${1:args})"} ,
		{"trigger": "resetlog\tFixedPoint method", "contents": "resetlog(${1:args})"} ,
		{"trigger": "sdec\tFixedPoint method", "contents": "sdec(${1:args})"} ,
		{"trigger": "setfimath\tFixedPoint method", "contents": "setfimath(${1:args})"} ,
		{"trigger": "sfi\tFixedPoint method", "contents": "sfi(${1:args})"} ,
		{"trigger": "shiftdata\tFixedPoint method", "contents": "shiftdata(${1:args})"} ,
		{"trigger": "showInstrumentationResults\tFixedPoint method", "contents": "showInstrumentationResults(${1:args})"} ,
		{"trigger": "showfixptsimerrors\tFixedPoint method", "contents": "showfixptsimerrors(${1:args})"} ,
		{"trigger": "showfixptsimranges\tFixedPoint method", "contents": "showfixptsimranges(${1:args})"} ,
		{"trigger": "ssFxpConvert\tFixedPoint method", "contents": "ssFxpConvert(${1:args})"} ,
		{"trigger": "ssFxpConvertFromRealWorldValue\tFixedPoint method", "contents": "ssFxpConvertFromRealWorldValue(${1:args})"} ,
		{"trigger": "ssFxpConvertToRealWorldValue\tFixedPoint method", "contents": "ssFxpConvertToRealWorldValue(${1:args})"} ,
		{"trigger": "ssFxpGetU32BitRegion\tFixedPoint method", "contents": "ssFxpGetU32BitRegion(${1:args})"} ,
		{"trigger": "ssFxpGetU32BitRegionCompliant\tFixedPoint method", "contents": "ssFxpGetU32BitRegionCompliant(${1:args})"} ,
		{"trigger": "ssFxpSetU32BitRegion\tFixedPoint method", "contents": "ssFxpSetU32BitRegion(${1:args})"} ,
		{"trigger": "ssFxpSetU32BitRegionCompliant\tFixedPoint method", "contents": "ssFxpSetU32BitRegionCompliant(${1:args})"} ,
		{"trigger": "ssGetDataTypeBias\tFixedPoint method", "contents": "ssGetDataTypeBias(${1:args})"} ,
		{"trigger": "ssGetDataTypeFixedExponent\tFixedPoint method", "contents": "ssGetDataTypeFixedExponent(${1:args})"} ,
		{"trigger": "ssGetDataTypeFracSlope\tFixedPoint method", "contents": "ssGetDataTypeFracSlope(${1:args})"} ,
		{"trigger": "ssGetDataTypeFractionLength\tFixedPoint method", "contents": "ssGetDataTypeFractionLength(${1:args})"} ,
		{"trigger": "ssGetDataTypeFxpContainWordLen\tFixedPoint method", "contents": "ssGetDataTypeFxpContainWordLen(${1:args})"} ,
		{"trigger": "ssGetDataTypeFxpIsSigned\tFixedPoint method", "contents": "ssGetDataTypeFxpIsSigned(${1:args})"} ,
		{"trigger": "ssGetDataTypeFxpWordLength\tFixedPoint method", "contents": "ssGetDataTypeFxpWordLength(${1:args})"} ,
		{"trigger": "ssGetDataTypeIsFixedPoint\tFixedPoint method", "contents": "ssGetDataTypeIsFixedPoint(${1:args})"} ,
		{"trigger": "ssGetDataTypeIsFloatingPoint\tFixedPoint method", "contents": "ssGetDataTypeIsFloatingPoint(${1:args})"} ,
		{"trigger": "ssGetDataTypeIsFxpFltApiCompat\tFixedPoint method", "contents": "ssGetDataTypeIsFxpFltApiCompat(${1:args})"} ,
		{"trigger": "ssGetDataTypeIsScalingPow2\tFixedPoint method", "contents": "ssGetDataTypeIsScalingPow2(${1:args})"} ,
		{"trigger": "ssGetDataTypeIsScalingTrivial\tFixedPoint method", "contents": "ssGetDataTypeIsScalingTrivial(${1:args})"} ,
		{"trigger": "ssGetDataTypeNumberOfChunks\tFixedPoint method", "contents": "ssGetDataTypeNumberOfChunks(${1:args})"} ,
		{"trigger": "ssGetDataTypeStorageContainCat\tFixedPoint method", "contents": "ssGetDataTypeStorageContainCat(${1:args})"} ,
		{"trigger": "ssGetDataTypeStorageContainerSize\tFixedPoint method", "contents": "ssGetDataTypeStorageContainerSize(${1:args})"} ,
		{"trigger": "ssGetDataTypeTotalSlope\tFixedPoint method", "contents": "ssGetDataTypeTotalSlope(${1:args})"} ,
		{"trigger": "ssLogFixptInstrumentation\tFixedPoint method", "contents": "ssLogFixptInstrumentation(${1:args})"} ,
		{"trigger": "ssRegisterDataTypeFxpBinaryPoint\tFixedPoint method", "contents": "ssRegisterDataTypeFxpBinaryPoint(${1:args})"} ,
		{"trigger": "ssRegisterDataTypeFxpFSlopeFixExpBias\tFixedPoint method", "contents": "ssRegisterDataTypeFxpFSlopeFixExpBias(${1:args})"} ,
		{"trigger": "ssRegisterDataTypeFxpScaledDouble\tFixedPoint method", "contents": "ssRegisterDataTypeFxpScaledDouble(${1:args})"} ,
		{"trigger": "ssRegisterDataTypeFxpSlopeBias\tFixedPoint method", "contents": "ssRegisterDataTypeFxpSlopeBias(${1:args})"} ,
		{"trigger": "storedInteger\tFixedPoint method", "contents": "storedInteger(${1:args})"} ,
		{"trigger": "storedIntegerToDouble\tFixedPoint method", "contents": "storedIntegerToDouble(${1:args})"} ,
		{"trigger": "stripscaling\tFixedPoint method", "contents": "stripscaling(${1:args})"} ,
		{"trigger": "sub\tFixedPoint method", "contents": "sub(${1:args})"} ,
		{"trigger": "ufi\tFixedPoint method", "contents": "ufi(${1:args})"} ,
		{"trigger": "unitquantize\tFixedPoint method", "contents": "unitquantize(${1:args})"} ,
		{"trigger": "unshiftdata\tFixedPoint method", "contents": "unshiftdata(${1:args})"} ,
		{"trigger": "upperbound\tFixedPoint method", "contents": "upperbound(${1:args})"} ,
		{"trigger": "wordlength\tFixedPoint method", "contents": "wordlength(${1:args})"} ,

	]
}
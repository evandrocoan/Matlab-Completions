{
	"scope": "source.matlab, source.m",
	"completions":
	[
		{"trigger": "aptknt\tCurveFit method", "contents": "aptknt(${1:args})"} ,
		{"trigger": "argnames\tCurveFit method", "contents": "argnames(${1:args})"} ,
		{"trigger": "augknt\tCurveFit method", "contents": "augknt(${1:args})"} ,
		{"trigger": "aveknt\tCurveFit method", "contents": "aveknt(${1:args})"} ,
		{"trigger": "brk2knt\tCurveFit method", "contents": "brk2knt(${1:args})"} ,
		{"trigger": "bspline\tCurveFit method", "contents": "bspline(${1:args})"} ,
		{"trigger": "category\tCurveFit method", "contents": "category(${1:args})"} ,
		{"trigger": "cfit\tCurveFit method", "contents": "cfit(${1:args})"} ,
		{"trigger": "chbpnt\tCurveFit method", "contents": "chbpnt(${1:args})"} ,
		{"trigger": "coeffnames\tCurveFit method", "contents": "coeffnames(${1:args})"} ,
		{"trigger": "coeffvalues\tCurveFit method", "contents": "coeffvalues(${1:args})"} ,
		{"trigger": "confint\tCurveFit method", "contents": "confint(${1:args})"} ,
		{"trigger": "csape\tCurveFit method", "contents": "csape(${1:args})"} ,
		{"trigger": "csapi\tCurveFit method", "contents": "csapi(${1:args})"} ,
		{"trigger": "csaps\tCurveFit method", "contents": "csaps(${1:args})"} ,
		{"trigger": "cscvn\tCurveFit method", "contents": "cscvn(${1:args})"} ,
		{"trigger": "dependnames\tCurveFit method", "contents": "dependnames(${1:args})"} ,
		{"trigger": "differentiate\tCurveFit method", "contents": "differentiate(${1:args})"} ,
		{"trigger": "excludedata\tCurveFit method", "contents": "excludedata(${1:args})"} ,
		{"trigger": "fit\tCurveFit method", "contents": "fit(${1:args})"} ,
		{"trigger": "fitoptions\tCurveFit method", "contents": "fitoptions(${1:args})"} ,
		{"trigger": "fittype\tCurveFit method", "contents": "fittype(${1:args})"} ,
		{"trigger": "fn2fm\tCurveFit method", "contents": "fn2fm(${1:args})"} ,
		{"trigger": "fnbrk\tCurveFit method", "contents": "fnbrk(${1:args})"} ,
		{"trigger": "fnchg\tCurveFit method", "contents": "fnchg(${1:args})"} ,
		{"trigger": "fncmb\tCurveFit method", "contents": "fncmb(${1:args})"} ,
		{"trigger": "fnder\tCurveFit method", "contents": "fnder(${1:args})"} ,
		{"trigger": "fndir\tCurveFit method", "contents": "fndir(${1:args})"} ,
		{"trigger": "fnint\tCurveFit method", "contents": "fnint(${1:args})"} ,
		{"trigger": "fnjmp\tCurveFit method", "contents": "fnjmp(${1:args})"} ,
		{"trigger": "fnmin\tCurveFit method", "contents": "fnmin(${1:args})"} ,
		{"trigger": "fnplt\tCurveFit method", "contents": "fnplt(${1:args})"} ,
		{"trigger": "fnrfn\tCurveFit method", "contents": "fnrfn(${1:args})"} ,
		{"trigger": "fntlr\tCurveFit method", "contents": "fntlr(${1:args})"} ,
		{"trigger": "fnval\tCurveFit method", "contents": "fnval(${1:args})"} ,
		{"trigger": "fnxtr\tCurveFit method", "contents": "fnxtr(${1:args})"} ,
		{"trigger": "fnzeros\tCurveFit method", "contents": "fnzeros(${1:args})"} ,
		{"trigger": "formula\tCurveFit method", "contents": "formula(${1:args})"} ,
		{"trigger": "franke\tCurveFit method", "contents": "franke(${1:args})"} ,
		{"trigger": "getcurve\tCurveFit method", "contents": "getcurve(${1:args})"} ,
		{"trigger": "indepnames\tCurveFit method", "contents": "indepnames(${1:args})"} ,
		{"trigger": "integrate\tCurveFit method", "contents": "integrate(${1:args})"} ,
		{"trigger": "islinear\tCurveFit method", "contents": "islinear(${1:args})"} ,
		{"trigger": "newknt\tCurveFit method", "contents": "newknt(${1:args})"} ,
		{"trigger": "numargs\tCurveFit method", "contents": "numargs(${1:args})"} ,
		{"trigger": "numcoeffs\tCurveFit method", "contents": "numcoeffs(${1:args})"} ,
		{"trigger": "optknt\tCurveFit method", "contents": "optknt(${1:args})"} ,
		{"trigger": "ppmak\tCurveFit method", "contents": "ppmak(${1:args})"} ,
		{"trigger": "predint\tCurveFit method", "contents": "predint(${1:args})"} ,
		{"trigger": "prepareCurveData\tCurveFit method", "contents": "prepareCurveData(${1:args})"} ,
		{"trigger": "prepareSurfaceData\tCurveFit method", "contents": "prepareSurfaceData(${1:args})"} ,
		{"trigger": "probnames\tCurveFit method", "contents": "probnames(${1:args})"} ,
		{"trigger": "probvalues\tCurveFit method", "contents": "probvalues(${1:args})"} ,
		{"trigger": "rpmak\tCurveFit method", "contents": "rpmak(${1:args})"} ,
		{"trigger": "rscvn\tCurveFit method", "contents": "rscvn(${1:args})"} ,
		{"trigger": "rsmak\tCurveFit method", "contents": "rsmak(${1:args})"} ,
		{"trigger": "sfit\tCurveFit method", "contents": "sfit(${1:args})"} ,
		{"trigger": "smooth\tCurveFit method", "contents": "smooth(${1:args})"} ,
		{"trigger": "sorted\tCurveFit method", "contents": "sorted(${1:args})"} ,
		{"trigger": "spap2\tCurveFit method", "contents": "spap2(${1:args})"} ,
		{"trigger": "spapi\tCurveFit method", "contents": "spapi(${1:args})"} ,
		{"trigger": "spaps\tCurveFit method", "contents": "spaps(${1:args})"} ,
		{"trigger": "spcrv\tCurveFit method", "contents": "spcrv(${1:args})"} ,
		{"trigger": "splinetool\tCurveFit method", "contents": "splinetool(${1:args})"} ,
		{"trigger": "spmak\tCurveFit method", "contents": "spmak(${1:args})"} ,
		{"trigger": "spterms\tCurveFit method", "contents": "spterms(${1:args})"} ,
		{"trigger": "stmak\tCurveFit method", "contents": "stmak(${1:args})"} ,
		{"trigger": "titanium\tCurveFit method", "contents": "titanium(${1:args})"} ,
		{"trigger": "tpaps\tCurveFit method", "contents": "tpaps(${1:args})"} ,

	]
}
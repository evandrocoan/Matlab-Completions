{
	"scope": "source.matlab, source.m",
	"completions":
	[
		{"trigger": "adaptfilt\tDSP method", "contents": "adaptfilt(${1:args})"} ,
		{"trigger": "adaptfilt.adjlms\tDSP method", "contents": "adaptfilt.adjlms(${1:args})"} ,
		{"trigger": "adaptfilt.ap\tDSP method", "contents": "adaptfilt.ap(${1:args})"} ,
		{"trigger": "adaptfilt.apru\tDSP method", "contents": "adaptfilt.apru(${1:args})"} ,
		{"trigger": "adaptfilt.bap\tDSP method", "contents": "adaptfilt.bap(${1:args})"} ,
		{"trigger": "adaptfilt.blms\tDSP method", "contents": "adaptfilt.blms(${1:args})"} ,
		{"trigger": "adaptfilt.blmsfft\tDSP method", "contents": "adaptfilt.blmsfft(${1:args})"} ,
		{"trigger": "adaptfilt.dlms\tDSP method", "contents": "adaptfilt.dlms(${1:args})"} ,
		{"trigger": "adaptfilt.fdaf\tDSP method", "contents": "adaptfilt.fdaf(${1:args})"} ,
		{"trigger": "adaptfilt.filtxlms\tDSP method", "contents": "adaptfilt.filtxlms(${1:args})"} ,
		{"trigger": "adaptfilt.ftf\tDSP method", "contents": "adaptfilt.ftf(${1:args})"} ,
		{"trigger": "adaptfilt.gal\tDSP method", "contents": "adaptfilt.gal(${1:args})"} ,
		{"trigger": "adaptfilt.hrls\tDSP method", "contents": "adaptfilt.hrls(${1:args})"} ,
		{"trigger": "adaptfilt.hswrls\tDSP method", "contents": "adaptfilt.hswrls(${1:args})"} ,
		{"trigger": "adaptfilt.lms\tDSP method", "contents": "adaptfilt.lms(${1:args})"} ,
		{"trigger": "adaptfilt.lsl\tDSP method", "contents": "adaptfilt.lsl(${1:args})"} ,
		{"trigger": "adaptfilt.nlms\tDSP method", "contents": "adaptfilt.nlms(${1:args})"} ,
		{"trigger": "adaptfilt.pbfdaf\tDSP method", "contents": "adaptfilt.pbfdaf(${1:args})"} ,
		{"trigger": "adaptfilt.pbufdaf\tDSP method", "contents": "adaptfilt.pbufdaf(${1:args})"} ,
		{"trigger": "adaptfilt.qrdlsl\tDSP method", "contents": "adaptfilt.qrdlsl(${1:args})"} ,
		{"trigger": "adaptfilt.qrdrls\tDSP method", "contents": "adaptfilt.qrdrls(${1:args})"} ,
		{"trigger": "adaptfilt.rls\tDSP method", "contents": "adaptfilt.rls(${1:args})"} ,
		{"trigger": "adaptfilt.sd\tDSP method", "contents": "adaptfilt.sd(${1:args})"} ,
		{"trigger": "adaptfilt.se\tDSP method", "contents": "adaptfilt.se(${1:args})"} ,
		{"trigger": "adaptfilt.ss\tDSP method", "contents": "adaptfilt.ss(${1:args})"} ,
		{"trigger": "adaptfilt.swftf\tDSP method", "contents": "adaptfilt.swftf(${1:args})"} ,
		{"trigger": "adaptfilt.swrls\tDSP method", "contents": "adaptfilt.swrls(${1:args})"} ,
		{"trigger": "adaptfilt.tdafdct\tDSP method", "contents": "adaptfilt.tdafdct(${1:args})"} ,
		{"trigger": "adaptfilt.tdafdft\tDSP method", "contents": "adaptfilt.tdafdft(${1:args})"} ,
		{"trigger": "adaptfilt.ufdaf\tDSP method", "contents": "adaptfilt.ufdaf(${1:args})"} ,
		{"trigger": "allpass2wdf\tDSP method", "contents": "allpass2wdf(${1:args})"} ,
		{"trigger": "allpassbpc2bpc\tDSP method", "contents": "allpassbpc2bpc(${1:args})"} ,
		{"trigger": "allpasslp2bp\tDSP method", "contents": "allpasslp2bp(${1:args})"} ,
		{"trigger": "allpasslp2bpc\tDSP method", "contents": "allpasslp2bpc(${1:args})"} ,
		{"trigger": "allpasslp2bs\tDSP method", "contents": "allpasslp2bs(${1:args})"} ,
		{"trigger": "allpasslp2bsc\tDSP method", "contents": "allpasslp2bsc(${1:args})"} ,
		{"trigger": "allpasslp2hp\tDSP method", "contents": "allpasslp2hp(${1:args})"} ,
		{"trigger": "allpasslp2lp\tDSP method", "contents": "allpasslp2lp(${1:args})"} ,
		{"trigger": "allpasslp2mb\tDSP method", "contents": "allpasslp2mb(${1:args})"} ,
		{"trigger": "allpasslp2mbc\tDSP method", "contents": "allpasslp2mbc(${1:args})"} ,
		{"trigger": "allpasslp2xc\tDSP method", "contents": "allpasslp2xc(${1:args})"} ,
		{"trigger": "allpasslp2xn\tDSP method", "contents": "allpasslp2xn(${1:args})"} ,
		{"trigger": "allpassrateup\tDSP method", "contents": "allpassrateup(${1:args})"} ,
		{"trigger": "allpassshift\tDSP method", "contents": "allpassshift(${1:args})"} ,
		{"trigger": "allpassshiftc\tDSP method", "contents": "allpassshiftc(${1:args})"} ,
		{"trigger": "autoscale\tDSP method", "contents": "autoscale(${1:args})"} ,
		{"trigger": "block\tDSP method", "contents": "block(${1:args})"} ,
		{"trigger": "butter\tDSP method", "contents": "butter(${1:args})"} ,
		{"trigger": "ca2tf\tDSP method", "contents": "ca2tf(${1:args})"} ,
		{"trigger": "cheby1\tDSP method", "contents": "cheby1(${1:args})"} ,
		{"trigger": "cheby2\tDSP method", "contents": "cheby2(${1:args})"} ,
		{"trigger": "cl2tf\tDSP method", "contents": "cl2tf(${1:args})"} ,
		{"trigger": "codegen\tDSP method", "contents": "codegen(${1:args})"} ,
		{"trigger": "coeffs\tDSP method", "contents": "coeffs(${1:args})"} ,
		{"trigger": "coeread\tDSP method", "contents": "coeread(${1:args})"} ,
		{"trigger": "coewrite\tDSP method", "contents": "coewrite(${1:args})"} ,
		{"trigger": "constraincoeffwl\tDSP method", "contents": "constraincoeffwl(${1:args})"} ,
		{"trigger": "convert\tDSP method", "contents": "convert(${1:args})"} ,
		{"trigger": "cost\tDSP method", "contents": "cost(${1:args})"} ,
		{"trigger": "cumsec\tDSP method", "contents": "cumsec(${1:args})"} ,
		{"trigger": "denormalize\tDSP method", "contents": "denormalize(${1:args})"} ,
		{"trigger": "design\tDSP method", "contents": "design(${1:args})"} ,
		{"trigger": "designmethods\tDSP method", "contents": "designmethods(${1:args})"} ,
		{"trigger": "designopts\tDSP method", "contents": "designopts(${1:args})"} ,
		{"trigger": "dfilt\tDSP method", "contents": "dfilt(${1:args})"} ,
		{"trigger": "dfilt.allpass\tDSP method", "contents": "dfilt.allpass(${1:args})"} ,
		{"trigger": "dfilt.calattice\tDSP method", "contents": "dfilt.calattice(${1:args})"} ,
		{"trigger": "dfilt.calatticepc\tDSP method", "contents": "dfilt.calatticepc(${1:args})"} ,
		{"trigger": "dfilt.cascade\tDSP method", "contents": "dfilt.cascade(${1:args})"} ,
		{"trigger": "dfilt.cascadeallpass\tDSP method", "contents": "dfilt.cascadeallpass(${1:args})"} ,
		{"trigger": "dfilt.cascadewdfallpass\tDSP method", "contents": "dfilt.cascadewdfallpass(${1:args})"} ,
		{"trigger": "dfilt.delay\tDSP method", "contents": "dfilt.delay(${1:args})"} ,
		{"trigger": "dfilt.df1\tDSP method", "contents": "dfilt.df1(${1:args})"} ,
		{"trigger": "dfilt.df1sos\tDSP method", "contents": "dfilt.df1sos(${1:args})"} ,
		{"trigger": "dfilt.df1t\tDSP method", "contents": "dfilt.df1t(${1:args})"} ,
		{"trigger": "dfilt.df1tsos\tDSP method", "contents": "dfilt.df1tsos(${1:args})"} ,
		{"trigger": "dfilt.df2\tDSP method", "contents": "dfilt.df2(${1:args})"} ,
		{"trigger": "dfilt.df2sos\tDSP method", "contents": "dfilt.df2sos(${1:args})"} ,
		{"trigger": "dfilt.df2t\tDSP method", "contents": "dfilt.df2t(${1:args})"} ,
		{"trigger": "dfilt.df2tsos\tDSP method", "contents": "dfilt.df2tsos(${1:args})"} ,
		{"trigger": "dfilt.dfasymfir\tDSP method", "contents": "dfilt.dfasymfir(${1:args})"} ,
		{"trigger": "dfilt.dffir\tDSP method", "contents": "dfilt.dffir(${1:args})"} ,
		{"trigger": "dfilt.dffirt\tDSP method", "contents": "dfilt.dffirt(${1:args})"} ,
		{"trigger": "dfilt.dfsymfir\tDSP method", "contents": "dfilt.dfsymfir(${1:args})"} ,
		{"trigger": "dfilt.farrowfd\tDSP method", "contents": "dfilt.farrowfd(${1:args})"} ,
		{"trigger": "dfilt.farrowlinearfd\tDSP method", "contents": "dfilt.farrowlinearfd(${1:args})"} ,
		{"trigger": "dfilt.fftfir\tDSP method", "contents": "dfilt.fftfir(${1:args})"} ,
		{"trigger": "dfilt.latticeallpass\tDSP method", "contents": "dfilt.latticeallpass(${1:args})"} ,
		{"trigger": "dfilt.latticear\tDSP method", "contents": "dfilt.latticear(${1:args})"} ,
		{"trigger": "dfilt.latticearma\tDSP method", "contents": "dfilt.latticearma(${1:args})"} ,
		{"trigger": "dfilt.latticemamax\tDSP method", "contents": "dfilt.latticemamax(${1:args})"} ,
		{"trigger": "dfilt.latticemamin\tDSP method", "contents": "dfilt.latticemamin(${1:args})"} ,
		{"trigger": "dfilt.parallel\tDSP method", "contents": "dfilt.parallel(${1:args})"} ,
		{"trigger": "dfilt.scalar\tDSP method", "contents": "dfilt.scalar(${1:args})"} ,
		{"trigger": "dfilt.wdfallpass\tDSP method", "contents": "dfilt.wdfallpass(${1:args})"} ,
		{"trigger": "dsp.AdaptiveLatticeFilter\tDSP method", "contents": "dsp.AdaptiveLatticeFilter(${1:args})"} ,
		{"trigger": "dsp.AffineProjectionFilter\tDSP method", "contents": "dsp.AffineProjectionFilter(${1:args})"} ,
		{"trigger": "dsp.AllpassFilter\tDSP method", "contents": "dsp.AllpassFilter(${1:args})"} ,
		{"trigger": "dsp.AllpoleFilter\tDSP method", "contents": "dsp.AllpoleFilter(${1:args})"} ,
		{"trigger": "dsp.AnalyticSignal\tDSP method", "contents": "dsp.AnalyticSignal(${1:args})"} ,
		{"trigger": "dsp.ArrayVectorAdder\tDSP method", "contents": "dsp.ArrayVectorAdder(${1:args})"} ,
		{"trigger": "dsp.ArrayVectorDivider\tDSP method", "contents": "dsp.ArrayVectorDivider(${1:args})"} ,
		{"trigger": "dsp.ArrayVectorMultiplier\tDSP method", "contents": "dsp.ArrayVectorMultiplier(${1:args})"} ,
		{"trigger": "dsp.ArrayVectorSubtractor\tDSP method", "contents": "dsp.ArrayVectorSubtractor(${1:args})"} ,
		{"trigger": "dsp.AudioFileReader\tDSP method", "contents": "dsp.AudioFileReader(${1:args})"} ,
		{"trigger": "dsp.AudioFileWriter\tDSP method", "contents": "dsp.AudioFileWriter(${1:args})"} ,
		{"trigger": "dsp.AudioPlayer\tDSP method", "contents": "dsp.AudioPlayer(${1:args})"} ,
		{"trigger": "dsp.AudioRecorder\tDSP method", "contents": "dsp.AudioRecorder(${1:args})"} ,
		{"trigger": "dsp.Autocorrelator\tDSP method", "contents": "dsp.Autocorrelator(${1:args})"} ,
		{"trigger": "dsp.BiquadFilter\tDSP method", "contents": "dsp.BiquadFilter(${1:args})"} ,
		{"trigger": "dsp.BlockLMSFilter\tDSP method", "contents": "dsp.BlockLMSFilter(${1:args})"} ,
		{"trigger": "dsp.Buffer\tDSP method", "contents": "dsp.Buffer(${1:args})"} ,
		{"trigger": "dsp.BurgAREstimator\tDSP method", "contents": "dsp.BurgAREstimator(${1:args})"} ,
		{"trigger": "dsp.BurgSpectrumEstimator\tDSP method", "contents": "dsp.BurgSpectrumEstimator(${1:args})"} ,
		{"trigger": "dsp.CICCompensationDecimator\tDSP method", "contents": "dsp.CICCompensationDecimator(${1:args})"} ,
		{"trigger": "dsp.CICCompensationInterpolator\tDSP method", "contents": "dsp.CICCompensationInterpolator(${1:args})"} ,
		{"trigger": "dsp.CICDecimator\tDSP method", "contents": "dsp.CICDecimator(${1:args})"} ,
		{"trigger": "dsp.CICInterpolator\tDSP method", "contents": "dsp.CICInterpolator(${1:args})"} ,
		{"trigger": "dsp.CepstralToLPC\tDSP method", "contents": "dsp.CepstralToLPC(${1:args})"} ,
		{"trigger": "dsp.Chirp\tDSP method", "contents": "dsp.Chirp(${1:args})"} ,
		{"trigger": "dsp.ColoredNoise\tDSP method", "contents": "dsp.ColoredNoise(${1:args})"} ,
		{"trigger": "dsp.Convolver\tDSP method", "contents": "dsp.Convolver(${1:args})"} ,
		{"trigger": "dsp.Counter\tDSP method", "contents": "dsp.Counter(${1:args})"} ,
		{"trigger": "dsp.CoupledAllpassFilter\tDSP method", "contents": "dsp.CoupledAllpassFilter(${1:args})"} ,
		{"trigger": "dsp.CrossSpectrumEstimator\tDSP method", "contents": "dsp.CrossSpectrumEstimator(${1:args})"} ,
		{"trigger": "dsp.Crosscorrelator\tDSP method", "contents": "dsp.Crosscorrelator(${1:args})"} ,
		{"trigger": "dsp.CumulativeProduct\tDSP method", "contents": "dsp.CumulativeProduct(${1:args})"} ,
		{"trigger": "dsp.CumulativeSum\tDSP method", "contents": "dsp.CumulativeSum(${1:args})"} ,
		{"trigger": "dsp.DCBlocker\tDSP method", "contents": "dsp.DCBlocker(${1:args})"} ,
		{"trigger": "dsp.DCT\tDSP method", "contents": "dsp.DCT(${1:args})"} ,
		{"trigger": "dsp.Delay\tDSP method", "contents": "dsp.Delay(${1:args})"} ,
		{"trigger": "dsp.DelayLine\tDSP method", "contents": "dsp.DelayLine(${1:args})"} ,
		{"trigger": "dsp.DigitalDownConverter\tDSP method", "contents": "dsp.DigitalDownConverter(${1:args})"} ,
		{"trigger": "dsp.DigitalFilter\tDSP method", "contents": "dsp.DigitalFilter(${1:args})"} ,
		{"trigger": "dsp.DigitalUpConverter\tDSP method", "contents": "dsp.DigitalUpConverter(${1:args})"} ,
		{"trigger": "dsp.DyadicAnalysisFilterBank\tDSP method", "contents": "dsp.DyadicAnalysisFilterBank(${1:args})"} ,
		{"trigger": "dsp.DyadicSynthesisFilterBank\tDSP method", "contents": "dsp.DyadicSynthesisFilterBank(${1:args})"} ,
		{"trigger": "dsp.FFT\tDSP method", "contents": "dsp.FFT(${1:args})"} ,
		{"trigger": "dsp.FIRDecimator\tDSP method", "contents": "dsp.FIRDecimator(${1:args})"} ,
		{"trigger": "dsp.FIRFilter\tDSP method", "contents": "dsp.FIRFilter(${1:args})"} ,
		{"trigger": "dsp.FIRHalfbandDecimator\tDSP method", "contents": "dsp.FIRHalfbandDecimator(${1:args})"} ,
		{"trigger": "dsp.FIRHalfbandInterpolator\tDSP method", "contents": "dsp.FIRHalfbandInterpolator(${1:args})"} ,
		{"trigger": "dsp.FIRInterpolator\tDSP method", "contents": "dsp.FIRInterpolator(${1:args})"} ,
		{"trigger": "dsp.FIRRateConverter\tDSP method", "contents": "dsp.FIRRateConverter(${1:args})"} ,
		{"trigger": "dsp.FarrowRateConverter\tDSP method", "contents": "dsp.FarrowRateConverter(${1:args})"} ,
		{"trigger": "dsp.FastTransversalFilter\tDSP method", "contents": "dsp.FastTransversalFilter(${1:args})"} ,
		{"trigger": "dsp.FilterCascade\tDSP method", "contents": "dsp.FilterCascade(${1:args})"} ,
		{"trigger": "dsp.FilteredXLMSFilter\tDSP method", "contents": "dsp.FilteredXLMSFilter(${1:args})"} ,
		{"trigger": "dsp.FrequencyDomainAdaptiveFilter\tDSP method", "contents": "dsp.FrequencyDomainAdaptiveFilter(${1:args})"} ,
		{"trigger": "dsp.HDLComplexToMagnitudeAngle\tDSP method", "contents": "dsp.HDLComplexToMagnitudeAngle(${1:args})"} ,
		{"trigger": "dsp.HDLFFT\tDSP method", "contents": "dsp.HDLFFT(${1:args})"} ,
		{"trigger": "dsp.HDLFIRRateConverter\tDSP method", "contents": "dsp.HDLFIRRateConverter(${1:args})"} ,
		{"trigger": "dsp.HDLIFFT\tDSP method", "contents": "dsp.HDLIFFT(${1:args})"} ,
		{"trigger": "dsp.HDLNCO\tDSP method", "contents": "dsp.HDLNCO(${1:args})"} ,
		{"trigger": "dsp.HighpassFilter\tDSP method", "contents": "dsp.HighpassFilter(${1:args})"} ,
		{"trigger": "dsp.Histogram\tDSP method", "contents": "dsp.Histogram(${1:args})"} ,
		{"trigger": "dsp.IDCT\tDSP method", "contents": "dsp.IDCT(${1:args})"} ,
		{"trigger": "dsp.IFFT\tDSP method", "contents": "dsp.IFFT(${1:args})"} ,
		{"trigger": "dsp.IIRFilter\tDSP method", "contents": "dsp.IIRFilter(${1:args})"} ,
		{"trigger": "dsp.IIRHalfbandDecimator\tDSP method", "contents": "dsp.IIRHalfbandDecimator(${1:args})"} ,
		{"trigger": "dsp.IIRHalfbandInterpolator\tDSP method", "contents": "dsp.IIRHalfbandInterpolator(${1:args})"} ,
		{"trigger": "dsp.Interpolator\tDSP method", "contents": "dsp.Interpolator(${1:args})"} ,
		{"trigger": "dsp.KalmanFilter\tDSP method", "contents": "dsp.KalmanFilter(${1:args})"} ,
		{"trigger": "dsp.LDLFactor\tDSP method", "contents": "dsp.LDLFactor(${1:args})"} ,
		{"trigger": "dsp.LMSFilter\tDSP method", "contents": "dsp.LMSFilter(${1:args})"} ,
		{"trigger": "dsp.LPCToAutocorrelation\tDSP method", "contents": "dsp.LPCToAutocorrelation(${1:args})"} ,
		{"trigger": "dsp.LPCToCepstral\tDSP method", "contents": "dsp.LPCToCepstral(${1:args})"} ,
		{"trigger": "dsp.LPCToLSF\tDSP method", "contents": "dsp.LPCToLSF(${1:args})"} ,
		{"trigger": "dsp.LPCToLSP\tDSP method", "contents": "dsp.LPCToLSP(${1:args})"} ,
		{"trigger": "dsp.LPCToRC\tDSP method", "contents": "dsp.LPCToRC(${1:args})"} ,
		{"trigger": "dsp.LSFToLPC\tDSP method", "contents": "dsp.LSFToLPC(${1:args})"} ,
		{"trigger": "dsp.LSPToLPC\tDSP method", "contents": "dsp.LSPToLPC(${1:args})"} ,
		{"trigger": "dsp.LUFactor\tDSP method", "contents": "dsp.LUFactor(${1:args})"} ,
		{"trigger": "dsp.LevinsonSolver\tDSP method", "contents": "dsp.LevinsonSolver(${1:args})"} ,
		{"trigger": "dsp.LogicAnalyzer\tDSP method", "contents": "dsp.LogicAnalyzer(${1:args})"} ,
		{"trigger": "dsp.LowerTriangularSolver\tDSP method", "contents": "dsp.LowerTriangularSolver(${1:args})"} ,
		{"trigger": "dsp.LowpassFilter\tDSP method", "contents": "dsp.LowpassFilter(${1:args})"} ,
		{"trigger": "dsp.MatFileReader\tDSP method", "contents": "dsp.MatFileReader(${1:args})"} ,
		{"trigger": "dsp.MatFileWriter\tDSP method", "contents": "dsp.MatFileWriter(${1:args})"} ,
		{"trigger": "dsp.Maximum\tDSP method", "contents": "dsp.Maximum(${1:args})"} ,
		{"trigger": "dsp.Mean\tDSP method", "contents": "dsp.Mean(${1:args})"} ,
		{"trigger": "dsp.Median\tDSP method", "contents": "dsp.Median(${1:args})"} ,
		{"trigger": "dsp.Minimum\tDSP method", "contents": "dsp.Minimum(${1:args})"} ,
		{"trigger": "dsp.NCO\tDSP method", "contents": "dsp.NCO(${1:args})"} ,
		{"trigger": "dsp.Normalizer\tDSP method", "contents": "dsp.Normalizer(${1:args})"} ,
		{"trigger": "dsp.NotchPeakFilter\tDSP method", "contents": "dsp.NotchPeakFilter(${1:args})"} ,
		{"trigger": "dsp.ParametricEQFilter\tDSP method", "contents": "dsp.ParametricEQFilter(${1:args})"} ,
		{"trigger": "dsp.PeakFinder\tDSP method", "contents": "dsp.PeakFinder(${1:args})"} ,
		{"trigger": "dsp.PeakToPeak\tDSP method", "contents": "dsp.PeakToPeak(${1:args})"} ,
		{"trigger": "dsp.PeakToRMS\tDSP method", "contents": "dsp.PeakToRMS(${1:args})"} ,
		{"trigger": "dsp.PhaseExtractor\tDSP method", "contents": "dsp.PhaseExtractor(${1:args})"} ,
		{"trigger": "dsp.PhaseUnwrapper\tDSP method", "contents": "dsp.PhaseUnwrapper(${1:args})"} ,
		{"trigger": "dsp.PulseMetrics\tDSP method", "contents": "dsp.PulseMetrics(${1:args})"} ,
		{"trigger": "dsp.RCToAutocorrelation\tDSP method", "contents": "dsp.RCToAutocorrelation(${1:args})"} ,
		{"trigger": "dsp.RCToLPC\tDSP method", "contents": "dsp.RCToLPC(${1:args})"} ,
		{"trigger": "dsp.RLSFilter\tDSP method", "contents": "dsp.RLSFilter(${1:args})"} ,
		{"trigger": "dsp.RMS\tDSP method", "contents": "dsp.RMS(${1:args})"} ,
		{"trigger": "dsp.SampleRateConverter\tDSP method", "contents": "dsp.SampleRateConverter(${1:args})"} ,
		{"trigger": "dsp.ScalarQuantizerDecoder\tDSP method", "contents": "dsp.ScalarQuantizerDecoder(${1:args})"} ,
		{"trigger": "dsp.ScalarQuantizerEncoder\tDSP method", "contents": "dsp.ScalarQuantizerEncoder(${1:args})"} ,
		{"trigger": "dsp.SignalSink\tDSP method", "contents": "dsp.SignalSink(${1:args})"} ,
		{"trigger": "dsp.SignalSource\tDSP method", "contents": "dsp.SignalSource(${1:args})"} ,
		{"trigger": "dsp.SineWave\tDSP method", "contents": "dsp.SineWave(${1:args})"} ,
		{"trigger": "dsp.SpectrumEstimator\tDSP method", "contents": "dsp.SpectrumEstimator(${1:args})"} ,
		{"trigger": "dsp.StandardDeviation\tDSP method", "contents": "dsp.StandardDeviation(${1:args})"} ,
		{"trigger": "dsp.StateLevels\tDSP method", "contents": "dsp.StateLevels(${1:args})"} ,
		{"trigger": "dsp.SubbandAnalysisFilter\tDSP method", "contents": "dsp.SubbandAnalysisFilter(${1:args})"} ,
		{"trigger": "dsp.SubbandSynthesisFilter\tDSP method", "contents": "dsp.SubbandSynthesisFilter(${1:args})"} ,
		{"trigger": "dsp.TransferFunctionEstimator\tDSP method", "contents": "dsp.TransferFunctionEstimator(${1:args})"} ,
		{"trigger": "dsp.TransitionMetrics\tDSP method", "contents": "dsp.TransitionMetrics(${1:args})"} ,
		{"trigger": "dsp.UDPReceiver\tDSP method", "contents": "dsp.UDPReceiver(${1:args})"} ,
		{"trigger": "dsp.UDPSender\tDSP method", "contents": "dsp.UDPSender(${1:args})"} ,
		{"trigger": "dsp.UniformDecoder\tDSP method", "contents": "dsp.UniformDecoder(${1:args})"} ,
		{"trigger": "dsp.UniformEncoder\tDSP method", "contents": "dsp.UniformEncoder(${1:args})"} ,
		{"trigger": "dsp.UpperTriangularSolver\tDSP method", "contents": "dsp.UpperTriangularSolver(${1:args})"} ,
		{"trigger": "dsp.VariableBandwidthFIRFilter\tDSP method", "contents": "dsp.VariableBandwidthFIRFilter(${1:args})"} ,
		{"trigger": "dsp.VariableBandwidthIIRFilter\tDSP method", "contents": "dsp.VariableBandwidthIIRFilter(${1:args})"} ,
		{"trigger": "dsp.VariableFractionalDelay\tDSP method", "contents": "dsp.VariableFractionalDelay(${1:args})"} ,
		{"trigger": "dsp.VariableIntegerDelay\tDSP method", "contents": "dsp.VariableIntegerDelay(${1:args})"} ,
		{"trigger": "dsp.Variance\tDSP method", "contents": "dsp.Variance(${1:args})"} ,
		{"trigger": "dsp.VectorQuantizerDecoder\tDSP method", "contents": "dsp.VectorQuantizerDecoder(${1:args})"} ,
		{"trigger": "dsp.VectorQuantizerEncoder\tDSP method", "contents": "dsp.VectorQuantizerEncoder(${1:args})"} ,
		{"trigger": "dsp.Window\tDSP method", "contents": "dsp.Window(${1:args})"} ,
		{"trigger": "dsp.ZeroCrossingDetector\tDSP method", "contents": "dsp.ZeroCrossingDetector(${1:args})"} ,
		{"trigger": "dsp_links\tDSP method", "contents": "dsp_links(${1:args})"} ,
		{"trigger": "dsplib\tDSP method", "contents": "dsplib(${1:args})"} ,
		{"trigger": "dspstartup\tDSP method", "contents": "dspstartup(${1:args})"} ,
		{"trigger": "dspunfold\tDSP method", "contents": "dspunfold(${1:args})"} ,
		{"trigger": "ellip\tDSP method", "contents": "ellip(${1:args})"} ,
		{"trigger": "euclidfactors\tDSP method", "contents": "euclidfactors(${1:args})"} ,
		{"trigger": "fcfwrite\tDSP method", "contents": "fcfwrite(${1:args})"} ,
		{"trigger": "fdatool\tDSP method", "contents": "fdatool(${1:args})"} ,
		{"trigger": "fdesign\tDSP method", "contents": "fdesign(${1:args})"} ,
		{"trigger": "fdesign.arbgrpdelay\tDSP method", "contents": "fdesign.arbgrpdelay(${1:args})"} ,
		{"trigger": "fdesign.arbmag\tDSP method", "contents": "fdesign.arbmag(${1:args})"} ,
		{"trigger": "fdesign.arbmagnphase\tDSP method", "contents": "fdesign.arbmagnphase(${1:args})"} ,
		{"trigger": "fdesign.audioweighting\tDSP method", "contents": "fdesign.audioweighting(${1:args})"} ,
		{"trigger": "fdesign.bandpass\tDSP method", "contents": "fdesign.bandpass(${1:args})"} ,
		{"trigger": "fdesign.bandstop\tDSP method", "contents": "fdesign.bandstop(${1:args})"} ,
		{"trigger": "fdesign.ciccomp\tDSP method", "contents": "fdesign.ciccomp(${1:args})"} ,
		{"trigger": "fdesign.comb\tDSP method", "contents": "fdesign.comb(${1:args})"} ,
		{"trigger": "fdesign.decimator\tDSP method", "contents": "fdesign.decimator(${1:args})"} ,
		{"trigger": "fdesign.differentiator\tDSP method", "contents": "fdesign.differentiator(${1:args})"} ,
		{"trigger": "fdesign.fracdelay\tDSP method", "contents": "fdesign.fracdelay(${1:args})"} ,
		{"trigger": "fdesign.halfband\tDSP method", "contents": "fdesign.halfband(${1:args})"} ,
		{"trigger": "fdesign.highpass\tDSP method", "contents": "fdesign.highpass(${1:args})"} ,
		{"trigger": "fdesign.hilbert\tDSP method", "contents": "fdesign.hilbert(${1:args})"} ,
		{"trigger": "fdesign.interpolator\tDSP method", "contents": "fdesign.interpolator(${1:args})"} ,
		{"trigger": "fdesign.isinchp\tDSP method", "contents": "fdesign.isinchp(${1:args})"} ,
		{"trigger": "fdesign.isinclp\tDSP method", "contents": "fdesign.isinclp(${1:args})"} ,
		{"trigger": "fdesign.lowpass\tDSP method", "contents": "fdesign.lowpass(${1:args})"} ,
		{"trigger": "fdesign.notch\tDSP method", "contents": "fdesign.notch(${1:args})"} ,
		{"trigger": "fdesign.nyquist\tDSP method", "contents": "fdesign.nyquist(${1:args})"} ,
		{"trigger": "fdesign.octave\tDSP method", "contents": "fdesign.octave(${1:args})"} ,
		{"trigger": "fdesign.parameq\tDSP method", "contents": "fdesign.parameq(${1:args})"} ,
		{"trigger": "fdesign.peak\tDSP method", "contents": "fdesign.peak(${1:args})"} ,
		{"trigger": "fdesign.polysrc\tDSP method", "contents": "fdesign.polysrc(${1:args})"} ,
		{"trigger": "fdesign.pulseshaping\tDSP method", "contents": "fdesign.pulseshaping(${1:args})"} ,
		{"trigger": "fdesign.rsrc\tDSP method", "contents": "fdesign.rsrc(${1:args})"} ,
		{"trigger": "fftcoeffs\tDSP method", "contents": "fftcoeffs(${1:args})"} ,
		{"trigger": "filterbuilder\tDSP method", "contents": "filterbuilder(${1:args})"} ,
		{"trigger": "filtstates.cic\tDSP method", "contents": "filtstates.cic(${1:args})"} ,
		{"trigger": "fircband\tDSP method", "contents": "fircband(${1:args})"} ,
		{"trigger": "firceqrip\tDSP method", "contents": "firceqrip(${1:args})"} ,
		{"trigger": "fircls\tDSP method", "contents": "fircls(${1:args})"} ,
		{"trigger": "fireqint\tDSP method", "contents": "fireqint(${1:args})"} ,
		{"trigger": "firgr\tDSP method", "contents": "firgr(${1:args})"} ,
		{"trigger": "firhalfband\tDSP method", "contents": "firhalfband(${1:args})"} ,
		{"trigger": "firlp2hp\tDSP method", "contents": "firlp2hp(${1:args})"} ,
		{"trigger": "firlp2lp\tDSP method", "contents": "firlp2lp(${1:args})"} ,
		{"trigger": "firlpnorm\tDSP method", "contents": "firlpnorm(${1:args})"} ,
		{"trigger": "firls\tDSP method", "contents": "firls(${1:args})"} ,
		{"trigger": "firminphase\tDSP method", "contents": "firminphase(${1:args})"} ,
		{"trigger": "firnyquist\tDSP method", "contents": "firnyquist(${1:args})"} ,
		{"trigger": "firpr2chfb\tDSP method", "contents": "firpr2chfb(${1:args})"} ,
		{"trigger": "firtype\tDSP method", "contents": "firtype(${1:args})"} ,
		{"trigger": "freqrespest\tDSP method", "contents": "freqrespest(${1:args})"} ,
		{"trigger": "freqrespopts\tDSP method", "contents": "freqrespopts(${1:args})"} ,
		{"trigger": "freqsamp\tDSP method", "contents": "freqsamp(${1:args})"} ,
		{"trigger": "freqz\tDSP method", "contents": "freqz(${1:args})"} ,
		{"trigger": "fvtool\tDSP method", "contents": "fvtool(${1:args})"} ,
		{"trigger": "gain\tDSP method", "contents": "gain(${1:args})"} ,
		{"trigger": "grpdelay\tDSP method", "contents": "grpdelay(${1:args})"} ,
		{"trigger": "ifir\tDSP method", "contents": "ifir(${1:args})"} ,
		{"trigger": "iirbpc2bpc\tDSP method", "contents": "iirbpc2bpc(${1:args})"} ,
		{"trigger": "iircomb\tDSP method", "contents": "iircomb(${1:args})"} ,
		{"trigger": "iirftransf\tDSP method", "contents": "iirftransf(${1:args})"} ,
		{"trigger": "iirgrpdelay\tDSP method", "contents": "iirgrpdelay(${1:args})"} ,
		{"trigger": "iirlinphase\tDSP method", "contents": "iirlinphase(${1:args})"} ,
		{"trigger": "iirlp2bp\tDSP method", "contents": "iirlp2bp(${1:args})"} ,
		{"trigger": "iirlp2bpc\tDSP method", "contents": "iirlp2bpc(${1:args})"} ,
		{"trigger": "iirlp2bs\tDSP method", "contents": "iirlp2bs(${1:args})"} ,
		{"trigger": "iirlp2bsc\tDSP method", "contents": "iirlp2bsc(${1:args})"} ,
		{"trigger": "iirlp2hp\tDSP method", "contents": "iirlp2hp(${1:args})"} ,
		{"trigger": "iirlp2lp\tDSP method", "contents": "iirlp2lp(${1:args})"} ,
		{"trigger": "iirlp2mb\tDSP method", "contents": "iirlp2mb(${1:args})"} ,
		{"trigger": "iirlp2mbc\tDSP method", "contents": "iirlp2mbc(${1:args})"} ,
		{"trigger": "iirlp2xc\tDSP method", "contents": "iirlp2xc(${1:args})"} ,
		{"trigger": "iirlp2xn\tDSP method", "contents": "iirlp2xn(${1:args})"} ,
		{"trigger": "iirlpnorm\tDSP method", "contents": "iirlpnorm(${1:args})"} ,
		{"trigger": "iirlpnormc\tDSP method", "contents": "iirlpnormc(${1:args})"} ,
		{"trigger": "iirls\tDSP method", "contents": "iirls(${1:args})"} ,
		{"trigger": "iirnotch\tDSP method", "contents": "iirnotch(${1:args})"} ,
		{"trigger": "iirparameq\tDSP method", "contents": "iirparameq(${1:args})"} ,
		{"trigger": "iirpeak\tDSP method", "contents": "iirpeak(${1:args})"} ,
		{"trigger": "iirpowcomp\tDSP method", "contents": "iirpowcomp(${1:args})"} ,
		{"trigger": "iirrateup\tDSP method", "contents": "iirrateup(${1:args})"} ,
		{"trigger": "iirshift\tDSP method", "contents": "iirshift(${1:args})"} ,
		{"trigger": "iirshiftc\tDSP method", "contents": "iirshiftc(${1:args})"} ,
		{"trigger": "impz\tDSP method", "contents": "impz(${1:args})"} ,
		{"trigger": "int\tDSP method", "contents": "int(${1:args})"} ,
		{"trigger": "isallpass\tDSP method", "contents": "isallpass(${1:args})"} ,
		{"trigger": "isfir\tDSP method", "contents": "isfir(${1:args})"} ,
		{"trigger": "islinphase\tDSP method", "contents": "islinphase(${1:args})"} ,
		{"trigger": "ismaxphase\tDSP method", "contents": "ismaxphase(${1:args})"} ,
		{"trigger": "isminphase\tDSP method", "contents": "isminphase(${1:args})"} ,
		{"trigger": "issos\tDSP method", "contents": "issos(${1:args})"} ,
		{"trigger": "liblinks\tDSP method", "contents": "liblinks(${1:args})"} ,
		{"trigger": "limitcycle\tDSP method", "contents": "limitcycle(${1:args})"} ,
		{"trigger": "maxflat\tDSP method", "contents": "maxflat(${1:args})"} ,
		{"trigger": "maximizestopband\tDSP method", "contents": "maximizestopband(${1:args})"} ,
		{"trigger": "maxstep\tDSP method", "contents": "maxstep(${1:args})"} ,
		{"trigger": "measure\tDSP method", "contents": "measure(${1:args})"} ,
		{"trigger": "mfilt\tDSP method", "contents": "mfilt(${1:args})"} ,
		{"trigger": "mfilt.cascade\tDSP method", "contents": "mfilt.cascade(${1:args})"} ,
		{"trigger": "mfilt.cicdecim\tDSP method", "contents": "mfilt.cicdecim(${1:args})"} ,
		{"trigger": "mfilt.cicinterp\tDSP method", "contents": "mfilt.cicinterp(${1:args})"} ,
		{"trigger": "mfilt.farrowsrc\tDSP method", "contents": "mfilt.farrowsrc(${1:args})"} ,
		{"trigger": "mfilt.fftfirinterp\tDSP method", "contents": "mfilt.fftfirinterp(${1:args})"} ,
		{"trigger": "mfilt.firdecim\tDSP method", "contents": "mfilt.firdecim(${1:args})"} ,
		{"trigger": "mfilt.firfracdecim\tDSP method", "contents": "mfilt.firfracdecim(${1:args})"} ,
		{"trigger": "mfilt.firfracinterp\tDSP method", "contents": "mfilt.firfracinterp(${1:args})"} ,
		{"trigger": "mfilt.firinterp\tDSP method", "contents": "mfilt.firinterp(${1:args})"} ,
		{"trigger": "mfilt.firsrc\tDSP method", "contents": "mfilt.firsrc(${1:args})"} ,
		{"trigger": "mfilt.firtdecim\tDSP method", "contents": "mfilt.firtdecim(${1:args})"} ,
		{"trigger": "mfilt.holdinterp\tDSP method", "contents": "mfilt.holdinterp(${1:args})"} ,
		{"trigger": "mfilt.iirdecim\tDSP method", "contents": "mfilt.iirdecim(${1:args})"} ,
		{"trigger": "mfilt.iirinterp\tDSP method", "contents": "mfilt.iirinterp(${1:args})"} ,
		{"trigger": "mfilt.iirwdfdecim\tDSP method", "contents": "mfilt.iirwdfdecim(${1:args})"} ,
		{"trigger": "mfilt.iirwdfinterp\tDSP method", "contents": "mfilt.iirwdfinterp(${1:args})"} ,
		{"trigger": "mfilt.linearinterp\tDSP method", "contents": "mfilt.linearinterp(${1:args})"} ,
		{"trigger": "midicallback\tDSP method", "contents": "midicallback(${1:args})"} ,
		{"trigger": "midicontrols\tDSP method", "contents": "midicontrols(${1:args})"} ,
		{"trigger": "midiid\tDSP method", "contents": "midiid(${1:args})"} ,
		{"trigger": "midiread\tDSP method", "contents": "midiread(${1:args})"} ,
		{"trigger": "midisync\tDSP method", "contents": "midisync(${1:args})"} ,
		{"trigger": "minimizecoeffwl\tDSP method", "contents": "minimizecoeffwl(${1:args})"} ,
		{"trigger": "msepred\tDSP method", "contents": "msepred(${1:args})"} ,
		{"trigger": "msesim\tDSP method", "contents": "msesim(${1:args})"} ,
		{"trigger": "multistage\tDSP method", "contents": "multistage(${1:args})"} ,
		{"trigger": "noisepsd\tDSP method", "contents": "noisepsd(${1:args})"} ,
		{"trigger": "noisepsdopts\tDSP method", "contents": "noisepsdopts(${1:args})"} ,
		{"trigger": "normalize\tDSP method", "contents": "normalize(${1:args})"} ,
		{"trigger": "normalizefreq\tDSP method", "contents": "normalizefreq(${1:args})"} ,
		{"trigger": "nstates\tDSP method", "contents": "nstates(${1:args})"} ,
		{"trigger": "phasedelay\tDSP method", "contents": "phasedelay(${1:args})"} ,
		{"trigger": "phasez\tDSP method", "contents": "phasez(${1:args})"} ,
		{"trigger": "polyphase\tDSP method", "contents": "polyphase(${1:args})"} ,
		{"trigger": "qreport\tDSP method", "contents": "qreport(${1:args})"} ,
		{"trigger": "realizemdl\tDSP method", "contents": "realizemdl(${1:args})"} ,
		{"trigger": "rebuffer_delay\tDSP method", "contents": "rebuffer_delay(${1:args})"} ,
		{"trigger": "reffilter\tDSP method", "contents": "reffilter(${1:args})"} ,
		{"trigger": "reorder\tDSP method", "contents": "reorder(${1:args})"} ,
		{"trigger": "scale\tDSP method", "contents": "scale(${1:args})"} ,
		{"trigger": "scalecheck\tDSP method", "contents": "scalecheck(${1:args})"} ,
		{"trigger": "scaleopts\tDSP method", "contents": "scaleopts(${1:args})"} ,
		{"trigger": "set2int\tDSP method", "contents": "set2int(${1:args})"} ,
		{"trigger": "setspecs\tDSP method", "contents": "setspecs(${1:args})"} ,
		{"trigger": "sos\tDSP method", "contents": "sos(${1:args})"} ,
		{"trigger": "spbscopes.SpectrumAnalyzerConfiguration\tDSP method", "contents": "spbscopes.SpectrumAnalyzerConfiguration(${1:args})"} ,
		{"trigger": "specifyall\tDSP method", "contents": "specifyall(${1:args})"} ,
		{"trigger": "stepz\tDSP method", "contents": "stepz(${1:args})"} ,
		{"trigger": "sysobj\tDSP method", "contents": "sysobj(${1:args})"} ,
		{"trigger": "tf2ca\tDSP method", "contents": "tf2ca(${1:args})"} ,
		{"trigger": "tf2cl\tDSP method", "contents": "tf2cl(${1:args})"} ,
		{"trigger": "validstructures\tDSP method", "contents": "validstructures(${1:args})"} ,
		{"trigger": "wdf2allpass\tDSP method", "contents": "wdf2allpass(${1:args})"} ,
		{"trigger": "window\tDSP method", "contents": "window(${1:args})"} ,
		{"trigger": "zerophase\tDSP method", "contents": "zerophase(${1:args})"} ,
		{"trigger": "zpkbpc2bpc\tDSP method", "contents": "zpkbpc2bpc(${1:args})"} ,
		{"trigger": "zpkftransf\tDSP method", "contents": "zpkftransf(${1:args})"} ,
		{"trigger": "zpklp2bp\tDSP method", "contents": "zpklp2bp(${1:args})"} ,
		{"trigger": "zpklp2bpc\tDSP method", "contents": "zpklp2bpc(${1:args})"} ,
		{"trigger": "zpklp2bs\tDSP method", "contents": "zpklp2bs(${1:args})"} ,
		{"trigger": "zpklp2bsc\tDSP method", "contents": "zpklp2bsc(${1:args})"} ,
		{"trigger": "zpklp2hp\tDSP method", "contents": "zpklp2hp(${1:args})"} ,
		{"trigger": "zpklp2lp\tDSP method", "contents": "zpklp2lp(${1:args})"} ,
		{"trigger": "zpklp2mb\tDSP method", "contents": "zpklp2mb(${1:args})"} ,
		{"trigger": "zpklp2mbc\tDSP method", "contents": "zpklp2mbc(${1:args})"} ,
		{"trigger": "zpklp2xc\tDSP method", "contents": "zpklp2xc(${1:args})"} ,
		{"trigger": "zpklp2xn\tDSP method", "contents": "zpklp2xn(${1:args})"} ,
		{"trigger": "zpkrateup\tDSP method", "contents": "zpkrateup(${1:args})"} ,
		{"trigger": "zpkshift\tDSP method", "contents": "zpkshift(${1:args})"} ,
		{"trigger": "zpkshiftc\tDSP method", "contents": "zpkshiftc(${1:args})"} ,
		{"trigger": "zplane\tDSP method", "contents": "zplane(${1:args})"} ,

	]
}
{
	"scope": "source.matlab, source.m",
	"completions":
	[
		{"trigger": "ImageAdapter\tImages method", "contents": "ImageAdapter(${1:args})"} ,
		{"trigger": "activecontour\tImages method", "contents": "activecontour(${1:args})"} ,
		{"trigger": "adapthisteq\tImages method", "contents": "adapthisteq(${1:args})"} ,
		{"trigger": "analyze75info\tImages method", "contents": "analyze75info(${1:args})"} ,
		{"trigger": "analyze75read\tImages method", "contents": "analyze75read(${1:args})"} ,
		{"trigger": "applycform\tImages method", "contents": "applycform(${1:args})"} ,
		{"trigger": "applylut\tImages method", "contents": "applylut(${1:args})"} ,
		{"trigger": "axes2pix\tImages method", "contents": "axes2pix(${1:args})"} ,
		{"trigger": "bestblk\tImages method", "contents": "bestblk(${1:args})"} ,
		{"trigger": "blockproc\tImages method", "contents": "blockproc(${1:args})"} ,
		{"trigger": "bwarea\tImages method", "contents": "bwarea(${1:args})"} ,
		{"trigger": "bwareafilt\tImages method", "contents": "bwareafilt(${1:args})"} ,
		{"trigger": "bwareaopen\tImages method", "contents": "bwareaopen(${1:args})"} ,
		{"trigger": "bwboundaries\tImages method", "contents": "bwboundaries(${1:args})"} ,
		{"trigger": "bwconvhull\tImages method", "contents": "bwconvhull(${1:args})"} ,
		{"trigger": "bwdist\tImages method", "contents": "bwdist(${1:args})"} ,
		{"trigger": "bwdistgeodesic\tImages method", "contents": "bwdistgeodesic(${1:args})"} ,
		{"trigger": "bweuler\tImages method", "contents": "bweuler(${1:args})"} ,
		{"trigger": "bwhitmiss\tImages method", "contents": "bwhitmiss(${1:args})"} ,
		{"trigger": "bwlookup\tImages method", "contents": "bwlookup(${1:args})"} ,
		{"trigger": "bwpack\tImages method", "contents": "bwpack(${1:args})"} ,
		{"trigger": "bwperim\tImages method", "contents": "bwperim(${1:args})"} ,
		{"trigger": "bwpropfilt\tImages method", "contents": "bwpropfilt(${1:args})"} ,
		{"trigger": "bwselect\tImages method", "contents": "bwselect(${1:args})"} ,
		{"trigger": "bwtraceboundary\tImages method", "contents": "bwtraceboundary(${1:args})"} ,
		{"trigger": "bwulterode\tImages method", "contents": "bwulterode(${1:args})"} ,
		{"trigger": "bwunpack\tImages method", "contents": "bwunpack(${1:args})"} ,
		{"trigger": "checkerboard\tImages method", "contents": "checkerboard(${1:args})"} ,
		{"trigger": "col2im\tImages method", "contents": "col2im(${1:args})"} ,
		{"trigger": "colfilt\tImages method", "contents": "colfilt(${1:args})"} ,
		{"trigger": "conndef\tImages method", "contents": "conndef(${1:args})"} ,
		{"trigger": "convmtx2\tImages method", "contents": "convmtx2(${1:args})"} ,
		{"trigger": "corner\tImages method", "contents": "corner(${1:args})"} ,
		{"trigger": "cornermetric\tImages method", "contents": "cornermetric(${1:args})"} ,
		{"trigger": "corr2\tImages method", "contents": "corr2(${1:args})"} ,
		{"trigger": "cp2tform\tImages method", "contents": "cp2tform(${1:args})"} ,
		{"trigger": "cpcorr\tImages method", "contents": "cpcorr(${1:args})"} ,
		{"trigger": "cpselect\tImages method", "contents": "cpselect(${1:args})"} ,
		{"trigger": "cpstruct2pairs\tImages method", "contents": "cpstruct2pairs(${1:args})"} ,
		{"trigger": "dct2\tImages method", "contents": "dct2(${1:args})"} ,
		{"trigger": "dctmtx\tImages method", "contents": "dctmtx(${1:args})"} ,
		{"trigger": "deconvblind\tImages method", "contents": "deconvblind(${1:args})"} ,
		{"trigger": "deconvlucy\tImages method", "contents": "deconvlucy(${1:args})"} ,
		{"trigger": "deconvreg\tImages method", "contents": "deconvreg(${1:args})"} ,
		{"trigger": "deconvwnr\tImages method", "contents": "deconvwnr(${1:args})"} ,
		{"trigger": "decorrstretch\tImages method", "contents": "decorrstretch(${1:args})"} ,
		{"trigger": "demosaic\tImages method", "contents": "demosaic(${1:args})"} ,
		{"trigger": "dicomanon\tImages method", "contents": "dicomanon(${1:args})"} ,
		{"trigger": "dicomdict\tImages method", "contents": "dicomdict(${1:args})"} ,
		{"trigger": "dicomdisp\tImages method", "contents": "dicomdisp(${1:args})"} ,
		{"trigger": "dicominfo\tImages method", "contents": "dicominfo(${1:args})"} ,
		{"trigger": "dicomlookup\tImages method", "contents": "dicomlookup(${1:args})"} ,
		{"trigger": "dicomread\tImages method", "contents": "dicomread(${1:args})"} ,
		{"trigger": "dicomuid\tImages method", "contents": "dicomuid(${1:args})"} ,
		{"trigger": "dicomwrite\tImages method", "contents": "dicomwrite(${1:args})"} ,
		{"trigger": "dpxinfo\tImages method", "contents": "dpxinfo(${1:args})"} ,
		{"trigger": "dpxread\tImages method", "contents": "dpxread(${1:args})"} ,
		{"trigger": "edge\tImages method", "contents": "edge(${1:args})"} ,
		{"trigger": "edgetaper\tImages method", "contents": "edgetaper(${1:args})"} ,
		{"trigger": "entropy\tImages method", "contents": "entropy(${1:args})"} ,
		{"trigger": "entropyfilt\tImages method", "contents": "entropyfilt(${1:args})"} ,
		{"trigger": "fan2para\tImages method", "contents": "fan2para(${1:args})"} ,
		{"trigger": "fanbeam\tImages method", "contents": "fanbeam(${1:args})"} ,
		{"trigger": "findbounds\tImages method", "contents": "findbounds(${1:args})"} ,
		{"trigger": "fitgeotrans\tImages method", "contents": "fitgeotrans(${1:args})"} ,
		{"trigger": "fliptform\tImages method", "contents": "fliptform(${1:args})"} ,
		{"trigger": "freqz2\tImages method", "contents": "freqz2(${1:args})"} ,
		{"trigger": "fsamp2\tImages method", "contents": "fsamp2(${1:args})"} ,
		{"trigger": "fspecial\tImages method", "contents": "fspecial(${1:args})"} ,
		{"trigger": "ftrans2\tImages method", "contents": "ftrans2(${1:args})"} ,
		{"trigger": "fwind1\tImages method", "contents": "fwind1(${1:args})"} ,
		{"trigger": "fwind2\tImages method", "contents": "fwind2(${1:args})"} ,
		{"trigger": "gabor\tImages method", "contents": "gabor(${1:args})"} ,
		{"trigger": "getheight\tImages method", "contents": "getheight(${1:args})"} ,
		{"trigger": "getimage\tImages method", "contents": "getimage(${1:args})"} ,
		{"trigger": "getimagemodel\tImages method", "contents": "getimagemodel(${1:args})"} ,
		{"trigger": "getline\tImages method", "contents": "getline(${1:args})"} ,
		{"trigger": "getneighbors\tImages method", "contents": "getneighbors(${1:args})"} ,
		{"trigger": "getnhood\tImages method", "contents": "getnhood(${1:args})"} ,
		{"trigger": "getpts\tImages method", "contents": "getpts(${1:args})"} ,
		{"trigger": "getrangefromclass\tImages method", "contents": "getrangefromclass(${1:args})"} ,
		{"trigger": "getrect\tImages method", "contents": "getrect(${1:args})"} ,
		{"trigger": "getsequence\tImages method", "contents": "getsequence(${1:args})"} ,
		{"trigger": "gradientweight\tImages method", "contents": "gradientweight(${1:args})"} ,
		{"trigger": "gray2ind\tImages method", "contents": "gray2ind(${1:args})"} ,
		{"trigger": "graycomatrix\tImages method", "contents": "graycomatrix(${1:args})"} ,
		{"trigger": "grayconnected\tImages method", "contents": "grayconnected(${1:args})"} ,
		{"trigger": "graycoprops\tImages method", "contents": "graycoprops(${1:args})"} ,
		{"trigger": "graydiffweight\tImages method", "contents": "graydiffweight(${1:args})"} ,
		{"trigger": "graydist\tImages method", "contents": "graydist(${1:args})"} ,
		{"trigger": "grayslice\tImages method", "contents": "grayslice(${1:args})"} ,
		{"trigger": "graythresh\tImages method", "contents": "graythresh(${1:args})"} ,
		{"trigger": "hdrread\tImages method", "contents": "hdrread(${1:args})"} ,
		{"trigger": "hdrwrite\tImages method", "contents": "hdrwrite(${1:args})"} ,
		{"trigger": "histeq\tImages method", "contents": "histeq(${1:args})"} ,
		{"trigger": "hough\tImages method", "contents": "hough(${1:args})"} ,
		{"trigger": "houghlines\tImages method", "contents": "houghlines(${1:args})"} ,
		{"trigger": "houghpeaks\tImages method", "contents": "houghpeaks(${1:args})"} ,
		{"trigger": "iccfind\tImages method", "contents": "iccfind(${1:args})"} ,
		{"trigger": "iccread\tImages method", "contents": "iccread(${1:args})"} ,
		{"trigger": "iccroot\tImages method", "contents": "iccroot(${1:args})"} ,
		{"trigger": "iccwrite\tImages method", "contents": "iccwrite(${1:args})"} ,
		{"trigger": "idct2\tImages method", "contents": "idct2(${1:args})"} ,
		{"trigger": "ifanbeam\tImages method", "contents": "ifanbeam(${1:args})"} ,
		{"trigger": "im2bw\tImages method", "contents": "im2bw(${1:args})"} ,
		{"trigger": "im2col\tImages method", "contents": "im2col(${1:args})"} ,
		{"trigger": "im2int16\tImages method", "contents": "im2int16(${1:args})"} ,
		{"trigger": "im2java2d\tImages method", "contents": "im2java2d(${1:args})"} ,
		{"trigger": "im2single\tImages method", "contents": "im2single(${1:args})"} ,
		{"trigger": "im2uint16\tImages method", "contents": "im2uint16(${1:args})"} ,
		{"trigger": "im2uint8\tImages method", "contents": "im2uint8(${1:args})"} ,
		{"trigger": "imabsdiff\tImages method", "contents": "imabsdiff(${1:args})"} ,
		{"trigger": "imadd\tImages method", "contents": "imadd(${1:args})"} ,
		{"trigger": "imadjust\tImages method", "contents": "imadjust(${1:args})"} ,
		{"trigger": "imageinfo\tImages method", "contents": "imageinfo(${1:args})"} ,
		{"trigger": "imagemodel\tImages method", "contents": "imagemodel(${1:args})"} ,
		{"trigger": "images.geotrans.LocalWeightedMeanTransformation2D\tImages method", "contents": "images.geotrans.LocalWeightedMeanTransformation2D(${1:args})"} ,
		{"trigger": "images.geotrans.PiecewiseLinearTransformation2D\tImages method", "contents": "images.geotrans.PiecewiseLinearTransformation2D(${1:args})"} ,
		{"trigger": "images.geotrans.PolynomialTransformation2D\tImages method", "contents": "images.geotrans.PolynomialTransformation2D(${1:args})"} ,
		{"trigger": "imapplymatrix\tImages method", "contents": "imapplymatrix(${1:args})"} ,
		{"trigger": "imattributes\tImages method", "contents": "imattributes(${1:args})"} ,
		{"trigger": "imboxfilt\tImages method", "contents": "imboxfilt(${1:args})"} ,
		{"trigger": "imboxfilt3\tImages method", "contents": "imboxfilt3(${1:args})"} ,
		{"trigger": "imclearborder\tImages method", "contents": "imclearborder(${1:args})"} ,
		{"trigger": "imcolormaptool\tImages method", "contents": "imcolormaptool(${1:args})"} ,
		{"trigger": "imcomplement\tImages method", "contents": "imcomplement(${1:args})"} ,
		{"trigger": "imcontour\tImages method", "contents": "imcontour(${1:args})"} ,
		{"trigger": "imcontrast\tImages method", "contents": "imcontrast(${1:args})"} ,
		{"trigger": "imcrop\tImages method", "contents": "imcrop(${1:args})"} ,
		{"trigger": "imdisplayrange\tImages method", "contents": "imdisplayrange(${1:args})"} ,
		{"trigger": "imdistline\tImages method", "contents": "imdistline(${1:args})"} ,
		{"trigger": "imdivide\tImages method", "contents": "imdivide(${1:args})"} ,
		{"trigger": "imellipse\tImages method", "contents": "imellipse(${1:args})"} ,
		{"trigger": "imextendedmax\tImages method", "contents": "imextendedmax(${1:args})"} ,
		{"trigger": "imextendedmin\tImages method", "contents": "imextendedmin(${1:args})"} ,
		{"trigger": "imfill\tImages method", "contents": "imfill(${1:args})"} ,
		{"trigger": "imfilter\tImages method", "contents": "imfilter(${1:args})"} ,
		{"trigger": "imfindcircles\tImages method", "contents": "imfindcircles(${1:args})"} ,
		{"trigger": "imfreehand\tImages method", "contents": "imfreehand(${1:args})"} ,
		{"trigger": "imfuse\tImages method", "contents": "imfuse(${1:args})"} ,
		{"trigger": "imgaborfilt\tImages method", "contents": "imgaborfilt(${1:args})"} ,
		{"trigger": "imgaussfilt\tImages method", "contents": "imgaussfilt(${1:args})"} ,
		{"trigger": "imgaussfilt3\tImages method", "contents": "imgaussfilt3(${1:args})"} ,
		{"trigger": "imgca\tImages method", "contents": "imgca(${1:args})"} ,
		{"trigger": "imgcf\tImages method", "contents": "imgcf(${1:args})"} ,
		{"trigger": "imgetfile\tImages method", "contents": "imgetfile(${1:args})"} ,
		{"trigger": "imgradient\tImages method", "contents": "imgradient(${1:args})"} ,
		{"trigger": "imgradientxy\tImages method", "contents": "imgradientxy(${1:args})"} ,
		{"trigger": "imguidedfilter\tImages method", "contents": "imguidedfilter(${1:args})"} ,
		{"trigger": "imhandles\tImages method", "contents": "imhandles(${1:args})"} ,
		{"trigger": "imhist\tImages method", "contents": "imhist(${1:args})"} ,
		{"trigger": "imhistmatch\tImages method", "contents": "imhistmatch(${1:args})"} ,
		{"trigger": "imhmax\tImages method", "contents": "imhmax(${1:args})"} ,
		{"trigger": "imhmin\tImages method", "contents": "imhmin(${1:args})"} ,
		{"trigger": "imimposemin\tImages method", "contents": "imimposemin(${1:args})"} ,
		{"trigger": "imlincomb\tImages method", "contents": "imlincomb(${1:args})"} ,
		{"trigger": "imline\tImages method", "contents": "imline(${1:args})"} ,
		{"trigger": "immagbox\tImages method", "contents": "immagbox(${1:args})"} ,
		{"trigger": "immovie\tImages method", "contents": "immovie(${1:args})"} ,
		{"trigger": "immse\tImages method", "contents": "immse(${1:args})"} ,
		{"trigger": "immultiply\tImages method", "contents": "immultiply(${1:args})"} ,
		{"trigger": "imnoise\tImages method", "contents": "imnoise(${1:args})"} ,
		{"trigger": "imoverview\tImages method", "contents": "imoverview(${1:args})"} ,
		{"trigger": "imoverviewpanel\tImages method", "contents": "imoverviewpanel(${1:args})"} ,
		{"trigger": "impixel\tImages method", "contents": "impixel(${1:args})"} ,
		{"trigger": "impixelinfo\tImages method", "contents": "impixelinfo(${1:args})"} ,
		{"trigger": "impixelinfoval\tImages method", "contents": "impixelinfoval(${1:args})"} ,
		{"trigger": "impixelregion\tImages method", "contents": "impixelregion(${1:args})"} ,
		{"trigger": "impixelregionpanel\tImages method", "contents": "impixelregionpanel(${1:args})"} ,
		{"trigger": "implay\tImages method", "contents": "implay(${1:args})"} ,
		{"trigger": "impoint\tImages method", "contents": "impoint(${1:args})"} ,
		{"trigger": "impoly\tImages method", "contents": "impoly(${1:args})"} ,
		{"trigger": "improfile\tImages method", "contents": "improfile(${1:args})"} ,
		{"trigger": "impyramid\tImages method", "contents": "impyramid(${1:args})"} ,
		{"trigger": "imquantize\tImages method", "contents": "imquantize(${1:args})"} ,
		{"trigger": "imrect\tImages method", "contents": "imrect(${1:args})"} ,
		{"trigger": "imref2d\tImages method", "contents": "imref2d(${1:args})"} ,
		{"trigger": "imref3d\tImages method", "contents": "imref3d(${1:args})"} ,
		{"trigger": "imregconfig\tImages method", "contents": "imregconfig(${1:args})"} ,
		{"trigger": "imregcorr\tImages method", "contents": "imregcorr(${1:args})"} ,
		{"trigger": "imregdemons\tImages method", "contents": "imregdemons(${1:args})"} ,
		{"trigger": "imregionalmax\tImages method", "contents": "imregionalmax(${1:args})"} ,
		{"trigger": "imregionalmin\tImages method", "contents": "imregionalmin(${1:args})"} ,
		{"trigger": "imregister\tImages method", "contents": "imregister(${1:args})"} ,
		{"trigger": "imregtform\tImages method", "contents": "imregtform(${1:args})"} ,
		{"trigger": "imresize\tImages method", "contents": "imresize(${1:args})"} ,
		{"trigger": "imroi\tImages method", "contents": "imroi(${1:args})"} ,
		{"trigger": "imrotate\tImages method", "contents": "imrotate(${1:args})"} ,
		{"trigger": "imsave\tImages method", "contents": "imsave(${1:args})"} ,
		{"trigger": "imscrollpanel\tImages method", "contents": "imscrollpanel(${1:args})"} ,
		{"trigger": "imsegfmm\tImages method", "contents": "imsegfmm(${1:args})"} ,
		{"trigger": "imseggeodesic\tImages method", "contents": "imseggeodesic(${1:args})"} ,
		{"trigger": "imsharpen\tImages method", "contents": "imsharpen(${1:args})"} ,
		{"trigger": "imshowpair\tImages method", "contents": "imshowpair(${1:args})"} ,
		{"trigger": "imsubtract\tImages method", "contents": "imsubtract(${1:args})"} ,
		{"trigger": "imtool\tImages method", "contents": "imtool(${1:args})"} ,
		{"trigger": "imtransform\tImages method", "contents": "imtransform(${1:args})"} ,
		{"trigger": "imtranslate\tImages method", "contents": "imtranslate(${1:args})"} ,
		{"trigger": "ind2gray\tImages method", "contents": "ind2gray(${1:args})"} ,
		{"trigger": "integralBoxFilter\tImages method", "contents": "integralBoxFilter(${1:args})"} ,
		{"trigger": "integralBoxFilter3\tImages method", "contents": "integralBoxFilter3(${1:args})"} ,
		{"trigger": "integralImage3\tImages method", "contents": "integralImage3(${1:args})"} ,
		{"trigger": "interfileinfo\tImages method", "contents": "interfileinfo(${1:args})"} ,
		{"trigger": "interfileread\tImages method", "contents": "interfileread(${1:args})"} ,
		{"trigger": "intlut\tImages method", "contents": "intlut(${1:args})"} ,
		{"trigger": "iptGetPointerBehavior\tImages method", "contents": "iptGetPointerBehavior(${1:args})"} ,
		{"trigger": "iptPointerManager\tImages method", "contents": "iptPointerManager(${1:args})"} ,
		{"trigger": "iptSetPointerBehavior\tImages method", "contents": "iptSetPointerBehavior(${1:args})"} ,
		{"trigger": "iptaddcallback\tImages method", "contents": "iptaddcallback(${1:args})"} ,
		{"trigger": "iptcheckconn\tImages method", "contents": "iptcheckconn(${1:args})"} ,
		{"trigger": "iptcheckhandle\tImages method", "contents": "iptcheckhandle(${1:args})"} ,
		{"trigger": "iptcheckmap\tImages method", "contents": "iptcheckmap(${1:args})"} ,
		{"trigger": "iptgetapi\tImages method", "contents": "iptgetapi(${1:args})"} ,
		{"trigger": "iptgetpref\tImages method", "contents": "iptgetpref(${1:args})"} ,
		{"trigger": "ipticondir\tImages method", "contents": "ipticondir(${1:args})"} ,
		{"trigger": "iptprefs\tImages method", "contents": "iptprefs(${1:args})"} ,
		{"trigger": "iptremovecallback\tImages method", "contents": "iptremovecallback(${1:args})"} ,
		{"trigger": "iptsetpref\tImages method", "contents": "iptsetpref(${1:args})"} ,
		{"trigger": "iptwindowalign\tImages method", "contents": "iptwindowalign(${1:args})"} ,
		{"trigger": "iradon\tImages method", "contents": "iradon(${1:args})"} ,
		{"trigger": "isflat\tImages method", "contents": "isflat(${1:args})"} ,
		{"trigger": "isicc\tImages method", "contents": "isicc(${1:args})"} ,
		{"trigger": "isrset\tImages method", "contents": "isrset(${1:args})"} ,
		{"trigger": "lab2double\tImages method", "contents": "lab2double(${1:args})"} ,
		{"trigger": "lab2rgb\tImages method", "contents": "lab2rgb(${1:args})"} ,
		{"trigger": "lab2uint16\tImages method", "contents": "lab2uint16(${1:args})"} ,
		{"trigger": "lab2uint8\tImages method", "contents": "lab2uint8(${1:args})"} ,
		{"trigger": "lab2xyz\tImages method", "contents": "lab2xyz(${1:args})"} ,
		{"trigger": "label2rgb\tImages method", "contents": "label2rgb(${1:args})"} ,
		{"trigger": "labelmatrix\tImages method", "contents": "labelmatrix(${1:args})"} ,
		{"trigger": "makeConstrainToRectFcn\tImages method", "contents": "makeConstrainToRectFcn(${1:args})"} ,
		{"trigger": "makecform\tImages method", "contents": "makecform(${1:args})"} ,
		{"trigger": "makehdr\tImages method", "contents": "makehdr(${1:args})"} ,
		{"trigger": "makelut\tImages method", "contents": "makelut(${1:args})"} ,
		{"trigger": "makeresampler\tImages method", "contents": "makeresampler(${1:args})"} ,
		{"trigger": "maketform\tImages method", "contents": "maketform(${1:args})"} ,
		{"trigger": "mat2gray\tImages method", "contents": "mat2gray(${1:args})"} ,
		{"trigger": "mean2\tImages method", "contents": "mean2(${1:args})"} ,
		{"trigger": "medfilt2\tImages method", "contents": "medfilt2(${1:args})"} ,
		{"trigger": "montage\tImages method", "contents": "montage(${1:args})"} ,
		{"trigger": "multithresh\tImages method", "contents": "multithresh(${1:args})"} ,
		{"trigger": "nitfinfo\tImages method", "contents": "nitfinfo(${1:args})"} ,
		{"trigger": "nitfread\tImages method", "contents": "nitfread(${1:args})"} ,
		{"trigger": "nlfilter\tImages method", "contents": "nlfilter(${1:args})"} ,
		{"trigger": "normxcorr2\tImages method", "contents": "normxcorr2(${1:args})"} ,
		{"trigger": "ntsc2rgb\tImages method", "contents": "ntsc2rgb(${1:args})"} ,
		{"trigger": "openrset\tImages method", "contents": "openrset(${1:args})"} ,
		{"trigger": "ordfilt2\tImages method", "contents": "ordfilt2(${1:args})"} ,
		{"trigger": "otf2psf\tImages method", "contents": "otf2psf(${1:args})"} ,
		{"trigger": "padarray\tImages method", "contents": "padarray(${1:args})"} ,
		{"trigger": "para2fan\tImages method", "contents": "para2fan(${1:args})"} ,
		{"trigger": "phantom\tImages method", "contents": "phantom(${1:args})"} ,
		{"trigger": "poly2mask\tImages method", "contents": "poly2mask(${1:args})"} ,
		{"trigger": "psf2otf\tImages method", "contents": "psf2otf(${1:args})"} ,
		{"trigger": "psnr\tImages method", "contents": "psnr(${1:args})"} ,
		{"trigger": "qtdecomp\tImages method", "contents": "qtdecomp(${1:args})"} ,
		{"trigger": "qtgetblk\tImages method", "contents": "qtgetblk(${1:args})"} ,
		{"trigger": "qtsetblk\tImages method", "contents": "qtsetblk(${1:args})"} ,
		{"trigger": "radon\tImages method", "contents": "radon(${1:args})"} ,
		{"trigger": "rangefilt\tImages method", "contents": "rangefilt(${1:args})"} ,
		{"trigger": "regionfill\tImages method", "contents": "regionfill(${1:args})"} ,
		{"trigger": "regionprops\tImages method", "contents": "regionprops(${1:args})"} ,
		{"trigger": "registration.metric.MattesMutualInformation\tImages method", "contents": "registration.metric.MattesMutualInformation(${1:args})"} ,
		{"trigger": "registration.metric.MeanSquares\tImages method", "contents": "registration.metric.MeanSquares(${1:args})"} ,
		{"trigger": "registration.optimizer.OnePlusOneEvolutionary\tImages method", "contents": "registration.optimizer.OnePlusOneEvolutionary(${1:args})"} ,
		{"trigger": "registration.optimizer.RegularStepGradientDescent\tImages method", "contents": "registration.optimizer.RegularStepGradientDescent(${1:args})"} ,
		{"trigger": "rgb2lab\tImages method", "contents": "rgb2lab(${1:args})"} ,
		{"trigger": "rgb2ntsc\tImages method", "contents": "rgb2ntsc(${1:args})"} ,
		{"trigger": "rgb2xyz\tImages method", "contents": "rgb2xyz(${1:args})"} ,
		{"trigger": "rgb2ycbcr\tImages method", "contents": "rgb2ycbcr(${1:args})"} ,
		{"trigger": "roicolor\tImages method", "contents": "roicolor(${1:args})"} ,
		{"trigger": "roifill\tImages method", "contents": "roifill(${1:args})"} ,
		{"trigger": "roifilt2\tImages method", "contents": "roifilt2(${1:args})"} ,
		{"trigger": "roipoly\tImages method", "contents": "roipoly(${1:args})"} ,
		{"trigger": "rsetwrite\tImages method", "contents": "rsetwrite(${1:args})"} ,
		{"trigger": "ssim\tImages method", "contents": "ssim(${1:args})"} ,
		{"trigger": "std2\tImages method", "contents": "std2(${1:args})"} ,
		{"trigger": "stdfilt\tImages method", "contents": "stdfilt(${1:args})"} ,
		{"trigger": "strel\tImages method", "contents": "strel(${1:args})"} ,
		{"trigger": "stretchlim\tImages method", "contents": "stretchlim(${1:args})"} ,
		{"trigger": "subimage\tImages method", "contents": "subimage(${1:args})"} ,
		{"trigger": "tformarray\tImages method", "contents": "tformarray(${1:args})"} ,
		{"trigger": "tformfwd\tImages method", "contents": "tformfwd(${1:args})"} ,
		{"trigger": "tforminv\tImages method", "contents": "tforminv(${1:args})"} ,
		{"trigger": "tonemap\tImages method", "contents": "tonemap(${1:args})"} ,
		{"trigger": "translate\tImages method", "contents": "translate(${1:args})"} ,
		{"trigger": "truesize\tImages method", "contents": "truesize(${1:args})"} ,
		{"trigger": "visboundaries\tImages method", "contents": "visboundaries(${1:args})"} ,
		{"trigger": "viscircles\tImages method", "contents": "viscircles(${1:args})"} ,
		{"trigger": "warp\tImages method", "contents": "warp(${1:args})"} ,
		{"trigger": "watershed\tImages method", "contents": "watershed(${1:args})"} ,
		{"trigger": "whitepoint\tImages method", "contents": "whitepoint(${1:args})"} ,
		{"trigger": "wiener2\tImages method", "contents": "wiener2(${1:args})"} ,
		{"trigger": "xyz2double\tImages method", "contents": "xyz2double(${1:args})"} ,
		{"trigger": "xyz2lab\tImages method", "contents": "xyz2lab(${1:args})"} ,
		{"trigger": "xyz2rgb\tImages method", "contents": "xyz2rgb(${1:args})"} ,
		{"trigger": "xyz2uint16\tImages method", "contents": "xyz2uint16(${1:args})"} ,
		{"trigger": "ycbcr2rgb\tImages method", "contents": "ycbcr2rgb(${1:args})"} ,

	]
}
{
	"scope": "source.matlab, source.m",
	"completions":
	[
		{"trigger": "Animated\tMatlab method", "contents": "Animated(${1:args})"} ,
		{"trigger": "BeginInvoke\tMatlab method", "contents": "BeginInvoke(${1:args})"} ,
		{"trigger": "ColorSpec\tMatlab method", "contents": "ColorSpec(${1:args})"} ,
		{"trigger": "Combine\tMatlab method", "contents": "Combine(${1:args})"} ,
		{"trigger": "DelaunayTri\tMatlab method", "contents": "DelaunayTri(${1:args})"} ,
		{"trigger": "EndInvoke\tMatlab method", "contents": "EndInvoke(${1:args})"} ,
		{"trigger": "Execute\tMatlab method", "contents": "Execute(${1:args})"} ,
		{"trigger": "Feval\tMatlab method", "contents": "Feval(${1:args})"} ,
		{"trigger": "FunctionTestCase\tMatlab method", "contents": "FunctionTestCase(${1:args})"} ,
		{"trigger": "GetCharArray\tMatlab method", "contents": "GetCharArray(${1:args})"} ,
		{"trigger": "GetFullMatrix\tMatlab method", "contents": "GetFullMatrix(${1:args})"} ,
		{"trigger": "GetVariable\tMatlab method", "contents": "GetVariable(${1:args})"} ,
		{"trigger": "GetWorkspaceData\tMatlab method", "contents": "GetWorkspaceData(${1:args})"} ,
		{"trigger": "GraphPlot\tMatlab method", "contents": "GraphPlot(${1:args})"} ,
		{"trigger": "H5.close\tMatlab method", "contents": "H5.close(${1:args})"} ,
		{"trigger": "H5.garbage_collect\tMatlab method", "contents": "H5.garbage_collect(${1:args})"} ,
		{"trigger": "H5.get_libversion\tMatlab method", "contents": "H5.get_libversion(${1:args})"} ,
		{"trigger": "H5.open\tMatlab method", "contents": "H5.open(${1:args})"} ,
		{"trigger": "H5.set_free_list_limits\tMatlab method", "contents": "H5.set_free_list_limits(${1:args})"} ,
		{"trigger": "H5A.close\tMatlab method", "contents": "H5A.close(${1:args})"} ,
		{"trigger": "H5A.create\tMatlab method", "contents": "H5A.create(${1:args})"} ,
		{"trigger": "H5A.delete\tMatlab method", "contents": "H5A.delete(${1:args})"} ,
		{"trigger": "H5A.get_info\tMatlab method", "contents": "H5A.get_info(${1:args})"} ,
		{"trigger": "H5A.get_name\tMatlab method", "contents": "H5A.get_name(${1:args})"} ,
		{"trigger": "H5A.get_space\tMatlab method", "contents": "H5A.get_space(${1:args})"} ,
		{"trigger": "H5A.get_type\tMatlab method", "contents": "H5A.get_type(${1:args})"} ,
		{"trigger": "H5A.iterate\tMatlab method", "contents": "H5A.iterate(${1:args})"} ,
		{"trigger": "H5A.open\tMatlab method", "contents": "H5A.open(${1:args})"} ,
		{"trigger": "H5A.open_by_idx\tMatlab method", "contents": "H5A.open_by_idx(${1:args})"} ,
		{"trigger": "H5A.open_by_name\tMatlab method", "contents": "H5A.open_by_name(${1:args})"} ,
		{"trigger": "H5A.read\tMatlab method", "contents": "H5A.read(${1:args})"} ,
		{"trigger": "H5A.write\tMatlab method", "contents": "H5A.write(${1:args})"} ,
		{"trigger": "H5D.close\tMatlab method", "contents": "H5D.close(${1:args})"} ,
		{"trigger": "H5D.create\tMatlab method", "contents": "H5D.create(${1:args})"} ,
		{"trigger": "H5D.get_access_plist\tMatlab method", "contents": "H5D.get_access_plist(${1:args})"} ,
		{"trigger": "H5D.get_create_plist\tMatlab method", "contents": "H5D.get_create_plist(${1:args})"} ,
		{"trigger": "H5D.get_offset\tMatlab method", "contents": "H5D.get_offset(${1:args})"} ,
		{"trigger": "H5D.get_space\tMatlab method", "contents": "H5D.get_space(${1:args})"} ,
		{"trigger": "H5D.get_space_status\tMatlab method", "contents": "H5D.get_space_status(${1:args})"} ,
		{"trigger": "H5D.get_storage_size\tMatlab method", "contents": "H5D.get_storage_size(${1:args})"} ,
		{"trigger": "H5D.get_type\tMatlab method", "contents": "H5D.get_type(${1:args})"} ,
		{"trigger": "H5D.open\tMatlab method", "contents": "H5D.open(${1:args})"} ,
		{"trigger": "H5D.read\tMatlab method", "contents": "H5D.read(${1:args})"} ,
		{"trigger": "H5D.set_extent\tMatlab method", "contents": "H5D.set_extent(${1:args})"} ,
		{"trigger": "H5D.vlen_get_buf_size\tMatlab method", "contents": "H5D.vlen_get_buf_size(${1:args})"} ,
		{"trigger": "H5D.write\tMatlab method", "contents": "H5D.write(${1:args})"} ,
		{"trigger": "H5DS.attach_scale\tMatlab method", "contents": "H5DS.attach_scale(${1:args})"} ,
		{"trigger": "H5DS.detach_scale\tMatlab method", "contents": "H5DS.detach_scale(${1:args})"} ,
		{"trigger": "H5DS.get_label\tMatlab method", "contents": "H5DS.get_label(${1:args})"} ,
		{"trigger": "H5DS.get_num_scales\tMatlab method", "contents": "H5DS.get_num_scales(${1:args})"} ,
		{"trigger": "H5DS.get_scale_name\tMatlab method", "contents": "H5DS.get_scale_name(${1:args})"} ,
		{"trigger": "H5DS.is_scale\tMatlab method", "contents": "H5DS.is_scale(${1:args})"} ,
		{"trigger": "H5DS.iterate_scales\tMatlab method", "contents": "H5DS.iterate_scales(${1:args})"} ,
		{"trigger": "H5DS.set_label\tMatlab method", "contents": "H5DS.set_label(${1:args})"} ,
		{"trigger": "H5DS.set_scale\tMatlab method", "contents": "H5DS.set_scale(${1:args})"} ,
		{"trigger": "H5E.clear\tMatlab method", "contents": "H5E.clear(${1:args})"} ,
		{"trigger": "H5E.get_major\tMatlab method", "contents": "H5E.get_major(${1:args})"} ,
		{"trigger": "H5E.get_minor\tMatlab method", "contents": "H5E.get_minor(${1:args})"} ,
		{"trigger": "H5E.walk\tMatlab method", "contents": "H5E.walk(${1:args})"} ,
		{"trigger": "H5F.close\tMatlab method", "contents": "H5F.close(${1:args})"} ,
		{"trigger": "H5F.create\tMatlab method", "contents": "H5F.create(${1:args})"} ,
		{"trigger": "H5F.flush\tMatlab method", "contents": "H5F.flush(${1:args})"} ,
		{"trigger": "H5F.get_access_plist\tMatlab method", "contents": "H5F.get_access_plist(${1:args})"} ,
		{"trigger": "H5F.get_create_plist\tMatlab method", "contents": "H5F.get_create_plist(${1:args})"} ,
		{"trigger": "H5F.get_filesize\tMatlab method", "contents": "H5F.get_filesize(${1:args})"} ,
		{"trigger": "H5F.get_freespace\tMatlab method", "contents": "H5F.get_freespace(${1:args})"} ,
		{"trigger": "H5F.get_info\tMatlab method", "contents": "H5F.get_info(${1:args})"} ,
		{"trigger": "H5F.get_mdc_config\tMatlab method", "contents": "H5F.get_mdc_config(${1:args})"} ,
		{"trigger": "H5F.get_mdc_hit_rate\tMatlab method", "contents": "H5F.get_mdc_hit_rate(${1:args})"} ,
		{"trigger": "H5F.get_mdc_size\tMatlab method", "contents": "H5F.get_mdc_size(${1:args})"} ,
		{"trigger": "H5F.get_name\tMatlab method", "contents": "H5F.get_name(${1:args})"} ,
		{"trigger": "H5F.get_obj_count\tMatlab method", "contents": "H5F.get_obj_count(${1:args})"} ,
		{"trigger": "H5F.get_obj_ids\tMatlab method", "contents": "H5F.get_obj_ids(${1:args})"} ,
		{"trigger": "H5F.is_hdf5\tMatlab method", "contents": "H5F.is_hdf5(${1:args})"} ,
		{"trigger": "H5F.mount\tMatlab method", "contents": "H5F.mount(${1:args})"} ,
		{"trigger": "H5F.open\tMatlab method", "contents": "H5F.open(${1:args})"} ,
		{"trigger": "H5F.reopen\tMatlab method", "contents": "H5F.reopen(${1:args})"} ,
		{"trigger": "H5F.set_mdc_config\tMatlab method", "contents": "H5F.set_mdc_config(${1:args})"} ,
		{"trigger": "H5F.unmount\tMatlab method", "contents": "H5F.unmount(${1:args})"} ,
		{"trigger": "H5G.close\tMatlab method", "contents": "H5G.close(${1:args})"} ,
		{"trigger": "H5G.create\tMatlab method", "contents": "H5G.create(${1:args})"} ,
		{"trigger": "H5G.get_info\tMatlab method", "contents": "H5G.get_info(${1:args})"} ,
		{"trigger": "H5G.open\tMatlab method", "contents": "H5G.open(${1:args})"} ,
		{"trigger": "H5I.dec_ref\tMatlab method", "contents": "H5I.dec_ref(${1:args})"} ,
		{"trigger": "H5I.get_file_id\tMatlab method", "contents": "H5I.get_file_id(${1:args})"} ,
		{"trigger": "H5I.get_name\tMatlab method", "contents": "H5I.get_name(${1:args})"} ,
		{"trigger": "H5I.get_ref\tMatlab method", "contents": "H5I.get_ref(${1:args})"} ,
		{"trigger": "H5I.get_type\tMatlab method", "contents": "H5I.get_type(${1:args})"} ,
		{"trigger": "H5I.inc_ref\tMatlab method", "contents": "H5I.inc_ref(${1:args})"} ,
		{"trigger": "H5I.is_valid\tMatlab method", "contents": "H5I.is_valid(${1:args})"} ,
		{"trigger": "H5L.copy\tMatlab method", "contents": "H5L.copy(${1:args})"} ,
		{"trigger": "H5L.create_external\tMatlab method", "contents": "H5L.create_external(${1:args})"} ,
		{"trigger": "H5L.create_hard\tMatlab method", "contents": "H5L.create_hard(${1:args})"} ,
		{"trigger": "H5L.create_soft\tMatlab method", "contents": "H5L.create_soft(${1:args})"} ,
		{"trigger": "H5L.delete\tMatlab method", "contents": "H5L.delete(${1:args})"} ,
		{"trigger": "H5L.exists\tMatlab method", "contents": "H5L.exists(${1:args})"} ,
		{"trigger": "H5L.get_info\tMatlab method", "contents": "H5L.get_info(${1:args})"} ,
		{"trigger": "H5L.get_name_by_idx\tMatlab method", "contents": "H5L.get_name_by_idx(${1:args})"} ,
		{"trigger": "H5L.get_val\tMatlab method", "contents": "H5L.get_val(${1:args})"} ,
		{"trigger": "H5L.iterate\tMatlab method", "contents": "H5L.iterate(${1:args})"} ,
		{"trigger": "H5L.iterate_by_name\tMatlab method", "contents": "H5L.iterate_by_name(${1:args})"} ,
		{"trigger": "H5L.move\tMatlab method", "contents": "H5L.move(${1:args})"} ,
		{"trigger": "H5L.visit\tMatlab method", "contents": "H5L.visit(${1:args})"} ,
		{"trigger": "H5L.visit_by_name\tMatlab method", "contents": "H5L.visit_by_name(${1:args})"} ,
		{"trigger": "H5ML.compare_values\tMatlab method", "contents": "H5ML.compare_values(${1:args})"} ,
		{"trigger": "H5ML.get_constant_names\tMatlab method", "contents": "H5ML.get_constant_names(${1:args})"} ,
		{"trigger": "H5ML.get_constant_value\tMatlab method", "contents": "H5ML.get_constant_value(${1:args})"} ,
		{"trigger": "H5ML.get_function_names\tMatlab method", "contents": "H5ML.get_function_names(${1:args})"} ,
		{"trigger": "H5ML.get_mem_datatype\tMatlab method", "contents": "H5ML.get_mem_datatype(${1:args})"} ,
		{"trigger": "H5ML.hoffset\tMatlab method", "contents": "H5ML.hoffset(${1:args})"} ,
		{"trigger": "H5ML.sizeof\tMatlab method", "contents": "H5ML.sizeof(${1:args})"} ,
		{"trigger": "H5O.close\tMatlab method", "contents": "H5O.close(${1:args})"} ,
		{"trigger": "H5O.copy\tMatlab method", "contents": "H5O.copy(${1:args})"} ,
		{"trigger": "H5O.get_comment\tMatlab method", "contents": "H5O.get_comment(${1:args})"} ,
		{"trigger": "H5O.get_comment_by_name\tMatlab method", "contents": "H5O.get_comment_by_name(${1:args})"} ,
		{"trigger": "H5O.get_info\tMatlab method", "contents": "H5O.get_info(${1:args})"} ,
		{"trigger": "H5O.link\tMatlab method", "contents": "H5O.link(${1:args})"} ,
		{"trigger": "H5O.open\tMatlab method", "contents": "H5O.open(${1:args})"} ,
		{"trigger": "H5O.open_by_idx\tMatlab method", "contents": "H5O.open_by_idx(${1:args})"} ,
		{"trigger": "H5O.set_comment\tMatlab method", "contents": "H5O.set_comment(${1:args})"} ,
		{"trigger": "H5O.set_comment_by_name\tMatlab method", "contents": "H5O.set_comment_by_name(${1:args})"} ,
		{"trigger": "H5O.visit\tMatlab method", "contents": "H5O.visit(${1:args})"} ,
		{"trigger": "H5O.visit_by_name\tMatlab method", "contents": "H5O.visit_by_name(${1:args})"} ,
		{"trigger": "H5P.all_filters_avail\tMatlab method", "contents": "H5P.all_filters_avail(${1:args})"} ,
		{"trigger": "H5P.close\tMatlab method", "contents": "H5P.close(${1:args})"} ,
		{"trigger": "H5P.close_class\tMatlab method", "contents": "H5P.close_class(${1:args})"} ,
		{"trigger": "H5P.copy\tMatlab method", "contents": "H5P.copy(${1:args})"} ,
		{"trigger": "H5P.create\tMatlab method", "contents": "H5P.create(${1:args})"} ,
		{"trigger": "H5P.equal\tMatlab method", "contents": "H5P.equal(${1:args})"} ,
		{"trigger": "H5P.exist\tMatlab method", "contents": "H5P.exist(${1:args})"} ,
		{"trigger": "H5P.fill_value_defined\tMatlab method", "contents": "H5P.fill_value_defined(${1:args})"} ,
		{"trigger": "H5P.get\tMatlab method", "contents": "H5P.get(${1:args})"} ,
		{"trigger": "H5P.get_alignment\tMatlab method", "contents": "H5P.get_alignment(${1:args})"} ,
		{"trigger": "H5P.get_alloc_time\tMatlab method", "contents": "H5P.get_alloc_time(${1:args})"} ,
		{"trigger": "H5P.get_attr_creation_order\tMatlab method", "contents": "H5P.get_attr_creation_order(${1:args})"} ,
		{"trigger": "H5P.get_attr_phase_change\tMatlab method", "contents": "H5P.get_attr_phase_change(${1:args})"} ,
		{"trigger": "H5P.get_btree_ratios\tMatlab method", "contents": "H5P.get_btree_ratios(${1:args})"} ,
		{"trigger": "H5P.get_char_encoding\tMatlab method", "contents": "H5P.get_char_encoding(${1:args})"} ,
		{"trigger": "H5P.get_chunk\tMatlab method", "contents": "H5P.get_chunk(${1:args})"} ,
		{"trigger": "H5P.get_chunk_cache\tMatlab method", "contents": "H5P.get_chunk_cache(${1:args})"} ,
		{"trigger": "H5P.get_class\tMatlab method", "contents": "H5P.get_class(${1:args})"} ,
		{"trigger": "H5P.get_class_name\tMatlab method", "contents": "H5P.get_class_name(${1:args})"} ,
		{"trigger": "H5P.get_class_parent\tMatlab method", "contents": "H5P.get_class_parent(${1:args})"} ,
		{"trigger": "H5P.get_copy_object\tMatlab method", "contents": "H5P.get_copy_object(${1:args})"} ,
		{"trigger": "H5P.get_create_intermediate_group\tMatlab method", "contents": "H5P.get_create_intermediate_group(${1:args})"} ,
		{"trigger": "H5P.get_driver\tMatlab method", "contents": "H5P.get_driver(${1:args})"} ,
		{"trigger": "H5P.get_dxpl_multi\tMatlab method", "contents": "H5P.get_dxpl_multi(${1:args})"} ,
		{"trigger": "H5P.get_edc_check\tMatlab method", "contents": "H5P.get_edc_check(${1:args})"} ,
		{"trigger": "H5P.get_external\tMatlab method", "contents": "H5P.get_external(${1:args})"} ,
		{"trigger": "H5P.get_external_count\tMatlab method", "contents": "H5P.get_external_count(${1:args})"} ,
		{"trigger": "H5P.get_family_offset\tMatlab method", "contents": "H5P.get_family_offset(${1:args})"} ,
		{"trigger": "H5P.get_fapl_core\tMatlab method", "contents": "H5P.get_fapl_core(${1:args})"} ,
		{"trigger": "H5P.get_fapl_family\tMatlab method", "contents": "H5P.get_fapl_family(${1:args})"} ,
		{"trigger": "H5P.get_fapl_multi\tMatlab method", "contents": "H5P.get_fapl_multi(${1:args})"} ,
		{"trigger": "H5P.get_fclose_degree\tMatlab method", "contents": "H5P.get_fclose_degree(${1:args})"} ,
		{"trigger": "H5P.get_fill_time\tMatlab method", "contents": "H5P.get_fill_time(${1:args})"} ,
		{"trigger": "H5P.get_fill_value\tMatlab method", "contents": "H5P.get_fill_value(${1:args})"} ,
		{"trigger": "H5P.get_filter\tMatlab method", "contents": "H5P.get_filter(${1:args})"} ,
		{"trigger": "H5P.get_filter_by_id\tMatlab method", "contents": "H5P.get_filter_by_id(${1:args})"} ,
		{"trigger": "H5P.get_gc_references\tMatlab method", "contents": "H5P.get_gc_references(${1:args})"} ,
		{"trigger": "H5P.get_hyper_vector_size\tMatlab method", "contents": "H5P.get_hyper_vector_size(${1:args})"} ,
		{"trigger": "H5P.get_istore_k\tMatlab method", "contents": "H5P.get_istore_k(${1:args})"} ,
		{"trigger": "H5P.get_layout\tMatlab method", "contents": "H5P.get_layout(${1:args})"} ,
		{"trigger": "H5P.get_libver_bounds\tMatlab method", "contents": "H5P.get_libver_bounds(${1:args})"} ,
		{"trigger": "H5P.get_link_creation_order\tMatlab method", "contents": "H5P.get_link_creation_order(${1:args})"} ,
		{"trigger": "H5P.get_link_phase_change\tMatlab method", "contents": "H5P.get_link_phase_change(${1:args})"} ,
		{"trigger": "H5P.get_mdc_config\tMatlab method", "contents": "H5P.get_mdc_config(${1:args})"} ,
		{"trigger": "H5P.get_meta_block_size\tMatlab method", "contents": "H5P.get_meta_block_size(${1:args})"} ,
		{"trigger": "H5P.get_multi_type\tMatlab method", "contents": "H5P.get_multi_type(${1:args})"} ,
		{"trigger": "H5P.get_nfilters\tMatlab method", "contents": "H5P.get_nfilters(${1:args})"} ,
		{"trigger": "H5P.get_nprops\tMatlab method", "contents": "H5P.get_nprops(${1:args})"} ,
		{"trigger": "H5P.get_sieve_buf_size\tMatlab method", "contents": "H5P.get_sieve_buf_size(${1:args})"} ,
		{"trigger": "H5P.get_size\tMatlab method", "contents": "H5P.get_size(${1:args})"} ,
		{"trigger": "H5P.get_sizes\tMatlab method", "contents": "H5P.get_sizes(${1:args})"} ,
		{"trigger": "H5P.get_small_data_block_size\tMatlab method", "contents": "H5P.get_small_data_block_size(${1:args})"} ,
		{"trigger": "H5P.get_sym_k\tMatlab method", "contents": "H5P.get_sym_k(${1:args})"} ,
		{"trigger": "H5P.get_userblock\tMatlab method", "contents": "H5P.get_userblock(${1:args})"} ,
		{"trigger": "H5P.get_version\tMatlab method", "contents": "H5P.get_version(${1:args})"} ,
		{"trigger": "H5P.isa_class\tMatlab method", "contents": "H5P.isa_class(${1:args})"} ,
		{"trigger": "H5P.iterate\tMatlab method", "contents": "H5P.iterate(${1:args})"} ,
		{"trigger": "H5P.modify_filter\tMatlab method", "contents": "H5P.modify_filter(${1:args})"} ,
		{"trigger": "H5P.remove_filter\tMatlab method", "contents": "H5P.remove_filter(${1:args})"} ,
		{"trigger": "H5P.set\tMatlab method", "contents": "H5P.set(${1:args})"} ,
		{"trigger": "H5P.set_alignment\tMatlab method", "contents": "H5P.set_alignment(${1:args})"} ,
		{"trigger": "H5P.set_alloc_time\tMatlab method", "contents": "H5P.set_alloc_time(${1:args})"} ,
		{"trigger": "H5P.set_attr_creation_order\tMatlab method", "contents": "H5P.set_attr_creation_order(${1:args})"} ,
		{"trigger": "H5P.set_attr_phase_change\tMatlab method", "contents": "H5P.set_attr_phase_change(${1:args})"} ,
		{"trigger": "H5P.set_btree_ratios\tMatlab method", "contents": "H5P.set_btree_ratios(${1:args})"} ,
		{"trigger": "H5P.set_char_encoding\tMatlab method", "contents": "H5P.set_char_encoding(${1:args})"} ,
		{"trigger": "H5P.set_chunk\tMatlab method", "contents": "H5P.set_chunk(${1:args})"} ,
		{"trigger": "H5P.set_chunk_cache\tMatlab method", "contents": "H5P.set_chunk_cache(${1:args})"} ,
		{"trigger": "H5P.set_copy_object\tMatlab method", "contents": "H5P.set_copy_object(${1:args})"} ,
		{"trigger": "H5P.set_create_intermediate_group\tMatlab method", "contents": "H5P.set_create_intermediate_group(${1:args})"} ,
		{"trigger": "H5P.set_deflate\tMatlab method", "contents": "H5P.set_deflate(${1:args})"} ,
		{"trigger": "H5P.set_dxpl_multi\tMatlab method", "contents": "H5P.set_dxpl_multi(${1:args})"} ,
		{"trigger": "H5P.set_edc_check\tMatlab method", "contents": "H5P.set_edc_check(${1:args})"} ,
		{"trigger": "H5P.set_external\tMatlab method", "contents": "H5P.set_external(${1:args})"} ,
		{"trigger": "H5P.set_family_offset\tMatlab method", "contents": "H5P.set_family_offset(${1:args})"} ,
		{"trigger": "H5P.set_fapl_core\tMatlab method", "contents": "H5P.set_fapl_core(${1:args})"} ,
		{"trigger": "H5P.set_fapl_family\tMatlab method", "contents": "H5P.set_fapl_family(${1:args})"} ,
		{"trigger": "H5P.set_fapl_log\tMatlab method", "contents": "H5P.set_fapl_log(${1:args})"} ,
		{"trigger": "H5P.set_fapl_multi\tMatlab method", "contents": "H5P.set_fapl_multi(${1:args})"} ,
		{"trigger": "H5P.set_fapl_sec2\tMatlab method", "contents": "H5P.set_fapl_sec2(${1:args})"} ,
		{"trigger": "H5P.set_fapl_split\tMatlab method", "contents": "H5P.set_fapl_split(${1:args})"} ,
		{"trigger": "H5P.set_fapl_stdio\tMatlab method", "contents": "H5P.set_fapl_stdio(${1:args})"} ,
		{"trigger": "H5P.set_fclose_degree\tMatlab method", "contents": "H5P.set_fclose_degree(${1:args})"} ,
		{"trigger": "H5P.set_fill_time\tMatlab method", "contents": "H5P.set_fill_time(${1:args})"} ,
		{"trigger": "H5P.set_fill_value\tMatlab method", "contents": "H5P.set_fill_value(${1:args})"} ,
		{"trigger": "H5P.set_filter\tMatlab method", "contents": "H5P.set_filter(${1:args})"} ,
		{"trigger": "H5P.set_fletcher32\tMatlab method", "contents": "H5P.set_fletcher32(${1:args})"} ,
		{"trigger": "H5P.set_gc_references\tMatlab method", "contents": "H5P.set_gc_references(${1:args})"} ,
		{"trigger": "H5P.set_hyper_vector_size\tMatlab method", "contents": "H5P.set_hyper_vector_size(${1:args})"} ,
		{"trigger": "H5P.set_istore_k\tMatlab method", "contents": "H5P.set_istore_k(${1:args})"} ,
		{"trigger": "H5P.set_layout\tMatlab method", "contents": "H5P.set_layout(${1:args})"} ,
		{"trigger": "H5P.set_libver_bounds\tMatlab method", "contents": "H5P.set_libver_bounds(${1:args})"} ,
		{"trigger": "H5P.set_link_creation_order\tMatlab method", "contents": "H5P.set_link_creation_order(${1:args})"} ,
		{"trigger": "H5P.set_link_phase_change\tMatlab method", "contents": "H5P.set_link_phase_change(${1:args})"} ,
		{"trigger": "H5P.set_mdc_config\tMatlab method", "contents": "H5P.set_mdc_config(${1:args})"} ,
		{"trigger": "H5P.set_meta_block_size\tMatlab method", "contents": "H5P.set_meta_block_size(${1:args})"} ,
		{"trigger": "H5P.set_multi_type\tMatlab method", "contents": "H5P.set_multi_type(${1:args})"} ,
		{"trigger": "H5P.set_nbit\tMatlab method", "contents": "H5P.set_nbit(${1:args})"} ,
		{"trigger": "H5P.set_scaleoffset\tMatlab method", "contents": "H5P.set_scaleoffset(${1:args})"} ,
		{"trigger": "H5P.set_shuffle\tMatlab method", "contents": "H5P.set_shuffle(${1:args})"} ,
		{"trigger": "H5P.set_sieve_buf_size\tMatlab method", "contents": "H5P.set_sieve_buf_size(${1:args})"} ,
		{"trigger": "H5P.set_sizes\tMatlab method", "contents": "H5P.set_sizes(${1:args})"} ,
		{"trigger": "H5P.set_small_data_block_size\tMatlab method", "contents": "H5P.set_small_data_block_size(${1:args})"} ,
		{"trigger": "H5P.set_sym_k\tMatlab method", "contents": "H5P.set_sym_k(${1:args})"} ,
		{"trigger": "H5P.set_userblock\tMatlab method", "contents": "H5P.set_userblock(${1:args})"} ,
		{"trigger": "H5R.create\tMatlab method", "contents": "H5R.create(${1:args})"} ,
		{"trigger": "H5R.dereference\tMatlab method", "contents": "H5R.dereference(${1:args})"} ,
		{"trigger": "H5R.get_name\tMatlab method", "contents": "H5R.get_name(${1:args})"} ,
		{"trigger": "H5R.get_obj_type\tMatlab method", "contents": "H5R.get_obj_type(${1:args})"} ,
		{"trigger": "H5R.get_region\tMatlab method", "contents": "H5R.get_region(${1:args})"} ,
		{"trigger": "H5S.close\tMatlab method", "contents": "H5S.close(${1:args})"} ,
		{"trigger": "H5S.copy\tMatlab method", "contents": "H5S.copy(${1:args})"} ,
		{"trigger": "H5S.create\tMatlab method", "contents": "H5S.create(${1:args})"} ,
		{"trigger": "H5S.create_simple\tMatlab method", "contents": "H5S.create_simple(${1:args})"} ,
		{"trigger": "H5S.extent_copy\tMatlab method", "contents": "H5S.extent_copy(${1:args})"} ,
		{"trigger": "H5S.get_select_bounds\tMatlab method", "contents": "H5S.get_select_bounds(${1:args})"} ,
		{"trigger": "H5S.get_select_elem_npoints\tMatlab method", "contents": "H5S.get_select_elem_npoints(${1:args})"} ,
		{"trigger": "H5S.get_select_elem_pointlist\tMatlab method", "contents": "H5S.get_select_elem_pointlist(${1:args})"} ,
		{"trigger": "H5S.get_select_hyper_blocklist\tMatlab method", "contents": "H5S.get_select_hyper_blocklist(${1:args})"} ,
		{"trigger": "H5S.get_select_hyper_nblocks\tMatlab method", "contents": "H5S.get_select_hyper_nblocks(${1:args})"} ,
		{"trigger": "H5S.get_select_npoints\tMatlab method", "contents": "H5S.get_select_npoints(${1:args})"} ,
		{"trigger": "H5S.get_select_type\tMatlab method", "contents": "H5S.get_select_type(${1:args})"} ,
		{"trigger": "H5S.get_simple_extent_dims\tMatlab method", "contents": "H5S.get_simple_extent_dims(${1:args})"} ,
		{"trigger": "H5S.get_simple_extent_ndims\tMatlab method", "contents": "H5S.get_simple_extent_ndims(${1:args})"} ,
		{"trigger": "H5S.get_simple_extent_npoints\tMatlab method", "contents": "H5S.get_simple_extent_npoints(${1:args})"} ,
		{"trigger": "H5S.get_simple_extent_type\tMatlab method", "contents": "H5S.get_simple_extent_type(${1:args})"} ,
		{"trigger": "H5S.is_simple\tMatlab method", "contents": "H5S.is_simple(${1:args})"} ,
		{"trigger": "H5S.offset_simple\tMatlab method", "contents": "H5S.offset_simple(${1:args})"} ,
		{"trigger": "H5S.select_all\tMatlab method", "contents": "H5S.select_all(${1:args})"} ,
		{"trigger": "H5S.select_elements\tMatlab method", "contents": "H5S.select_elements(${1:args})"} ,
		{"trigger": "H5S.select_hyperslab\tMatlab method", "contents": "H5S.select_hyperslab(${1:args})"} ,
		{"trigger": "H5S.select_none\tMatlab method", "contents": "H5S.select_none(${1:args})"} ,
		{"trigger": "H5S.select_valid\tMatlab method", "contents": "H5S.select_valid(${1:args})"} ,
		{"trigger": "H5S.set_extent_none\tMatlab method", "contents": "H5S.set_extent_none(${1:args})"} ,
		{"trigger": "H5S.set_extent_simple\tMatlab method", "contents": "H5S.set_extent_simple(${1:args})"} ,
		{"trigger": "H5T.array_create\tMatlab method", "contents": "H5T.array_create(${1:args})"} ,
		{"trigger": "H5T.close\tMatlab method", "contents": "H5T.close(${1:args})"} ,
		{"trigger": "H5T.commit\tMatlab method", "contents": "H5T.commit(${1:args})"} ,
		{"trigger": "H5T.committed\tMatlab method", "contents": "H5T.committed(${1:args})"} ,
		{"trigger": "H5T.copy\tMatlab method", "contents": "H5T.copy(${1:args})"} ,
		{"trigger": "H5T.create\tMatlab method", "contents": "H5T.create(${1:args})"} ,
		{"trigger": "H5T.detect_class\tMatlab method", "contents": "H5T.detect_class(${1:args})"} ,
		{"trigger": "H5T.enum_create\tMatlab method", "contents": "H5T.enum_create(${1:args})"} ,
		{"trigger": "H5T.enum_insert\tMatlab method", "contents": "H5T.enum_insert(${1:args})"} ,
		{"trigger": "H5T.enum_nameof\tMatlab method", "contents": "H5T.enum_nameof(${1:args})"} ,
		{"trigger": "H5T.enum_valueof\tMatlab method", "contents": "H5T.enum_valueof(${1:args})"} ,
		{"trigger": "H5T.equal\tMatlab method", "contents": "H5T.equal(${1:args})"} ,
		{"trigger": "H5T.get_array_dims\tMatlab method", "contents": "H5T.get_array_dims(${1:args})"} ,
		{"trigger": "H5T.get_array_ndims\tMatlab method", "contents": "H5T.get_array_ndims(${1:args})"} ,
		{"trigger": "H5T.get_class\tMatlab method", "contents": "H5T.get_class(${1:args})"} ,
		{"trigger": "H5T.get_create_plist\tMatlab method", "contents": "H5T.get_create_plist(${1:args})"} ,
		{"trigger": "H5T.get_cset\tMatlab method", "contents": "H5T.get_cset(${1:args})"} ,
		{"trigger": "H5T.get_ebias\tMatlab method", "contents": "H5T.get_ebias(${1:args})"} ,
		{"trigger": "H5T.get_fields\tMatlab method", "contents": "H5T.get_fields(${1:args})"} ,
		{"trigger": "H5T.get_inpad\tMatlab method", "contents": "H5T.get_inpad(${1:args})"} ,
		{"trigger": "H5T.get_member_class\tMatlab method", "contents": "H5T.get_member_class(${1:args})"} ,
		{"trigger": "H5T.get_member_index\tMatlab method", "contents": "H5T.get_member_index(${1:args})"} ,
		{"trigger": "H5T.get_member_name\tMatlab method", "contents": "H5T.get_member_name(${1:args})"} ,
		{"trigger": "H5T.get_member_offset\tMatlab method", "contents": "H5T.get_member_offset(${1:args})"} ,
		{"trigger": "H5T.get_member_type\tMatlab method", "contents": "H5T.get_member_type(${1:args})"} ,
		{"trigger": "H5T.get_member_value\tMatlab method", "contents": "H5T.get_member_value(${1:args})"} ,
		{"trigger": "H5T.get_native_type\tMatlab method", "contents": "H5T.get_native_type(${1:args})"} ,
		{"trigger": "H5T.get_nmembers\tMatlab method", "contents": "H5T.get_nmembers(${1:args})"} ,
		{"trigger": "H5T.get_norm\tMatlab method", "contents": "H5T.get_norm(${1:args})"} ,
		{"trigger": "H5T.get_offset\tMatlab method", "contents": "H5T.get_offset(${1:args})"} ,
		{"trigger": "H5T.get_order\tMatlab method", "contents": "H5T.get_order(${1:args})"} ,
		{"trigger": "H5T.get_pad\tMatlab method", "contents": "H5T.get_pad(${1:args})"} ,
		{"trigger": "H5T.get_precision\tMatlab method", "contents": "H5T.get_precision(${1:args})"} ,
		{"trigger": "H5T.get_sign\tMatlab method", "contents": "H5T.get_sign(${1:args})"} ,
		{"trigger": "H5T.get_size\tMatlab method", "contents": "H5T.get_size(${1:args})"} ,
		{"trigger": "H5T.get_strpad\tMatlab method", "contents": "H5T.get_strpad(${1:args})"} ,
		{"trigger": "H5T.get_super\tMatlab method", "contents": "H5T.get_super(${1:args})"} ,
		{"trigger": "H5T.get_tag\tMatlab method", "contents": "H5T.get_tag(${1:args})"} ,
		{"trigger": "H5T.insert\tMatlab method", "contents": "H5T.insert(${1:args})"} ,
		{"trigger": "H5T.is_variable_str\tMatlab method", "contents": "H5T.is_variable_str(${1:args})"} ,
		{"trigger": "H5T.lock\tMatlab method", "contents": "H5T.lock(${1:args})"} ,
		{"trigger": "H5T.open\tMatlab method", "contents": "H5T.open(${1:args})"} ,
		{"trigger": "H5T.pack\tMatlab method", "contents": "H5T.pack(${1:args})"} ,
		{"trigger": "H5T.set_cset\tMatlab method", "contents": "H5T.set_cset(${1:args})"} ,
		{"trigger": "H5T.set_ebias\tMatlab method", "contents": "H5T.set_ebias(${1:args})"} ,
		{"trigger": "H5T.set_fields\tMatlab method", "contents": "H5T.set_fields(${1:args})"} ,
		{"trigger": "H5T.set_inpad\tMatlab method", "contents": "H5T.set_inpad(${1:args})"} ,
		{"trigger": "H5T.set_norm\tMatlab method", "contents": "H5T.set_norm(${1:args})"} ,
		{"trigger": "H5T.set_offset\tMatlab method", "contents": "H5T.set_offset(${1:args})"} ,
		{"trigger": "H5T.set_order\tMatlab method", "contents": "H5T.set_order(${1:args})"} ,
		{"trigger": "H5T.set_pad\tMatlab method", "contents": "H5T.set_pad(${1:args})"} ,
		{"trigger": "H5T.set_precision\tMatlab method", "contents": "H5T.set_precision(${1:args})"} ,
		{"trigger": "H5T.set_sign\tMatlab method", "contents": "H5T.set_sign(${1:args})"} ,
		{"trigger": "H5T.set_size\tMatlab method", "contents": "H5T.set_size(${1:args})"} ,
		{"trigger": "H5T.set_strpad\tMatlab method", "contents": "H5T.set_strpad(${1:args})"} ,
		{"trigger": "H5T.set_tag\tMatlab method", "contents": "H5T.set_tag(${1:args})"} ,
		{"trigger": "H5T.vlen_create\tMatlab method", "contents": "H5T.vlen_create(${1:args})"} ,
		{"trigger": "H5Z.filter_avail\tMatlab method", "contents": "H5Z.filter_avail(${1:args})"} ,
		{"trigger": "H5Z.get_filter_info\tMatlab method", "contents": "H5Z.get_filter_info(${1:args})"} ,
		{"trigger": "ImageDatastore\tMatlab method", "contents": "ImageDatastore(${1:args})"} ,
		{"trigger": "Inf\tMatlab method", "contents": "Inf(${1:args})"} ,
		{"trigger": "KeyValueDatastore\tMatlab method", "contents": "KeyValueDatastore(${1:args})"} ,
		{"trigger": "KeyValueStore\tMatlab method", "contents": "KeyValueStore(${1:args})"} ,
		{"trigger": "LineSpec\tMatlab method", "contents": "LineSpec(${1:args})"} ,
		{"trigger": "MException\tMatlab method", "contents": "MException(${1:args})"} ,
		{"trigger": "MaximizeCommandWindow\tMatlab method", "contents": "MaximizeCommandWindow(${1:args})"} ,
		{"trigger": "MinimizeCommandWindow\tMatlab method", "contents": "MinimizeCommandWindow(${1:args})"} ,
		{"trigger": "NET\tMatlab method", "contents": "NET(${1:args})"} ,
		{"trigger": "NET.Assembly\tMatlab method", "contents": "NET.Assembly(${1:args})"} ,
		{"trigger": "NET.GenericClass\tMatlab method", "contents": "NET.GenericClass(${1:args})"} ,
		{"trigger": "NET.NetException\tMatlab method", "contents": "NET.NetException(${1:args})"} ,
		{"trigger": "NET.addAssembly\tMatlab method", "contents": "NET.addAssembly(${1:args})"} ,
		{"trigger": "NET.convertArray\tMatlab method", "contents": "NET.convertArray(${1:args})"} ,
		{"trigger": "NET.createArray\tMatlab method", "contents": "NET.createArray(${1:args})"} ,
		{"trigger": "NET.createGeneric\tMatlab method", "contents": "NET.createGeneric(${1:args})"} ,
		{"trigger": "NET.disableAutoRelease\tMatlab method", "contents": "NET.disableAutoRelease(${1:args})"} ,
		{"trigger": "NET.enableAutoRelease\tMatlab method", "contents": "NET.enableAutoRelease(${1:args})"} ,
		{"trigger": "NET.invokeGenericMethod\tMatlab method", "contents": "NET.invokeGenericMethod(${1:args})"} ,
		{"trigger": "NET.isNETSupported\tMatlab method", "contents": "NET.isNETSupported(${1:args})"} ,
		{"trigger": "NET.setStaticProperty\tMatlab method", "contents": "NET.setStaticProperty(${1:args})"} ,
		{"trigger": "NaN\tMatlab method", "contents": "NaN(${1:args})"} ,
		{"trigger": "NaT\tMatlab method", "contents": "NaT(${1:args})"} ,
		{"trigger": "PutCharArray\tMatlab method", "contents": "PutCharArray(${1:args})"} ,
		{"trigger": "PutFullMatrix\tMatlab method", "contents": "PutFullMatrix(${1:args})"} ,
		{"trigger": "PutWorkspaceData\tMatlab method", "contents": "PutWorkspaceData(${1:args})"} ,
		{"trigger": "Quit\tMatlab method", "contents": "Quit(${1:args})"} ,
		{"trigger": "RandStream\tMatlab method", "contents": "RandStream(${1:args})"} ,
		{"trigger": "RandStream.create\tMatlab method", "contents": "RandStream.create(${1:args})"} ,
		{"trigger": "RandStream.getGlobalStream\tMatlab method", "contents": "RandStream.getGlobalStream(${1:args})"} ,
		{"trigger": "RandStream.list\tMatlab method", "contents": "RandStream.list(${1:args})"} ,
		{"trigger": "RandStream.setGlobalStream\tMatlab method", "contents": "RandStream.setGlobalStream(${1:args})"} ,
		{"trigger": "Remove\tMatlab method", "contents": "Remove(${1:args})"} ,
		{"trigger": "RemoveAll\tMatlab method", "contents": "RemoveAll(${1:args})"} ,
		{"trigger": "Special\tMatlab method", "contents": "Special(${1:args})"} ,
		{"trigger": "TabularTextDatastore\tMatlab method", "contents": "TabularTextDatastore(${1:args})"} ,
		{"trigger": "Test\tMatlab method", "contents": "Test(${1:args})"} ,
		{"trigger": "TestResult\tMatlab method", "contents": "TestResult(${1:args})"} ,
		{"trigger": "TestSuite.run\tMatlab method", "contents": "TestSuite.run(${1:args})"} ,
		{"trigger": "Tiff\tMatlab method", "contents": "Tiff(${1:args})"} ,
		{"trigger": "Tiff.close\tMatlab method", "contents": "Tiff.close(${1:args})"} ,
		{"trigger": "Tiff.computeStrip\tMatlab method", "contents": "Tiff.computeStrip(${1:args})"} ,
		{"trigger": "Tiff.computeTile\tMatlab method", "contents": "Tiff.computeTile(${1:args})"} ,
		{"trigger": "Tiff.currentDirectory\tMatlab method", "contents": "Tiff.currentDirectory(${1:args})"} ,
		{"trigger": "Tiff.getTag\tMatlab method", "contents": "Tiff.getTag(${1:args})"} ,
		{"trigger": "Tiff.getTagNames\tMatlab method", "contents": "Tiff.getTagNames(${1:args})"} ,
		{"trigger": "Tiff.getVersion\tMatlab method", "contents": "Tiff.getVersion(${1:args})"} ,
		{"trigger": "Tiff.isTiled\tMatlab method", "contents": "Tiff.isTiled(${1:args})"} ,
		{"trigger": "Tiff.lastDirectory\tMatlab method", "contents": "Tiff.lastDirectory(${1:args})"} ,
		{"trigger": "Tiff.nextDirectory\tMatlab method", "contents": "Tiff.nextDirectory(${1:args})"} ,
		{"trigger": "Tiff.numberOfStrips\tMatlab method", "contents": "Tiff.numberOfStrips(${1:args})"} ,
		{"trigger": "Tiff.numberOfTiles\tMatlab method", "contents": "Tiff.numberOfTiles(${1:args})"} ,
		{"trigger": "Tiff.read\tMatlab method", "contents": "Tiff.read(${1:args})"} ,
		{"trigger": "Tiff.readEncodedStrip\tMatlab method", "contents": "Tiff.readEncodedStrip(${1:args})"} ,
		{"trigger": "Tiff.readEncodedTile\tMatlab method", "contents": "Tiff.readEncodedTile(${1:args})"} ,
		{"trigger": "Tiff.readRGBAImage\tMatlab method", "contents": "Tiff.readRGBAImage(${1:args})"} ,
		{"trigger": "Tiff.readRGBAStrip\tMatlab method", "contents": "Tiff.readRGBAStrip(${1:args})"} ,
		{"trigger": "Tiff.readRGBATile\tMatlab method", "contents": "Tiff.readRGBATile(${1:args})"} ,
		{"trigger": "Tiff.rewriteDirectory\tMatlab method", "contents": "Tiff.rewriteDirectory(${1:args})"} ,
		{"trigger": "Tiff.setDirectory\tMatlab method", "contents": "Tiff.setDirectory(${1:args})"} ,
		{"trigger": "Tiff.setSubDirectory\tMatlab method", "contents": "Tiff.setSubDirectory(${1:args})"} ,
		{"trigger": "Tiff.setTag\tMatlab method", "contents": "Tiff.setTag(${1:args})"} ,
		{"trigger": "Tiff.write\tMatlab method", "contents": "Tiff.write(${1:args})"} ,
		{"trigger": "Tiff.writeDirectory\tMatlab method", "contents": "Tiff.writeDirectory(${1:args})"} ,
		{"trigger": "Tiff.writeEncodedStrip\tMatlab method", "contents": "Tiff.writeEncodedStrip(${1:args})"} ,
		{"trigger": "Tiff.writeEncodedTile\tMatlab method", "contents": "Tiff.writeEncodedTile(${1:args})"} ,
		{"trigger": "TriRep\tMatlab method", "contents": "TriRep(${1:args})"} ,
		{"trigger": "TriScatteredInterp\tMatlab method", "contents": "TriScatteredInterp(${1:args})"} ,
		{"trigger": "ValueIterator\tMatlab method", "contents": "ValueIterator(${1:args})"} ,
		{"trigger": "VideoReader\tMatlab method", "contents": "VideoReader(${1:args})"} ,
		{"trigger": "VideoWriter\tMatlab method", "contents": "VideoWriter(${1:args})"} ,
		{"trigger": "abs\tMatlab method", "contents": "abs(${1:args})"} ,
		{"trigger": "accumarray\tMatlab method", "contents": "accumarray(${1:args})"} ,
		{"trigger": "acos\tMatlab method", "contents": "acos(${1:args})"} ,
		{"trigger": "acosd\tMatlab method", "contents": "acosd(${1:args})"} ,
		{"trigger": "acosh\tMatlab method", "contents": "acosh(${1:args})"} ,
		{"trigger": "acot\tMatlab method", "contents": "acot(${1:args})"} ,
		{"trigger": "acotd\tMatlab method", "contents": "acotd(${1:args})"} ,
		{"trigger": "acoth\tMatlab method", "contents": "acoth(${1:args})"} ,
		{"trigger": "acsc\tMatlab method", "contents": "acsc(${1:args})"} ,
		{"trigger": "acscd\tMatlab method", "contents": "acscd(${1:args})"} ,
		{"trigger": "acsch\tMatlab method", "contents": "acsch(${1:args})"} ,
		{"trigger": "actxGetRunningServer\tMatlab method", "contents": "actxGetRunningServer(${1:args})"} ,
		{"trigger": "actxcontrol\tMatlab method", "contents": "actxcontrol(${1:args})"} ,
		{"trigger": "actxcontrollist\tMatlab method", "contents": "actxcontrollist(${1:args})"} ,
		{"trigger": "actxcontrolselect\tMatlab method", "contents": "actxcontrolselect(${1:args})"} ,
		{"trigger": "actxserver\tMatlab method", "contents": "actxserver(${1:args})"} ,
		{"trigger": "add\tMatlab method", "contents": "add(${1:args})"} ,
		{"trigger": "addCause\tMatlab method", "contents": "addCause(${1:args})"} ,
		{"trigger": "addOptional\tMatlab method", "contents": "addOptional(${1:args})"} ,
		{"trigger": "addParamValue\tMatlab method", "contents": "addParamValue(${1:args})"} ,
		{"trigger": "addParameter\tMatlab method", "contents": "addParameter(${1:args})"} ,
		{"trigger": "addRequired\tMatlab method", "contents": "addRequired(${1:args})"} ,
		{"trigger": "addcats\tMatlab method", "contents": "addcats(${1:args})"} ,
		{"trigger": "addedge\tMatlab method", "contents": "addedge(${1:args})"} ,
		{"trigger": "addevent\tMatlab method", "contents": "addevent(${1:args})"} ,
		{"trigger": "addmulti\tMatlab method", "contents": "addmulti(${1:args})"} ,
		{"trigger": "addnode\tMatlab method", "contents": "addnode(${1:args})"} ,
		{"trigger": "addpath\tMatlab method", "contents": "addpath(${1:args})"} ,
		{"trigger": "addpoints\tMatlab method", "contents": "addpoints(${1:args})"} ,
		{"trigger": "addpref\tMatlab method", "contents": "addpref(${1:args})"} ,
		{"trigger": "addproperty\tMatlab method", "contents": "addproperty(${1:args})"} ,
		{"trigger": "addsample\tMatlab method", "contents": "addsample(${1:args})"} ,
		{"trigger": "addsampletocollection\tMatlab method", "contents": "addsampletocollection(${1:args})"} ,
		{"trigger": "addtodate\tMatlab method", "contents": "addtodate(${1:args})"} ,
		{"trigger": "addts\tMatlab method", "contents": "addts(${1:args})"} ,
		{"trigger": "adjacency\tMatlab method", "contents": "adjacency(${1:args})"} ,
		{"trigger": "airy\tMatlab method", "contents": "airy(${1:args})"} ,
		{"trigger": "align\tMatlab method", "contents": "align(${1:args})"} ,
		{"trigger": "alim\tMatlab method", "contents": "alim(${1:args})"} ,
		{"trigger": "all\tMatlab method", "contents": "all(${1:args})"} ,
		{"trigger": "allchild\tMatlab method", "contents": "allchild(${1:args})"} ,
		{"trigger": "alpha\tMatlab method", "contents": "alpha(${1:args})"} ,
		{"trigger": "alphaShape\tMatlab method", "contents": "alphaShape(${1:args})"} ,
		{"trigger": "alphaSpectrum\tMatlab method", "contents": "alphaSpectrum(${1:args})"} ,
		{"trigger": "alphaTriangulation\tMatlab method", "contents": "alphaTriangulation(${1:args})"} ,
		{"trigger": "alphamap\tMatlab method", "contents": "alphamap(${1:args})"} ,
		{"trigger": "amd\tMatlab method", "contents": "amd(${1:args})"} ,
		{"trigger": "ancestor\tMatlab method", "contents": "ancestor(${1:args})"} ,
		{"trigger": "and\tMatlab method", "contents": "and(${1:args})"} ,
		{"trigger": "angle\tMatlab method", "contents": "angle(${1:args})"} ,
		{"trigger": "animatedline\tMatlab method", "contents": "animatedline(${1:args})"} ,
		{"trigger": "annotation\tMatlab method", "contents": "annotation(${1:args})"} ,
		{"trigger": "ans\tMatlab method", "contents": "ans(${1:args})"} ,
		{"trigger": "any\tMatlab method", "contents": "any(${1:args})"} ,
		{"trigger": "append\tMatlab method", "contents": "append(${1:args})"} ,
		{"trigger": "area\tMatlab method", "contents": "area(${1:args})"} ,
		{"trigger": "array2table\tMatlab method", "contents": "array2table(${1:args})"} ,
		{"trigger": "arrayfun\tMatlab method", "contents": "arrayfun(${1:args})"} ,
		{"trigger": "asec\tMatlab method", "contents": "asec(${1:args})"} ,
		{"trigger": "asecd\tMatlab method", "contents": "asecd(${1:args})"} ,
		{"trigger": "asech\tMatlab method", "contents": "asech(${1:args})"} ,
		{"trigger": "asin\tMatlab method", "contents": "asin(${1:args})"} ,
		{"trigger": "asind\tMatlab method", "contents": "asind(${1:args})"} ,
		{"trigger": "asinh\tMatlab method", "contents": "asinh(${1:args})"} ,
		{"trigger": "assert\tMatlab method", "contents": "assert(${1:args})"} ,
		{"trigger": "assignin\tMatlab method", "contents": "assignin(${1:args})"} ,
		{"trigger": "atan\tMatlab method", "contents": "atan(${1:args})"} ,
		{"trigger": "atan2\tMatlab method", "contents": "atan2(${1:args})"} ,
		{"trigger": "atan2d\tMatlab method", "contents": "atan2d(${1:args})"} ,
		{"trigger": "atand\tMatlab method", "contents": "atand(${1:args})"} ,
		{"trigger": "atanh\tMatlab method", "contents": "atanh(${1:args})"} ,
		{"trigger": "audiodevinfo\tMatlab method", "contents": "audiodevinfo(${1:args})"} ,
		{"trigger": "audioinfo\tMatlab method", "contents": "audioinfo(${1:args})"} ,
		{"trigger": "audioplayer\tMatlab method", "contents": "audioplayer(${1:args})"} ,
		{"trigger": "audioread\tMatlab method", "contents": "audioread(${1:args})"} ,
		{"trigger": "audiorecorder\tMatlab method", "contents": "audiorecorder(${1:args})"} ,
		{"trigger": "audiowrite\tMatlab method", "contents": "audiowrite(${1:args})"} ,
		{"trigger": "aufinfo\tMatlab method", "contents": "aufinfo(${1:args})"} ,
		{"trigger": "auread\tMatlab method", "contents": "auread(${1:args})"} ,
		{"trigger": "auwrite\tMatlab method", "contents": "auwrite(${1:args})"} ,
		{"trigger": "aviinfo\tMatlab method", "contents": "aviinfo(${1:args})"} ,
		{"trigger": "axes\tMatlab method", "contents": "axes(${1:args})"} ,
		{"trigger": "axis\tMatlab method", "contents": "axis(${1:args})"} ,
		{"trigger": "balance\tMatlab method", "contents": "balance(${1:args})"} ,
		{"trigger": "bandwidth\tMatlab method", "contents": "bandwidth(${1:args})"} ,
		{"trigger": "bar\tMatlab method", "contents": "bar(${1:args})"} ,
		{"trigger": "bar3\tMatlab method", "contents": "bar3(${1:args})"} ,
		{"trigger": "bar3h\tMatlab method", "contents": "bar3h(${1:args})"} ,
		{"trigger": "barh\tMatlab method", "contents": "barh(${1:args})"} ,
		{"trigger": "baryToCart\tMatlab method", "contents": "baryToCart(${1:args})"} ,
		{"trigger": "barycentricToCartesian\tMatlab method", "contents": "barycentricToCartesian(${1:args})"} ,
		{"trigger": "base2dec\tMatlab method", "contents": "base2dec(${1:args})"} ,
		{"trigger": "beep\tMatlab method", "contents": "beep(${1:args})"} ,
		{"trigger": "bench\tMatlab method", "contents": "bench(${1:args})"} ,
		{"trigger": "besselh\tMatlab method", "contents": "besselh(${1:args})"} ,
		{"trigger": "besseli\tMatlab method", "contents": "besseli(${1:args})"} ,
		{"trigger": "besselj\tMatlab method", "contents": "besselj(${1:args})"} ,
		{"trigger": "besselk\tMatlab method", "contents": "besselk(${1:args})"} ,
		{"trigger": "bessely\tMatlab method", "contents": "bessely(${1:args})"} ,
		{"trigger": "beta\tMatlab method", "contents": "beta(${1:args})"} ,
		{"trigger": "betainc\tMatlab method", "contents": "betainc(${1:args})"} ,
		{"trigger": "betaincinv\tMatlab method", "contents": "betaincinv(${1:args})"} ,
		{"trigger": "betaln\tMatlab method", "contents": "betaln(${1:args})"} ,
		{"trigger": "between\tMatlab method", "contents": "between(${1:args})"} ,
		{"trigger": "bfsearch\tMatlab method", "contents": "bfsearch(${1:args})"} ,
		{"trigger": "bicg\tMatlab method", "contents": "bicg(${1:args})"} ,
		{"trigger": "bicgstab\tMatlab method", "contents": "bicgstab(${1:args})"} ,
		{"trigger": "bicgstabl\tMatlab method", "contents": "bicgstabl(${1:args})"} ,
		{"trigger": "bin2dec\tMatlab method", "contents": "bin2dec(${1:args})"} ,
		{"trigger": "bitand\tMatlab method", "contents": "bitand(${1:args})"} ,
		{"trigger": "bitcmp\tMatlab method", "contents": "bitcmp(${1:args})"} ,
		{"trigger": "bitget\tMatlab method", "contents": "bitget(${1:args})"} ,
		{"trigger": "bitmax\tMatlab method", "contents": "bitmax(${1:args})"} ,
		{"trigger": "bitnot\tMatlab method", "contents": "bitnot(${1:args})"} ,
		{"trigger": "bitor\tMatlab method", "contents": "bitor(${1:args})"} ,
		{"trigger": "bitset\tMatlab method", "contents": "bitset(${1:args})"} ,
		{"trigger": "bitshift\tMatlab method", "contents": "bitshift(${1:args})"} ,
		{"trigger": "bitxor\tMatlab method", "contents": "bitxor(${1:args})"} ,
		{"trigger": "blanks\tMatlab method", "contents": "blanks(${1:args})"} ,
		{"trigger": "blkdiag\tMatlab method", "contents": "blkdiag(${1:args})"} ,
		{"trigger": "boundary\tMatlab method", "contents": "boundary(${1:args})"} ,
		{"trigger": "boundaryFacets\tMatlab method", "contents": "boundaryFacets(${1:args})"} ,
		{"trigger": "box\tMatlab method", "contents": "box(${1:args})"} ,
		{"trigger": "break\tMatlab method", "contents": "break(${1:args})"} ,
		{"trigger": "brighten\tMatlab method", "contents": "brighten(${1:args})"} ,
		{"trigger": "brush\tMatlab method", "contents": "brush(${1:args})"} ,
		{"trigger": "bsxfun\tMatlab method", "contents": "bsxfun(${1:args})"} ,
		{"trigger": "builddocsearchdb\tMatlab method", "contents": "builddocsearchdb(${1:args})"} ,
		{"trigger": "builtin\tMatlab method", "contents": "builtin(${1:args})"} ,
		{"trigger": "bvp4c\tMatlab method", "contents": "bvp4c(${1:args})"} ,
		{"trigger": "bvp5c\tMatlab method", "contents": "bvp5c(${1:args})"} ,
		{"trigger": "bvpget\tMatlab method", "contents": "bvpget(${1:args})"} ,
		{"trigger": "bvpinit\tMatlab method", "contents": "bvpinit(${1:args})"} ,
		{"trigger": "bvpset\tMatlab method", "contents": "bvpset(${1:args})"} ,
		{"trigger": "bvpxtend\tMatlab method", "contents": "bvpxtend(${1:args})"} ,
		{"trigger": "caldays\tMatlab method", "contents": "caldays(${1:args})"} ,
		{"trigger": "caldiff\tMatlab method", "contents": "caldiff(${1:args})"} ,
		{"trigger": "calendar\tMatlab method", "contents": "calendar(${1:args})"} ,
		{"trigger": "calendarDuration\tMatlab method", "contents": "calendarDuration(${1:args})"} ,
		{"trigger": "callSoapService\tMatlab method", "contents": "callSoapService(${1:args})"} ,
		{"trigger": "calllib\tMatlab method", "contents": "calllib(${1:args})"} ,
		{"trigger": "calmonths\tMatlab method", "contents": "calmonths(${1:args})"} ,
		{"trigger": "calquarters\tMatlab method", "contents": "calquarters(${1:args})"} ,
		{"trigger": "calweeks\tMatlab method", "contents": "calweeks(${1:args})"} ,
		{"trigger": "calyears\tMatlab method", "contents": "calyears(${1:args})"} ,
		{"trigger": "camdolly\tMatlab method", "contents": "camdolly(${1:args})"} ,
		{"trigger": "cameratoolbar\tMatlab method", "contents": "cameratoolbar(${1:args})"} ,
		{"trigger": "camlight\tMatlab method", "contents": "camlight(${1:args})"} ,
		{"trigger": "camlookat\tMatlab method", "contents": "camlookat(${1:args})"} ,
		{"trigger": "camorbit\tMatlab method", "contents": "camorbit(${1:args})"} ,
		{"trigger": "campan\tMatlab method", "contents": "campan(${1:args})"} ,
		{"trigger": "campos\tMatlab method", "contents": "campos(${1:args})"} ,
		{"trigger": "camproj\tMatlab method", "contents": "camproj(${1:args})"} ,
		{"trigger": "camroll\tMatlab method", "contents": "camroll(${1:args})"} ,
		{"trigger": "camtarget\tMatlab method", "contents": "camtarget(${1:args})"} ,
		{"trigger": "camup\tMatlab method", "contents": "camup(${1:args})"} ,
		{"trigger": "camva\tMatlab method", "contents": "camva(${1:args})"} ,
		{"trigger": "camzoom\tMatlab method", "contents": "camzoom(${1:args})"} ,
		{"trigger": "cart2pol\tMatlab method", "contents": "cart2pol(${1:args})"} ,
		{"trigger": "cart2sph\tMatlab method", "contents": "cart2sph(${1:args})"} ,
		{"trigger": "cartToBary\tMatlab method", "contents": "cartToBary(${1:args})"} ,
		{"trigger": "cartesianToBarycentric\tMatlab method", "contents": "cartesianToBarycentric(${1:args})"} ,
		{"trigger": "cast\tMatlab method", "contents": "cast(${1:args})"} ,
		{"trigger": "cat\tMatlab method", "contents": "cat(${1:args})"} ,
		{"trigger": "categorical\tMatlab method", "contents": "categorical(${1:args})"} ,
		{"trigger": "categories\tMatlab method", "contents": "categories(${1:args})"} ,
		{"trigger": "caxis\tMatlab method", "contents": "caxis(${1:args})"} ,
		{"trigger": "cd\tMatlab method", "contents": "cd(${1:args})"} ,
		{"trigger": "cdf2rdf\tMatlab method", "contents": "cdf2rdf(${1:args})"} ,
		{"trigger": "cdfepoch\tMatlab method", "contents": "cdfepoch(${1:args})"} ,
		{"trigger": "cdfinfo\tMatlab method", "contents": "cdfinfo(${1:args})"} ,
		{"trigger": "cdflib.SetVarReservePercent\tMatlab method", "contents": "cdflib.SetVarReservePercent(${1:args})"} ,
		{"trigger": "cdflib.close\tMatlab method", "contents": "cdflib.close(${1:args})"} ,
		{"trigger": "cdflib.closeVar\tMatlab method", "contents": "cdflib.closeVar(${1:args})"} ,
		{"trigger": "cdflib.computeEpoch\tMatlab method", "contents": "cdflib.computeEpoch(${1:args})"} ,
		{"trigger": "cdflib.computeEpoch16\tMatlab method", "contents": "cdflib.computeEpoch16(${1:args})"} ,
		{"trigger": "cdflib.create\tMatlab method", "contents": "cdflib.create(${1:args})"} ,
		{"trigger": "cdflib.createAttr\tMatlab method", "contents": "cdflib.createAttr(${1:args})"} ,
		{"trigger": "cdflib.createVar\tMatlab method", "contents": "cdflib.createVar(${1:args})"} ,
		{"trigger": "cdflib.delete\tMatlab method", "contents": "cdflib.delete(${1:args})"} ,
		{"trigger": "cdflib.deleteAttr\tMatlab method", "contents": "cdflib.deleteAttr(${1:args})"} ,
		{"trigger": "cdflib.deleteAttrEntry\tMatlab method", "contents": "cdflib.deleteAttrEntry(${1:args})"} ,
		{"trigger": "cdflib.deleteAttrgEntry\tMatlab method", "contents": "cdflib.deleteAttrgEntry(${1:args})"} ,
		{"trigger": "cdflib.deleteVar\tMatlab method", "contents": "cdflib.deleteVar(${1:args})"} ,
		{"trigger": "cdflib.deleteVarRecords\tMatlab method", "contents": "cdflib.deleteVarRecords(${1:args})"} ,
		{"trigger": "cdflib.epoch16Breakdown\tMatlab method", "contents": "cdflib.epoch16Breakdown(${1:args})"} ,
		{"trigger": "cdflib.epochBreakdown\tMatlab method", "contents": "cdflib.epochBreakdown(${1:args})"} ,
		{"trigger": "cdflib.getAttrEntry\tMatlab method", "contents": "cdflib.getAttrEntry(${1:args})"} ,
		{"trigger": "cdflib.getAttrMaxEntry\tMatlab method", "contents": "cdflib.getAttrMaxEntry(${1:args})"} ,
		{"trigger": "cdflib.getAttrMaxgEntry\tMatlab method", "contents": "cdflib.getAttrMaxgEntry(${1:args})"} ,
		{"trigger": "cdflib.getAttrName\tMatlab method", "contents": "cdflib.getAttrName(${1:args})"} ,
		{"trigger": "cdflib.getAttrNum\tMatlab method", "contents": "cdflib.getAttrNum(${1:args})"} ,
		{"trigger": "cdflib.getAttrScope\tMatlab method", "contents": "cdflib.getAttrScope(${1:args})"} ,
		{"trigger": "cdflib.getAttrgEntry\tMatlab method", "contents": "cdflib.getAttrgEntry(${1:args})"} ,
		{"trigger": "cdflib.getCacheSize\tMatlab method", "contents": "cdflib.getCacheSize(${1:args})"} ,
		{"trigger": "cdflib.getChecksum\tMatlab method", "contents": "cdflib.getChecksum(${1:args})"} ,
		{"trigger": "cdflib.getCompression\tMatlab method", "contents": "cdflib.getCompression(${1:args})"} ,
		{"trigger": "cdflib.getCompressionCacheSize\tMatlab method", "contents": "cdflib.getCompressionCacheSize(${1:args})"} ,
		{"trigger": "cdflib.getConstantNames\tMatlab method", "contents": "cdflib.getConstantNames(${1:args})"} ,
		{"trigger": "cdflib.getConstantValue\tMatlab method", "contents": "cdflib.getConstantValue(${1:args})"} ,
		{"trigger": "cdflib.getCopyright\tMatlab method", "contents": "cdflib.getCopyright(${1:args})"} ,
		{"trigger": "cdflib.getFileBackward\tMatlab method", "contents": "cdflib.getFileBackward(${1:args})"} ,
		{"trigger": "cdflib.getFormat\tMatlab method", "contents": "cdflib.getFormat(${1:args})"} ,
		{"trigger": "cdflib.getLibraryCopyright\tMatlab method", "contents": "cdflib.getLibraryCopyright(${1:args})"} ,
		{"trigger": "cdflib.getLibraryVersion\tMatlab method", "contents": "cdflib.getLibraryVersion(${1:args})"} ,
		{"trigger": "cdflib.getMajority\tMatlab method", "contents": "cdflib.getMajority(${1:args})"} ,
		{"trigger": "cdflib.getName\tMatlab method", "contents": "cdflib.getName(${1:args})"} ,
		{"trigger": "cdflib.getNumAttrEntries\tMatlab method", "contents": "cdflib.getNumAttrEntries(${1:args})"} ,
		{"trigger": "cdflib.getNumAttrgEntries\tMatlab method", "contents": "cdflib.getNumAttrgEntries(${1:args})"} ,
		{"trigger": "cdflib.getNumAttributes\tMatlab method", "contents": "cdflib.getNumAttributes(${1:args})"} ,
		{"trigger": "cdflib.getNumgAttributes\tMatlab method", "contents": "cdflib.getNumgAttributes(${1:args})"} ,
		{"trigger": "cdflib.getReadOnlyMode\tMatlab method", "contents": "cdflib.getReadOnlyMode(${1:args})"} ,
		{"trigger": "cdflib.getStageCacheSize\tMatlab method", "contents": "cdflib.getStageCacheSize(${1:args})"} ,
		{"trigger": "cdflib.getValidate\tMatlab method", "contents": "cdflib.getValidate(${1:args})"} ,
		{"trigger": "cdflib.getVarAllocRecords\tMatlab method", "contents": "cdflib.getVarAllocRecords(${1:args})"} ,
		{"trigger": "cdflib.getVarBlockingFactor\tMatlab method", "contents": "cdflib.getVarBlockingFactor(${1:args})"} ,
		{"trigger": "cdflib.getVarCacheSize\tMatlab method", "contents": "cdflib.getVarCacheSize(${1:args})"} ,
		{"trigger": "cdflib.getVarCompression\tMatlab method", "contents": "cdflib.getVarCompression(${1:args})"} ,
		{"trigger": "cdflib.getVarData\tMatlab method", "contents": "cdflib.getVarData(${1:args})"} ,
		{"trigger": "cdflib.getVarMaxAllocRecNum\tMatlab method", "contents": "cdflib.getVarMaxAllocRecNum(${1:args})"} ,
		{"trigger": "cdflib.getVarMaxWrittenRecNum\tMatlab method", "contents": "cdflib.getVarMaxWrittenRecNum(${1:args})"} ,
		{"trigger": "cdflib.getVarName\tMatlab method", "contents": "cdflib.getVarName(${1:args})"} ,
		{"trigger": "cdflib.getVarNum\tMatlab method", "contents": "cdflib.getVarNum(${1:args})"} ,
		{"trigger": "cdflib.getVarNumRecsWritten\tMatlab method", "contents": "cdflib.getVarNumRecsWritten(${1:args})"} ,
		{"trigger": "cdflib.getVarPadValue\tMatlab method", "contents": "cdflib.getVarPadValue(${1:args})"} ,
		{"trigger": "cdflib.getVarRecordData\tMatlab method", "contents": "cdflib.getVarRecordData(${1:args})"} ,
		{"trigger": "cdflib.getVarReservePercent\tMatlab method", "contents": "cdflib.getVarReservePercent(${1:args})"} ,
		{"trigger": "cdflib.getVarSparseRecords\tMatlab method", "contents": "cdflib.getVarSparseRecords(${1:args})"} ,
		{"trigger": "cdflib.getVarsMaxWrittenRecNum\tMatlab method", "contents": "cdflib.getVarsMaxWrittenRecNum(${1:args})"} ,
		{"trigger": "cdflib.getVersion\tMatlab method", "contents": "cdflib.getVersion(${1:args})"} ,
		{"trigger": "cdflib.hyperGetVarData\tMatlab method", "contents": "cdflib.hyperGetVarData(${1:args})"} ,
		{"trigger": "cdflib.hyperPutVarData\tMatlab method", "contents": "cdflib.hyperPutVarData(${1:args})"} ,
		{"trigger": "cdflib.inquire\tMatlab method", "contents": "cdflib.inquire(${1:args})"} ,
		{"trigger": "cdflib.inquireAttr\tMatlab method", "contents": "cdflib.inquireAttr(${1:args})"} ,
		{"trigger": "cdflib.inquireAttrEntry\tMatlab method", "contents": "cdflib.inquireAttrEntry(${1:args})"} ,
		{"trigger": "cdflib.inquireAttrgEntry\tMatlab method", "contents": "cdflib.inquireAttrgEntry(${1:args})"} ,
		{"trigger": "cdflib.inquireVar\tMatlab method", "contents": "cdflib.inquireVar(${1:args})"} ,
		{"trigger": "cdflib.open\tMatlab method", "contents": "cdflib.open(${1:args})"} ,
		{"trigger": "cdflib.putAttrEntry\tMatlab method", "contents": "cdflib.putAttrEntry(${1:args})"} ,
		{"trigger": "cdflib.putAttrgEntry\tMatlab method", "contents": "cdflib.putAttrgEntry(${1:args})"} ,
		{"trigger": "cdflib.putVarData\tMatlab method", "contents": "cdflib.putVarData(${1:args})"} ,
		{"trigger": "cdflib.putVarRecordData\tMatlab method", "contents": "cdflib.putVarRecordData(${1:args})"} ,
		{"trigger": "cdflib.renameAttr\tMatlab method", "contents": "cdflib.renameAttr(${1:args})"} ,
		{"trigger": "cdflib.renameVar\tMatlab method", "contents": "cdflib.renameVar(${1:args})"} ,
		{"trigger": "cdflib.setCacheSize\tMatlab method", "contents": "cdflib.setCacheSize(${1:args})"} ,
		{"trigger": "cdflib.setChecksum\tMatlab method", "contents": "cdflib.setChecksum(${1:args})"} ,
		{"trigger": "cdflib.setCompression\tMatlab method", "contents": "cdflib.setCompression(${1:args})"} ,
		{"trigger": "cdflib.setCompressionCacheSize\tMatlab method", "contents": "cdflib.setCompressionCacheSize(${1:args})"} ,
		{"trigger": "cdflib.setFileBackward\tMatlab method", "contents": "cdflib.setFileBackward(${1:args})"} ,
		{"trigger": "cdflib.setFormat\tMatlab method", "contents": "cdflib.setFormat(${1:args})"} ,
		{"trigger": "cdflib.setMajority\tMatlab method", "contents": "cdflib.setMajority(${1:args})"} ,
		{"trigger": "cdflib.setReadOnlyMode\tMatlab method", "contents": "cdflib.setReadOnlyMode(${1:args})"} ,
		{"trigger": "cdflib.setStageCacheSize\tMatlab method", "contents": "cdflib.setStageCacheSize(${1:args})"} ,
		{"trigger": "cdflib.setValidate\tMatlab method", "contents": "cdflib.setValidate(${1:args})"} ,
		{"trigger": "cdflib.setVarAllocBlockRecords\tMatlab method", "contents": "cdflib.setVarAllocBlockRecords(${1:args})"} ,
		{"trigger": "cdflib.setVarBlockingFactor\tMatlab method", "contents": "cdflib.setVarBlockingFactor(${1:args})"} ,
		{"trigger": "cdflib.setVarCacheSize\tMatlab method", "contents": "cdflib.setVarCacheSize(${1:args})"} ,
		{"trigger": "cdflib.setVarCompression\tMatlab method", "contents": "cdflib.setVarCompression(${1:args})"} ,
		{"trigger": "cdflib.setVarInitialRecs\tMatlab method", "contents": "cdflib.setVarInitialRecs(${1:args})"} ,
		{"trigger": "cdflib.setVarPadValue\tMatlab method", "contents": "cdflib.setVarPadValue(${1:args})"} ,
		{"trigger": "cdflib.setVarSparseRecords\tMatlab method", "contents": "cdflib.setVarSparseRecords(${1:args})"} ,
		{"trigger": "cdflib.setVarsCacheSize\tMatlab method", "contents": "cdflib.setVarsCacheSize(${1:args})"} ,
		{"trigger": "cdfread\tMatlab method", "contents": "cdfread(${1:args})"} ,
		{"trigger": "cdfwrite\tMatlab method", "contents": "cdfwrite(${1:args})"} ,
		{"trigger": "ceil\tMatlab method", "contents": "ceil(${1:args})"} ,
		{"trigger": "cell\tMatlab method", "contents": "cell(${1:args})"} ,
		{"trigger": "cell2mat\tMatlab method", "contents": "cell2mat(${1:args})"} ,
		{"trigger": "cell2struct\tMatlab method", "contents": "cell2struct(${1:args})"} ,
		{"trigger": "cell2table\tMatlab method", "contents": "cell2table(${1:args})"} ,
		{"trigger": "celldisp\tMatlab method", "contents": "celldisp(${1:args})"} ,
		{"trigger": "cellfun\tMatlab method", "contents": "cellfun(${1:args})"} ,
		{"trigger": "cellplot\tMatlab method", "contents": "cellplot(${1:args})"} ,
		{"trigger": "cellstr\tMatlab method", "contents": "cellstr(${1:args})"} ,
		{"trigger": "cgs\tMatlab method", "contents": "cgs(${1:args})"} ,
		{"trigger": "char\tMatlab method", "contents": "char(${1:args})"} ,
		{"trigger": "checkcode\tMatlab method", "contents": "checkcode(${1:args})"} ,
		{"trigger": "checkin\tMatlab method", "contents": "checkin(${1:args})"} ,
		{"trigger": "checkout\tMatlab method", "contents": "checkout(${1:args})"} ,
		{"trigger": "chol\tMatlab method", "contents": "chol(${1:args})"} ,
		{"trigger": "cholupdate\tMatlab method", "contents": "cholupdate(${1:args})"} ,
		{"trigger": "circshift\tMatlab method", "contents": "circshift(${1:args})"} ,
		{"trigger": "circumcenter\tMatlab method", "contents": "circumcenter(${1:args})"} ,
		{"trigger": "circumcenters\tMatlab method", "contents": "circumcenters(${1:args})"} ,
		{"trigger": "cla\tMatlab method", "contents": "cla(${1:args})"} ,
		{"trigger": "clabel\tMatlab method", "contents": "clabel(${1:args})"} ,
		{"trigger": "class\tMatlab method", "contents": "class(${1:args})"} ,
		{"trigger": "classdef\tMatlab method", "contents": "classdef(${1:args})"} ,
		{"trigger": "clc\tMatlab method", "contents": "clc(${1:args})"} ,
		{"trigger": "clear\tMatlab method", "contents": "clear(${1:args})"} ,
		{"trigger": "clearpoints\tMatlab method", "contents": "clearpoints(${1:args})"} ,
		{"trigger": "clearvars\tMatlab method", "contents": "clearvars(${1:args})"} ,
		{"trigger": "clf\tMatlab method", "contents": "clf(${1:args})"} ,
		{"trigger": "clipboard\tMatlab method", "contents": "clipboard(${1:args})"} ,
		{"trigger": "clock\tMatlab method", "contents": "clock(${1:args})"} ,
		{"trigger": "closeFile\tMatlab method", "contents": "closeFile(${1:args})"} ,
		{"trigger": "closereq\tMatlab method", "contents": "closereq(${1:args})"} ,
		{"trigger": "cmopts\tMatlab method", "contents": "cmopts(${1:args})"} ,
		{"trigger": "cmpermute\tMatlab method", "contents": "cmpermute(${1:args})"} ,
		{"trigger": "cmunique\tMatlab method", "contents": "cmunique(${1:args})"} ,
		{"trigger": "colamd\tMatlab method", "contents": "colamd(${1:args})"} ,
		{"trigger": "colon\tMatlab method", "contents": "colon(${1:args})"} ,
		{"trigger": "colorbar\tMatlab method", "contents": "colorbar(${1:args})"} ,
		{"trigger": "colordef\tMatlab method", "contents": "colordef(${1:args})"} ,
		{"trigger": "colormap\tMatlab method", "contents": "colormap(${1:args})"} ,
		{"trigger": "colormapeditor\tMatlab method", "contents": "colormapeditor(${1:args})"} ,
		{"trigger": "colperm\tMatlab method", "contents": "colperm(${1:args})"} ,
		{"trigger": "comet\tMatlab method", "contents": "comet(${1:args})"} ,
		{"trigger": "comet3\tMatlab method", "contents": "comet3(${1:args})"} ,
		{"trigger": "commandhistory\tMatlab method", "contents": "commandhistory(${1:args})"} ,
		{"trigger": "commandwindow\tMatlab method", "contents": "commandwindow(${1:args})"} ,
		{"trigger": "compan\tMatlab method", "contents": "compan(${1:args})"} ,
		{"trigger": "compass\tMatlab method", "contents": "compass(${1:args})"} ,
		{"trigger": "complex\tMatlab method", "contents": "complex(${1:args})"} ,
		{"trigger": "computer\tMatlab method", "contents": "computer(${1:args})"} ,
		{"trigger": "cond\tMatlab method", "contents": "cond(${1:args})"} ,
		{"trigger": "condeig\tMatlab method", "contents": "condeig(${1:args})"} ,
		{"trigger": "condest\tMatlab method", "contents": "condest(${1:args})"} ,
		{"trigger": "coneplot\tMatlab method", "contents": "coneplot(${1:args})"} ,
		{"trigger": "conj\tMatlab method", "contents": "conj(${1:args})"} ,
		{"trigger": "conncomp\tMatlab method", "contents": "conncomp(${1:args})"} ,
		{"trigger": "containers.Map\tMatlab method", "contents": "containers.Map(${1:args})"} ,
		{"trigger": "continue\tMatlab method", "contents": "continue(${1:args})"} ,
		{"trigger": "contour\tMatlab method", "contents": "contour(${1:args})"} ,
		{"trigger": "contour3\tMatlab method", "contents": "contour3(${1:args})"} ,
		{"trigger": "contourc\tMatlab method", "contents": "contourc(${1:args})"} ,
		{"trigger": "contourf\tMatlab method", "contents": "contourf(${1:args})"} ,
		{"trigger": "contourslice\tMatlab method", "contents": "contourslice(${1:args})"} ,
		{"trigger": "contrast\tMatlab method", "contents": "contrast(${1:args})"} ,
		{"trigger": "conv\tMatlab method", "contents": "conv(${1:args})"} ,
		{"trigger": "conv2\tMatlab method", "contents": "conv2(${1:args})"} ,
		{"trigger": "convexHull\tMatlab method", "contents": "convexHull(${1:args})"} ,
		{"trigger": "convhull\tMatlab method", "contents": "convhull(${1:args})"} ,
		{"trigger": "convhulln\tMatlab method", "contents": "convhulln(${1:args})"} ,
		{"trigger": "convn\tMatlab method", "contents": "convn(${1:args})"} ,
		{"trigger": "copyHDU\tMatlab method", "contents": "copyHDU(${1:args})"} ,
		{"trigger": "copyfile\tMatlab method", "contents": "copyfile(${1:args})"} ,
		{"trigger": "copyobj\tMatlab method", "contents": "copyobj(${1:args})"} ,
		{"trigger": "corrcoef\tMatlab method", "contents": "corrcoef(${1:args})"} ,
		{"trigger": "cos\tMatlab method", "contents": "cos(${1:args})"} ,
		{"trigger": "cosd\tMatlab method", "contents": "cosd(${1:args})"} ,
		{"trigger": "cosh\tMatlab method", "contents": "cosh(${1:args})"} ,
		{"trigger": "cot\tMatlab method", "contents": "cot(${1:args})"} ,
		{"trigger": "cotd\tMatlab method", "contents": "cotd(${1:args})"} ,
		{"trigger": "coth\tMatlab method", "contents": "coth(${1:args})"} ,
		{"trigger": "countcats\tMatlab method", "contents": "countcats(${1:args})"} ,
		{"trigger": "cov\tMatlab method", "contents": "cov(${1:args})"} ,
		{"trigger": "cplxpair\tMatlab method", "contents": "cplxpair(${1:args})"} ,
		{"trigger": "cputime\tMatlab method", "contents": "cputime(${1:args})"} ,
		{"trigger": "createClassFromWsdl\tMatlab method", "contents": "createClassFromWsdl(${1:args})"} ,
		{"trigger": "createFile\tMatlab method", "contents": "createFile(${1:args})"} ,
		{"trigger": "createImg\tMatlab method", "contents": "createImg(${1:args})"} ,
		{"trigger": "createSoapMessage\tMatlab method", "contents": "createSoapMessage(${1:args})"} ,
		{"trigger": "createTbl\tMatlab method", "contents": "createTbl(${1:args})"} ,
		{"trigger": "criticalAlpha\tMatlab method", "contents": "criticalAlpha(${1:args})"} ,
		{"trigger": "cross\tMatlab method", "contents": "cross(${1:args})"} ,
		{"trigger": "csc\tMatlab method", "contents": "csc(${1:args})"} ,
		{"trigger": "cscd\tMatlab method", "contents": "cscd(${1:args})"} ,
		{"trigger": "csch\tMatlab method", "contents": "csch(${1:args})"} ,
		{"trigger": "csvread\tMatlab method", "contents": "csvread(${1:args})"} ,
		{"trigger": "csvwrite\tMatlab method", "contents": "csvwrite(${1:args})"} ,
		{"trigger": "ctranspose\tMatlab method", "contents": "ctranspose(${1:args})"} ,
		{"trigger": "cummax\tMatlab method", "contents": "cummax(${1:args})"} ,
		{"trigger": "cummin\tMatlab method", "contents": "cummin(${1:args})"} ,
		{"trigger": "cumprod\tMatlab method", "contents": "cumprod(${1:args})"} ,
		{"trigger": "cumsum\tMatlab method", "contents": "cumsum(${1:args})"} ,
		{"trigger": "cumtrapz\tMatlab method", "contents": "cumtrapz(${1:args})"} ,
		{"trigger": "curl\tMatlab method", "contents": "curl(${1:args})"} ,
		{"trigger": "customverctrl\tMatlab method", "contents": "customverctrl(${1:args})"} ,
		{"trigger": "cylinder\tMatlab method", "contents": "cylinder(${1:args})"} ,
		{"trigger": "daqread\tMatlab method", "contents": "daqread(${1:args})"} ,
		{"trigger": "daspect\tMatlab method", "contents": "daspect(${1:args})"} ,
		{"trigger": "datacursormode\tMatlab method", "contents": "datacursormode(${1:args})"} ,
		{"trigger": "datastore\tMatlab method", "contents": "datastore(${1:args})"} ,
		{"trigger": "datatipinfo\tMatlab method", "contents": "datatipinfo(${1:args})"} ,
		{"trigger": "date\tMatlab method", "contents": "date(${1:args})"} ,
		{"trigger": "datenum\tMatlab method", "contents": "datenum(${1:args})"} ,
		{"trigger": "dateshift\tMatlab method", "contents": "dateshift(${1:args})"} ,
		{"trigger": "datestr\tMatlab method", "contents": "datestr(${1:args})"} ,
		{"trigger": "datetick\tMatlab method", "contents": "datetick(${1:args})"} ,
		{"trigger": "datetime\tMatlab method", "contents": "datetime(${1:args})"} ,
		{"trigger": "datevec\tMatlab method", "contents": "datevec(${1:args})"} ,
		{"trigger": "day\tMatlab method", "contents": "day(${1:args})"} ,
		{"trigger": "days\tMatlab method", "contents": "days(${1:args})"} ,
		{"trigger": "dbclear\tMatlab method", "contents": "dbclear(${1:args})"} ,
		{"trigger": "dbcont\tMatlab method", "contents": "dbcont(${1:args})"} ,
		{"trigger": "dbdown\tMatlab method", "contents": "dbdown(${1:args})"} ,
		{"trigger": "dblquad\tMatlab method", "contents": "dblquad(${1:args})"} ,
		{"trigger": "dbmex\tMatlab method", "contents": "dbmex(${1:args})"} ,
		{"trigger": "dbquit\tMatlab method", "contents": "dbquit(${1:args})"} ,
		{"trigger": "dbstack\tMatlab method", "contents": "dbstack(${1:args})"} ,
		{"trigger": "dbstatus\tMatlab method", "contents": "dbstatus(${1:args})"} ,
		{"trigger": "dbstep\tMatlab method", "contents": "dbstep(${1:args})"} ,
		{"trigger": "dbstop\tMatlab method", "contents": "dbstop(${1:args})"} ,
		{"trigger": "dbtype\tMatlab method", "contents": "dbtype(${1:args})"} ,
		{"trigger": "dbup\tMatlab method", "contents": "dbup(${1:args})"} ,
		{"trigger": "dde23\tMatlab method", "contents": "dde23(${1:args})"} ,
		{"trigger": "ddeget\tMatlab method", "contents": "ddeget(${1:args})"} ,
		{"trigger": "ddensd\tMatlab method", "contents": "ddensd(${1:args})"} ,
		{"trigger": "ddesd\tMatlab method", "contents": "ddesd(${1:args})"} ,
		{"trigger": "ddeset\tMatlab method", "contents": "ddeset(${1:args})"} ,
		{"trigger": "deal\tMatlab method", "contents": "deal(${1:args})"} ,
		{"trigger": "deblank\tMatlab method", "contents": "deblank(${1:args})"} ,
		{"trigger": "dec2base\tMatlab method", "contents": "dec2base(${1:args})"} ,
		{"trigger": "dec2bin\tMatlab method", "contents": "dec2bin(${1:args})"} ,
		{"trigger": "dec2hex\tMatlab method", "contents": "dec2hex(${1:args})"} ,
		{"trigger": "decic\tMatlab method", "contents": "decic(${1:args})"} ,
		{"trigger": "deconv\tMatlab method", "contents": "deconv(${1:args})"} ,
		{"trigger": "deg2rad\tMatlab method", "contents": "deg2rad(${1:args})"} ,
		{"trigger": "degree\tMatlab method", "contents": "degree(${1:args})"} ,
		{"trigger": "del2\tMatlab method", "contents": "del2(${1:args})"} ,
		{"trigger": "delaunay\tMatlab method", "contents": "delaunay(${1:args})"} ,
		{"trigger": "delaunayTriangulation\tMatlab method", "contents": "delaunayTriangulation(${1:args})"} ,
		{"trigger": "delaunayn\tMatlab method", "contents": "delaunayn(${1:args})"} ,
		{"trigger": "delete\tMatlab method", "contents": "delete(${1:args})"} ,
		{"trigger": "deleteCol\tMatlab method", "contents": "deleteCol(${1:args})"} ,
		{"trigger": "deleteFile\tMatlab method", "contents": "deleteFile(${1:args})"} ,
		{"trigger": "deleteHDU\tMatlab method", "contents": "deleteHDU(${1:args})"} ,
		{"trigger": "deleteKey\tMatlab method", "contents": "deleteKey(${1:args})"} ,
		{"trigger": "deleteRecord\tMatlab method", "contents": "deleteRecord(${1:args})"} ,
		{"trigger": "deleteRows\tMatlab method", "contents": "deleteRows(${1:args})"} ,
		{"trigger": "deleteproperty\tMatlab method", "contents": "deleteproperty(${1:args})"} ,
		{"trigger": "delevent\tMatlab method", "contents": "delevent(${1:args})"} ,
		{"trigger": "delsample\tMatlab method", "contents": "delsample(${1:args})"} ,
		{"trigger": "delsamplefromcollection\tMatlab method", "contents": "delsamplefromcollection(${1:args})"} ,
		{"trigger": "demo\tMatlab method", "contents": "demo(${1:args})"} ,
		{"trigger": "depdir\tMatlab method", "contents": "depdir(${1:args})"} ,
		{"trigger": "depfun\tMatlab method", "contents": "depfun(${1:args})"} ,
		{"trigger": "det\tMatlab method", "contents": "det(${1:args})"} ,
		{"trigger": "details\tMatlab method", "contents": "details(${1:args})"} ,
		{"trigger": "detrend\tMatlab method", "contents": "detrend(${1:args})"} ,
		{"trigger": "deval\tMatlab method", "contents": "deval(${1:args})"} ,
		{"trigger": "dfsearch\tMatlab method", "contents": "dfsearch(${1:args})"} ,
		{"trigger": "diag\tMatlab method", "contents": "diag(${1:args})"} ,
		{"trigger": "dialog\tMatlab method", "contents": "dialog(${1:args})"} ,
		{"trigger": "diary\tMatlab method", "contents": "diary(${1:args})"} ,
		{"trigger": "diff\tMatlab method", "contents": "diff(${1:args})"} ,
		{"trigger": "diffuse\tMatlab method", "contents": "diffuse(${1:args})"} ,
		{"trigger": "digraph\tMatlab method", "contents": "digraph(${1:args})"} ,
		{"trigger": "dir\tMatlab method", "contents": "dir(${1:args})"} ,
		{"trigger": "discretize\tMatlab method", "contents": "discretize(${1:args})"} ,
		{"trigger": "disp\tMatlab method", "contents": "disp(${1:args})"} ,
		{"trigger": "display\tMatlab method", "contents": "display(${1:args})"} ,
		{"trigger": "distances\tMatlab method", "contents": "distances(${1:args})"} ,
		{"trigger": "dither\tMatlab method", "contents": "dither(${1:args})"} ,
		{"trigger": "divergence\tMatlab method", "contents": "divergence(${1:args})"} ,
		{"trigger": "dlmread\tMatlab method", "contents": "dlmread(${1:args})"} ,
		{"trigger": "dlmwrite\tMatlab method", "contents": "dlmwrite(${1:args})"} ,
		{"trigger": "dmperm\tMatlab method", "contents": "dmperm(${1:args})"} ,
		{"trigger": "doc\tMatlab method", "contents": "doc(${1:args})"} ,
		{"trigger": "docsearch\tMatlab method", "contents": "docsearch(${1:args})"} ,
		{"trigger": "dos\tMatlab method", "contents": "dos(${1:args})"} ,
		{"trigger": "dot\tMatlab method", "contents": "dot(${1:args})"} ,
		{"trigger": "double\tMatlab method", "contents": "double(${1:args})"} ,
		{"trigger": "dragrect\tMatlab method", "contents": "dragrect(${1:args})"} ,
		{"trigger": "drawnow\tMatlab method", "contents": "drawnow(${1:args})"} ,
		{"trigger": "dsearchn\tMatlab method", "contents": "dsearchn(${1:args})"} ,
		{"trigger": "duration\tMatlab method", "contents": "duration(${1:args})"} ,
		{"trigger": "dynamicprops\tMatlab method", "contents": "dynamicprops(${1:args})"} ,
		{"trigger": "echo\tMatlab method", "contents": "echo(${1:args})"} ,
		{"trigger": "echodemo\tMatlab method", "contents": "echodemo(${1:args})"} ,
		{"trigger": "edgeAttachments\tMatlab method", "contents": "edgeAttachments(${1:args})"} ,
		{"trigger": "edges\tMatlab method", "contents": "edges(${1:args})"} ,
		{"trigger": "edit\tMatlab method", "contents": "edit(${1:args})"} ,
		{"trigger": "eig\tMatlab method", "contents": "eig(${1:args})"} ,
		{"trigger": "eigs\tMatlab method", "contents": "eigs(${1:args})"} ,
		{"trigger": "ellipj\tMatlab method", "contents": "ellipj(${1:args})"} ,
		{"trigger": "ellipke\tMatlab method", "contents": "ellipke(${1:args})"} ,
		{"trigger": "ellipsoid\tMatlab method", "contents": "ellipsoid(${1:args})"} ,
		{"trigger": "empty\tMatlab method", "contents": "empty(${1:args})"} ,
		{"trigger": "enableNETfromNetworkDrive\tMatlab method", "contents": "enableNETfromNetworkDrive(${1:args})"} ,
		{"trigger": "enableservice\tMatlab method", "contents": "enableservice(${1:args})"} ,
		{"trigger": "end\tMatlab method", "contents": "end"} ,
		{"trigger": "eomday\tMatlab method", "contents": "eomday(${1:args})"} ,
		{"trigger": "eps\tMatlab method", "contents": "eps(${1:args})"} ,
		{"trigger": "eq\tMatlab method", "contents": "eq(${1:args})"} ,
		{"trigger": "erf\tMatlab method", "contents": "erf(${1:args})"} ,
		{"trigger": "erfc\tMatlab method", "contents": "erfc(${1:args})"} ,
		{"trigger": "erfcinv\tMatlab method", "contents": "erfcinv(${1:args})"} ,
		{"trigger": "erfcx\tMatlab method", "contents": "erfcx(${1:args})"} ,
		{"trigger": "erfinv\tMatlab method", "contents": "erfinv(${1:args})"} ,
		{"trigger": "error\tMatlab method", "contents": "error(${1:args})"} ,
		{"trigger": "errorbar\tMatlab method", "contents": "errorbar(${1:args})"} ,
		{"trigger": "errordlg\tMatlab method", "contents": "errordlg(${1:args})"} ,
		{"trigger": "etime\tMatlab method", "contents": "etime(${1:args})"} ,
		{"trigger": "etree\tMatlab method", "contents": "etree(${1:args})"} ,
		{"trigger": "etreeplot\tMatlab method", "contents": "etreeplot(${1:args})"} ,
		{"trigger": "eval\tMatlab method", "contents": "eval(${1:args})"} ,
		{"trigger": "evalc\tMatlab method", "contents": "evalc(${1:args})"} ,
		{"trigger": "evalin\tMatlab method", "contents": "evalin(${1:args})"} ,
		{"trigger": "event.EventData\tMatlab method", "contents": "event.EventData(${1:args})"} ,
		{"trigger": "event.PropertyEvent\tMatlab method", "contents": "event.PropertyEvent(${1:args})"} ,
		{"trigger": "event.listener\tMatlab method", "contents": "event.listener(${1:args})"} ,
		{"trigger": "event.proplistener\tMatlab method", "contents": "event.proplistener(${1:args})"} ,
		{"trigger": "eventlisteners\tMatlab method", "contents": "eventlisteners(${1:args})"} ,
		{"trigger": "events\tMatlab method", "contents": "events(${1:args})"} ,
		{"trigger": "exceltime\tMatlab method", "contents": "exceltime(${1:args})"} ,
		{"trigger": "exifread\tMatlab method", "contents": "exifread(${1:args})"} ,
		{"trigger": "exist\tMatlab method", "contents": "exist(${1:args})"} ,
		{"trigger": "exit\tMatlab method", "contents": "exit(${1:args})"} ,
		{"trigger": "exp\tMatlab method", "contents": "exp(${1:args})"} ,
		{"trigger": "expint\tMatlab method", "contents": "expint(${1:args})"} ,
		{"trigger": "expm\tMatlab method", "contents": "expm(${1:args})"} ,
		{"trigger": "expm1\tMatlab method", "contents": "expm1(${1:args})"} ,
		{"trigger": "export2wsdlg\tMatlab method", "contents": "export2wsdlg(${1:args})"} ,
		{"trigger": "exportsetupdlg\tMatlab method", "contents": "exportsetupdlg(${1:args})"} ,
		{"trigger": "eye\tMatlab method", "contents": "eye(${1:args})"} ,
		{"trigger": "ezcontour\tMatlab method", "contents": "ezcontour(${1:args})"} ,
		{"trigger": "ezcontourf\tMatlab method", "contents": "ezcontourf(${1:args})"} ,
		{"trigger": "ezmesh\tMatlab method", "contents": "ezmesh(${1:args})"} ,
		{"trigger": "ezmeshc\tMatlab method", "contents": "ezmeshc(${1:args})"} ,
		{"trigger": "ezplot\tMatlab method", "contents": "ezplot(${1:args})"} ,
		{"trigger": "ezplot3\tMatlab method", "contents": "ezplot3(${1:args})"} ,
		{"trigger": "ezpolar\tMatlab method", "contents": "ezpolar(${1:args})"} ,
		{"trigger": "ezsurf\tMatlab method", "contents": "ezsurf(${1:args})"} ,
		{"trigger": "ezsurfc\tMatlab method", "contents": "ezsurfc(${1:args})"} ,
		{"trigger": "faceNormal\tMatlab method", "contents": "faceNormal(${1:args})"} ,
		{"trigger": "faceNormals\tMatlab method", "contents": "faceNormals(${1:args})"} ,
		{"trigger": "factor\tMatlab method", "contents": "factor(${1:args})"} ,
		{"trigger": "factorial\tMatlab method", "contents": "factorial(${1:args})"} ,
		{"trigger": "false\tMatlab method", "contents": "false(${1:args})"} ,
		{"trigger": "fclose\tMatlab method", "contents": "fclose(${1:args})"} ,
		{"trigger": "feather\tMatlab method", "contents": "feather(${1:args})"} ,
		{"trigger": "featureEdges\tMatlab method", "contents": "featureEdges(${1:args})"} ,
		{"trigger": "feof\tMatlab method", "contents": "feof(${1:args})"} ,
		{"trigger": "ferror\tMatlab method", "contents": "ferror(${1:args})"} ,
		{"trigger": "feval\tMatlab method", "contents": "feval(${1:args})"} ,
		{"trigger": "fewerbins\tMatlab method", "contents": "fewerbins(${1:args})"} ,
		{"trigger": "fft\tMatlab method", "contents": "fft(${1:args})"} ,
		{"trigger": "fft2\tMatlab method", "contents": "fft2(${1:args})"} ,
		{"trigger": "fftn\tMatlab method", "contents": "fftn(${1:args})"} ,
		{"trigger": "fftshift\tMatlab method", "contents": "fftshift(${1:args})"} ,
		{"trigger": "fftw\tMatlab method", "contents": "fftw(${1:args})"} ,
		{"trigger": "fgetl\tMatlab method", "contents": "fgetl(${1:args})"} ,
		{"trigger": "fgets\tMatlab method", "contents": "fgets(${1:args})"} ,
		{"trigger": "fieldnames\tMatlab method", "contents": "fieldnames(${1:args})"} ,
		{"trigger": "figure\tMatlab method", "contents": "figure(${1:args})"} ,
		{"trigger": "figurepalette\tMatlab method", "contents": "figurepalette(${1:args})"} ,
		{"trigger": "fileMode\tMatlab method", "contents": "fileMode(${1:args})"} ,
		{"trigger": "fileName\tMatlab method", "contents": "fileName(${1:args})"} ,
		{"trigger": "fileattrib\tMatlab method", "contents": "fileattrib(${1:args})"} ,
		{"trigger": "filebrowser\tMatlab method", "contents": "filebrowser(${1:args})"} ,
		{"trigger": "filemarker\tMatlab method", "contents": "filemarker(${1:args})"} ,
		{"trigger": "fileparts\tMatlab method", "contents": "fileparts(${1:args})"} ,
		{"trigger": "fileread\tMatlab method", "contents": "fileread(${1:args})"} ,
		{"trigger": "filesep\tMatlab method", "contents": "filesep(${1:args})"} ,
		{"trigger": "fill\tMatlab method", "contents": "fill(${1:args})"} ,
		{"trigger": "fill3\tMatlab method", "contents": "fill3(${1:args})"} ,
		{"trigger": "filter\tMatlab method", "contents": "filter(${1:args})"} ,
		{"trigger": "filter2\tMatlab method", "contents": "filter2(${1:args})"} ,
		{"trigger": "findall\tMatlab method", "contents": "findall(${1:args})"} ,
		{"trigger": "findedge\tMatlab method", "contents": "findedge(${1:args})"} ,
		{"trigger": "findfigs\tMatlab method", "contents": "findfigs(${1:args})"} ,
		{"trigger": "findgroups\tMatlab method", "contents": "findgroups(${1:args})"} ,
		{"trigger": "findnode\tMatlab method", "contents": "findnode(${1:args})"} ,
		{"trigger": "findobj\tMatlab method", "contents": "findobj(${1:args})"} ,
		{"trigger": "findstr\tMatlab method", "contents": "findstr(${1:args})"} ,
		{"trigger": "finish\tMatlab method", "contents": "finish(${1:args})"} ,
		{"trigger": "fitsdisp\tMatlab method", "contents": "fitsdisp(${1:args})"} ,
		{"trigger": "fitsinfo\tMatlab method", "contents": "fitsinfo(${1:args})"} ,
		{"trigger": "fitsread\tMatlab method", "contents": "fitsread(${1:args})"} ,
		{"trigger": "fitswrite\tMatlab method", "contents": "fitswrite(${1:args})"} ,
		{"trigger": "fix\tMatlab method", "contents": "fix(${1:args})"} ,
		{"trigger": "flintmax\tMatlab method", "contents": "flintmax(${1:args})"} ,
		{"trigger": "flip\tMatlab method", "contents": "flip(${1:args})"} ,
		{"trigger": "flipdim\tMatlab method", "contents": "flipdim(${1:args})"} ,
		{"trigger": "fliplr\tMatlab method", "contents": "fliplr(${1:args})"} ,
		{"trigger": "flipud\tMatlab method", "contents": "flipud(${1:args})"} ,
		{"trigger": "floor\tMatlab method", "contents": "floor(${1:args})"} ,
		{"trigger": "flow\tMatlab method", "contents": "flow(${1:args})"} ,
		{"trigger": "fminbnd\tMatlab method", "contents": "fminbnd(${1:args})"} ,
		{"trigger": "fminsearch\tMatlab method", "contents": "fminsearch(${1:args})"} ,
		{"trigger": "fopen\tMatlab method", "contents": "fopen(${1:args})"} ,
		{"trigger": "for\tMatlab method", "contents": "for(${1:args})"} ,
		{"trigger": "format\tMatlab method", "contents": "format(${1:args})"} ,
		{"trigger": "fplot\tMatlab method", "contents": "fplot(${1:args})"} ,
		{"trigger": "fprintf\tMatlab method", "contents": "fprintf(${1:args})"} ,
		{"trigger": "frame2im\tMatlab method", "contents": "frame2im(${1:args})"} ,
		{"trigger": "fread\tMatlab method", "contents": "fread(${1:args})"} ,
		{"trigger": "freeBoundary\tMatlab method", "contents": "freeBoundary(${1:args})"} ,
		{"trigger": "freqspace\tMatlab method", "contents": "freqspace(${1:args})"} ,
		{"trigger": "frewind\tMatlab method", "contents": "frewind(${1:args})"} ,
		{"trigger": "fscanf\tMatlab method", "contents": "fscanf(${1:args})"} ,
		{"trigger": "fseek\tMatlab method", "contents": "fseek(${1:args})"} ,
		{"trigger": "ftell\tMatlab method", "contents": "ftell(${1:args})"} ,
		{"trigger": "ftp\tMatlab method", "contents": "ftp(${1:args})"} ,
		{"trigger": "full\tMatlab method", "contents": "full(${1:args})"} ,
		{"trigger": "fullfile\tMatlab method", "contents": "fullfile(${1:args})"} ,
		{"trigger": "func2str\tMatlab method", "contents": "func2str(${1:args})"} ,
		{"trigger": "function\tMatlab method", "contents": "function(${1:args})"} ,
		{"trigger": "functions\tMatlab method", "contents": "functions(${1:args})"} ,
		{"trigger": "functiontests\tMatlab method", "contents": "functiontests(${1:args})"} ,
		{"trigger": "funm\tMatlab method", "contents": "funm(${1:args})"} ,
		{"trigger": "fwrite\tMatlab method", "contents": "fwrite(${1:args})"} ,
		{"trigger": "fzero\tMatlab method", "contents": "fzero(${1:args})"} ,
		{"trigger": "gallery\tMatlab method", "contents": "gallery(${1:args})"} ,
		{"trigger": "gamma\tMatlab method", "contents": "gamma(${1:args})"} ,
		{"trigger": "gammainc\tMatlab method", "contents": "gammainc(${1:args})"} ,
		{"trigger": "gammaincinv\tMatlab method", "contents": "gammaincinv(${1:args})"} ,
		{"trigger": "gammaln\tMatlab method", "contents": "gammaln(${1:args})"} ,
		{"trigger": "gca\tMatlab method", "contents": "gca(${1:args})"} ,
		{"trigger": "gcbf\tMatlab method", "contents": "gcbf(${1:args})"} ,
		{"trigger": "gcbo\tMatlab method", "contents": "gcbo(${1:args})"} ,
		{"trigger": "gcd\tMatlab method", "contents": "gcd(${1:args})"} ,
		{"trigger": "gcf\tMatlab method", "contents": "gcf(${1:args})"} ,
		{"trigger": "gcmr\tMatlab method", "contents": "gcmr(${1:args})"} ,
		{"trigger": "gco\tMatlab method", "contents": "gco(${1:args})"} ,
		{"trigger": "ge\tMatlab method", "contents": "ge(${1:args})"} ,
		{"trigger": "genpath\tMatlab method", "contents": "genpath(${1:args})"} ,
		{"trigger": "genvarname\tMatlab method", "contents": "genvarname(${1:args})"} ,
		{"trigger": "get\tMatlab method", "contents": "get(${1:args})"} ,
		{"trigger": "getAColParms\tMatlab method", "contents": "getAColParms(${1:args})"} ,
		{"trigger": "getBColParms\tMatlab method", "contents": "getBColParms(${1:args})"} ,
		{"trigger": "getColName\tMatlab method", "contents": "getColName(${1:args})"} ,
		{"trigger": "getColType\tMatlab method", "contents": "getColType(${1:args})"} ,
		{"trigger": "getConstantValue\tMatlab method", "contents": "getConstantValue(${1:args})"} ,
		{"trigger": "getEqColType\tMatlab method", "contents": "getEqColType(${1:args})"} ,
		{"trigger": "getFileFormats\tMatlab method", "contents": "getFileFormats(${1:args})"} ,
		{"trigger": "getHDUnum\tMatlab method", "contents": "getHDUnum(${1:args})"} ,
		{"trigger": "getHDUtype\tMatlab method", "contents": "getHDUtype(${1:args})"} ,
		{"trigger": "getHdrSpace\tMatlab method", "contents": "getHdrSpace(${1:args})"} ,
		{"trigger": "getImgSize\tMatlab method", "contents": "getImgSize(${1:args})"} ,
		{"trigger": "getImgType\tMatlab method", "contents": "getImgType(${1:args})"} ,
		{"trigger": "getNumCols\tMatlab method", "contents": "getNumCols(${1:args})"} ,
		{"trigger": "getNumHDUs\tMatlab method", "contents": "getNumHDUs(${1:args})"} ,
		{"trigger": "getNumRows\tMatlab method", "contents": "getNumRows(${1:args})"} ,
		{"trigger": "getOpenFiles\tMatlab method", "contents": "getOpenFiles(${1:args})"} ,
		{"trigger": "getProfiles\tMatlab method", "contents": "getProfiles(${1:args})"} ,
		{"trigger": "getReport\tMatlab method", "contents": "getReport(${1:args})"} ,
		{"trigger": "getVersion\tMatlab method", "contents": "getVersion(${1:args})"} ,
		{"trigger": "getabstime\tMatlab method", "contents": "getabstime(${1:args})"} ,
		{"trigger": "getappdata\tMatlab method", "contents": "getappdata(${1:args})"} ,
		{"trigger": "getaudiodata\tMatlab method", "contents": "getaudiodata(${1:args})"} ,
		{"trigger": "getdatasamplesize\tMatlab method", "contents": "getdatasamplesize(${1:args})"} ,
		{"trigger": "getenv\tMatlab method", "contents": "getenv(${1:args})"} ,
		{"trigger": "getfield\tMatlab method", "contents": "getfield(${1:args})"} ,
		{"trigger": "getframe\tMatlab method", "contents": "getframe(${1:args})"} ,
		{"trigger": "getinterpmethod\tMatlab method", "contents": "getinterpmethod(${1:args})"} ,
		{"trigger": "getnext\tMatlab method", "contents": "getnext(${1:args})"} ,
		{"trigger": "getpixelposition\tMatlab method", "contents": "getpixelposition(${1:args})"} ,
		{"trigger": "getpoints\tMatlab method", "contents": "getpoints(${1:args})"} ,
		{"trigger": "getpref\tMatlab method", "contents": "getpref(${1:args})"} ,
		{"trigger": "getqualitydesc\tMatlab method", "contents": "getqualitydesc(${1:args})"} ,
		{"trigger": "getsamples\tMatlab method", "contents": "getsamples(${1:args})"} ,
		{"trigger": "getsampleusingtime\tMatlab method", "contents": "getsampleusingtime(${1:args})"} ,
		{"trigger": "gettimeseriesnames\tMatlab method", "contents": "gettimeseriesnames(${1:args})"} ,
		{"trigger": "gettsafteratevent\tMatlab method", "contents": "gettsafteratevent(${1:args})"} ,
		{"trigger": "gettsafterevent\tMatlab method", "contents": "gettsafterevent(${1:args})"} ,
		{"trigger": "gettsatevent\tMatlab method", "contents": "gettsatevent(${1:args})"} ,
		{"trigger": "gettsbeforeatevent\tMatlab method", "contents": "gettsbeforeatevent(${1:args})"} ,
		{"trigger": "gettsbeforeevent\tMatlab method", "contents": "gettsbeforeevent(${1:args})"} ,
		{"trigger": "gettsbetweenevents\tMatlab method", "contents": "gettsbetweenevents(${1:args})"} ,
		{"trigger": "ginput\tMatlab method", "contents": "ginput(${1:args})"} ,
		{"trigger": "global\tMatlab method", "contents": "global(${1:args})"} ,
		{"trigger": "gmres\tMatlab method", "contents": "gmres(${1:args})"} ,
		{"trigger": "gobjects\tMatlab method", "contents": "gobjects(${1:args})"} ,
		{"trigger": "gplot\tMatlab method", "contents": "gplot(${1:args})"} ,
		{"trigger": "grabcode\tMatlab method", "contents": "grabcode(${1:args})"} ,
		{"trigger": "gradient\tMatlab method", "contents": "gradient(${1:args})"} ,
		{"trigger": "graph\tMatlab method", "contents": "graph(${1:args})"} ,
		{"trigger": "graymon\tMatlab method", "contents": "graymon(${1:args})"} ,
		{"trigger": "grid\tMatlab method", "contents": "grid(${1:args})"} ,
		{"trigger": "griddata\tMatlab method", "contents": "griddata(${1:args})"} ,
		{"trigger": "griddatan\tMatlab method", "contents": "griddatan(${1:args})"} ,
		{"trigger": "griddedInterpolant\tMatlab method", "contents": "griddedInterpolant(${1:args})"} ,
		{"trigger": "groot\tMatlab method", "contents": "groot(${1:args})"} ,
		{"trigger": "gsvd\tMatlab method", "contents": "gsvd(${1:args})"} ,
		{"trigger": "gt\tMatlab method", "contents": "gt(${1:args})"} ,
		{"trigger": "gtext\tMatlab method", "contents": "gtext(${1:args})"} ,
		{"trigger": "guidata\tMatlab method", "contents": "guidata(${1:args})"} ,
		{"trigger": "guide\tMatlab method", "contents": "guide(${1:args})"} ,
		{"trigger": "guihandles\tMatlab method", "contents": "guihandles(${1:args})"} ,
		{"trigger": "gunzip\tMatlab method", "contents": "gunzip(${1:args})"} ,
		{"trigger": "gzip\tMatlab method", "contents": "gzip(${1:args})"} ,
		{"trigger": "h5create\tMatlab method", "contents": "h5create(${1:args})"} ,
		{"trigger": "h5disp\tMatlab method", "contents": "h5disp(${1:args})"} ,
		{"trigger": "h5info\tMatlab method", "contents": "h5info(${1:args})"} ,
		{"trigger": "h5read\tMatlab method", "contents": "h5read(${1:args})"} ,
		{"trigger": "h5readatt\tMatlab method", "contents": "h5readatt(${1:args})"} ,
		{"trigger": "h5write\tMatlab method", "contents": "h5write(${1:args})"} ,
		{"trigger": "h5writeatt\tMatlab method", "contents": "h5writeatt(${1:args})"} ,
		{"trigger": "hadamard\tMatlab method", "contents": "hadamard(${1:args})"} ,
		{"trigger": "handle\tMatlab method", "contents": "handle(${1:args})"} ,
		{"trigger": "handle.notify\tMatlab method", "contents": "handle.notify(${1:args})"} ,
		{"trigger": "hankel\tMatlab method", "contents": "hankel(${1:args})"} ,
		{"trigger": "hasFrame\tMatlab method", "contents": "hasFrame(${1:args})"} ,
		{"trigger": "hasdata\tMatlab method", "contents": "hasdata(${1:args})"} ,
		{"trigger": "hasnext\tMatlab method", "contents": "hasnext(${1:args})"} ,
		{"trigger": "hdf5info\tMatlab method", "contents": "hdf5info(${1:args})"} ,
		{"trigger": "hdf5read\tMatlab method", "contents": "hdf5read(${1:args})"} ,
		{"trigger": "hdf5write\tMatlab method", "contents": "hdf5write(${1:args})"} ,
		{"trigger": "hdfan\tMatlab method", "contents": "hdfan(${1:args})"} ,
		{"trigger": "hdfdf24\tMatlab method", "contents": "hdfdf24(${1:args})"} ,
		{"trigger": "hdfdfr8\tMatlab method", "contents": "hdfdfr8(${1:args})"} ,
		{"trigger": "hdfh\tMatlab method", "contents": "hdfh(${1:args})"} ,
		{"trigger": "hdfhd\tMatlab method", "contents": "hdfhd(${1:args})"} ,
		{"trigger": "hdfhe\tMatlab method", "contents": "hdfhe(${1:args})"} ,
		{"trigger": "hdfhx\tMatlab method", "contents": "hdfhx(${1:args})"} ,
		{"trigger": "hdfinfo\tMatlab method", "contents": "hdfinfo(${1:args})"} ,
		{"trigger": "hdfml\tMatlab method", "contents": "hdfml(${1:args})"} ,
		{"trigger": "hdfpt\tMatlab method", "contents": "hdfpt(${1:args})"} ,
		{"trigger": "hdfread\tMatlab method", "contents": "hdfread(${1:args})"} ,
		{"trigger": "hdftool\tMatlab method", "contents": "hdftool(${1:args})"} ,
		{"trigger": "hdfv\tMatlab method", "contents": "hdfv(${1:args})"} ,
		{"trigger": "hdfvf\tMatlab method", "contents": "hdfvf(${1:args})"} ,
		{"trigger": "hdfvh\tMatlab method", "contents": "hdfvh(${1:args})"} ,
		{"trigger": "hdfvs\tMatlab method", "contents": "hdfvs(${1:args})"} ,
		{"trigger": "height\tMatlab method", "contents": "height(${1:args})"} ,
		{"trigger": "help\tMatlab method", "contents": "help(${1:args})"} ,
		{"trigger": "helpbrowser\tMatlab method", "contents": "helpbrowser(${1:args})"} ,
		{"trigger": "helpdesk\tMatlab method", "contents": "helpdesk(${1:args})"} ,
		{"trigger": "helpdlg\tMatlab method", "contents": "helpdlg(${1:args})"} ,
		{"trigger": "helpwin\tMatlab method", "contents": "helpwin(${1:args})"} ,
		{"trigger": "hess\tMatlab method", "contents": "hess(${1:args})"} ,
		{"trigger": "hex2dec\tMatlab method", "contents": "hex2dec(${1:args})"} ,
		{"trigger": "hex2num\tMatlab method", "contents": "hex2num(${1:args})"} ,
		{"trigger": "hgexport\tMatlab method", "contents": "hgexport(${1:args})"} ,
		{"trigger": "hggroup\tMatlab method", "contents": "hggroup(${1:args})"} ,
		{"trigger": "hgload\tMatlab method", "contents": "hgload(${1:args})"} ,
		{"trigger": "hgsave\tMatlab method", "contents": "hgsave(${1:args})"} ,
		{"trigger": "hgtransform\tMatlab method", "contents": "hgtransform(${1:args})"} ,
		{"trigger": "hidden\tMatlab method", "contents": "hidden(${1:args})"} ,
		{"trigger": "highlight\tMatlab method", "contents": "highlight(${1:args})"} ,
		{"trigger": "hilb\tMatlab method", "contents": "hilb(${1:args})"} ,
		{"trigger": "hist\tMatlab method", "contents": "hist(${1:args})"} ,
		{"trigger": "histc\tMatlab method", "contents": "histc(${1:args})"} ,
		{"trigger": "histcounts\tMatlab method", "contents": "histcounts(${1:args})"} ,
		{"trigger": "histcounts2\tMatlab method", "contents": "histcounts2(${1:args})"} ,
		{"trigger": "histogram\tMatlab method", "contents": "histogram(${1:args})"} ,
		{"trigger": "histogram2\tMatlab method", "contents": "histogram2(${1:args})"} ,
		{"trigger": "hms\tMatlab method", "contents": "hms(${1:args})"} ,
		{"trigger": "hold\tMatlab method", "contents": "hold(${1:args})"} ,
		{"trigger": "home\tMatlab method", "contents": "home(${1:args})"} ,
		{"trigger": "horzcat\tMatlab method", "contents": "horzcat(${1:args})"} ,
		{"trigger": "hour\tMatlab method", "contents": "hour(${1:args})"} ,
		{"trigger": "hours\tMatlab method", "contents": "hours(${1:args})"} ,
		{"trigger": "hsv2rgb\tMatlab method", "contents": "hsv2rgb(${1:args})"} ,
		{"trigger": "hypot\tMatlab method", "contents": "hypot(${1:args})"} ,
		{"trigger": "i\tMatlab method", "contents": "i(${1:args})"} ,
		{"trigger": "ichol\tMatlab method", "contents": "ichol(${1:args})"} ,
		{"trigger": "idealfilter\tMatlab method", "contents": "idealfilter(${1:args})"} ,
		{"trigger": "idivide\tMatlab method", "contents": "idivide(${1:args})"} ,
		{"trigger": "ifft\tMatlab method", "contents": "ifft(${1:args})"} ,
		{"trigger": "ifft2\tMatlab method", "contents": "ifft2(${1:args})"} ,
		{"trigger": "ifftn\tMatlab method", "contents": "ifftn(${1:args})"} ,
		{"trigger": "ifftshift\tMatlab method", "contents": "ifftshift(${1:args})"} ,
		{"trigger": "ilu\tMatlab method", "contents": "ilu(${1:args})"} ,
		{"trigger": "im2double\tMatlab method", "contents": "im2double(${1:args})"} ,
		{"trigger": "im2frame\tMatlab method", "contents": "im2frame(${1:args})"} ,
		{"trigger": "im2java\tMatlab method", "contents": "im2java(${1:args})"} ,
		{"trigger": "imag\tMatlab method", "contents": "imag(${1:args})"} ,
		{"trigger": "image\tMatlab method", "contents": "image(${1:args})"} ,
		{"trigger": "imagesc\tMatlab method", "contents": "imagesc(${1:args})"} ,
		{"trigger": "imapprox\tMatlab method", "contents": "imapprox(${1:args})"} ,
		{"trigger": "imfinfo\tMatlab method", "contents": "imfinfo(${1:args})"} ,
		{"trigger": "imformats\tMatlab method", "contents": "imformats(${1:args})"} ,
		{"trigger": "imgCompress\tMatlab method", "contents": "imgCompress(${1:args})"} ,
		{"trigger": "import\tMatlab method", "contents": "import(${1:args})"} ,
		{"trigger": "importdata\tMatlab method", "contents": "importdata(${1:args})"} ,
		{"trigger": "imread\tMatlab method", "contents": "imread(${1:args})"} ,
		{"trigger": "imshow\tMatlab method", "contents": "imshow(${1:args})"} ,
		{"trigger": "imwrite\tMatlab method", "contents": "imwrite(${1:args})"} ,
		{"trigger": "inOutStatus\tMatlab method", "contents": "inOutStatus(${1:args})"} ,
		{"trigger": "inShape\tMatlab method", "contents": "inShape(${1:args})"} ,
		{"trigger": "incenter\tMatlab method", "contents": "incenter(${1:args})"} ,
		{"trigger": "incenters\tMatlab method", "contents": "incenters(${1:args})"} ,
		{"trigger": "incidence\tMatlab method", "contents": "incidence(${1:args})"} ,
		{"trigger": "ind2rgb\tMatlab method", "contents": "ind2rgb(${1:args})"} ,
		{"trigger": "ind2sub\tMatlab method", "contents": "ind2sub(${1:args})"} ,
		{"trigger": "indegree\tMatlab method", "contents": "indegree(${1:args})"} ,
		{"trigger": "inferiorto\tMatlab method", "contents": "inferiorto(${1:args})"} ,
		{"trigger": "info\tMatlab method", "contents": "info(${1:args})"} ,
		{"trigger": "inline\tMatlab method", "contents": "inline(${1:args})"} ,
		{"trigger": "inmem\tMatlab method", "contents": "inmem(${1:args})"} ,
		{"trigger": "innerjoin\tMatlab method", "contents": "innerjoin(${1:args})"} ,
		{"trigger": "inpolygon\tMatlab method", "contents": "inpolygon(${1:args})"} ,
		{"trigger": "input\tMatlab method", "contents": "input(${1:args})"} ,
		{"trigger": "inputParser\tMatlab method", "contents": "inputParser(${1:args})"} ,
		{"trigger": "inputdlg\tMatlab method", "contents": "inputdlg(${1:args})"} ,
		{"trigger": "inputname\tMatlab method", "contents": "inputname(${1:args})"} ,
		{"trigger": "insertATbl\tMatlab method", "contents": "insertATbl(${1:args})"} ,
		{"trigger": "insertBTbl\tMatlab method", "contents": "insertBTbl(${1:args})"} ,
		{"trigger": "insertCol\tMatlab method", "contents": "insertCol(${1:args})"} ,
		{"trigger": "insertImg\tMatlab method", "contents": "insertImg(${1:args})"} ,
		{"trigger": "insertRows\tMatlab method", "contents": "insertRows(${1:args})"} ,
		{"trigger": "inspect\tMatlab method", "contents": "inspect(${1:args})"} ,
		{"trigger": "instrcallback\tMatlab method", "contents": "instrcallback(${1:args})"} ,
		{"trigger": "instrfind\tMatlab method", "contents": "instrfind(${1:args})"} ,
		{"trigger": "instrfindall\tMatlab method", "contents": "instrfindall(${1:args})"} ,
		{"trigger": "int16\tMatlab method", "contents": "int16(${1:args})"} ,
		{"trigger": "int2str\tMatlab method", "contents": "int2str(${1:args})"} ,
		{"trigger": "int32\tMatlab method", "contents": "int32(${1:args})"} ,
		{"trigger": "int64\tMatlab method", "contents": "int64(${1:args})"} ,
		{"trigger": "int8\tMatlab method", "contents": "int8(${1:args})"} ,
		{"trigger": "integral\tMatlab method", "contents": "integral(${1:args})"} ,
		{"trigger": "integral2\tMatlab method", "contents": "integral2(${1:args})"} ,
		{"trigger": "integral3\tMatlab method", "contents": "integral3(${1:args})"} ,
		{"trigger": "interfaces\tMatlab method", "contents": "interfaces(${1:args})"} ,
		{"trigger": "interp1\tMatlab method", "contents": "interp1(${1:args})"} ,
		{"trigger": "interp1q\tMatlab method", "contents": "interp1q(${1:args})"} ,
		{"trigger": "interp2\tMatlab method", "contents": "interp2(${1:args})"} ,
		{"trigger": "interp3\tMatlab method", "contents": "interp3(${1:args})"} ,
		{"trigger": "interpft\tMatlab method", "contents": "interpft(${1:args})"} ,
		{"trigger": "interpn\tMatlab method", "contents": "interpn(${1:args})"} ,
		{"trigger": "interpstreamspeed\tMatlab method", "contents": "interpstreamspeed(${1:args})"} ,
		{"trigger": "intersect\tMatlab method", "contents": "intersect(${1:args})"} ,
		{"trigger": "intmax\tMatlab method", "contents": "intmax(${1:args})"} ,
		{"trigger": "intmin\tMatlab method", "contents": "intmin(${1:args})"} ,
		{"trigger": "inv\tMatlab method", "contents": "inv(${1:args})"} ,
		{"trigger": "invhilb\tMatlab method", "contents": "invhilb(${1:args})"} ,
		{"trigger": "invoke\tMatlab method", "contents": "invoke(${1:args})"} ,
		{"trigger": "ipermute\tMatlab method", "contents": "ipermute(${1:args})"} ,
		{"trigger": "iqr\tMatlab method", "contents": "iqr(${1:args})"} ,
		{"trigger": "isCompressedImg\tMatlab method", "contents": "isCompressedImg(${1:args})"} ,
		{"trigger": "isConnected\tMatlab method", "contents": "isConnected(${1:args})"} ,
		{"trigger": "isEdge\tMatlab method", "contents": "isEdge(${1:args})"} ,
		{"trigger": "isInterior\tMatlab method", "contents": "isInterior(${1:args})"} ,
		{"trigger": "isKey\tMatlab method", "contents": "isKey(${1:args})"} ,
		{"trigger": "isa\tMatlab method", "contents": "isa(${1:args})"} ,
		{"trigger": "isappdata\tMatlab method", "contents": "isappdata(${1:args})"} ,
		{"trigger": "isbanded\tMatlab method", "contents": "isbanded(${1:args})"} ,
		{"trigger": "isbetween\tMatlab method", "contents": "isbetween(${1:args})"} ,
		{"trigger": "iscalendarduration\tMatlab method", "contents": "iscalendarduration(${1:args})"} ,
		{"trigger": "iscategorical\tMatlab method", "contents": "iscategorical(${1:args})"} ,
		{"trigger": "iscategory\tMatlab method", "contents": "iscategory(${1:args})"} ,
		{"trigger": "iscell\tMatlab method", "contents": "iscell(${1:args})"} ,
		{"trigger": "iscellstr\tMatlab method", "contents": "iscellstr(${1:args})"} ,
		{"trigger": "ischar\tMatlab method", "contents": "ischar(${1:args})"} ,
		{"trigger": "iscolumn\tMatlab method", "contents": "iscolumn(${1:args})"} ,
		{"trigger": "iscom\tMatlab method", "contents": "iscom(${1:args})"} ,
		{"trigger": "isdag\tMatlab method", "contents": "isdag(${1:args})"} ,
		{"trigger": "isdatetime\tMatlab method", "contents": "isdatetime(${1:args})"} ,
		{"trigger": "isdiag\tMatlab method", "contents": "isdiag(${1:args})"} ,
		{"trigger": "isdir\tMatlab method", "contents": "isdir(${1:args})"} ,
		{"trigger": "isdst\tMatlab method", "contents": "isdst(${1:args})"} ,
		{"trigger": "isduration\tMatlab method", "contents": "isduration(${1:args})"} ,
		{"trigger": "isempty\tMatlab method", "contents": "isempty(${1:args})"} ,
		{"trigger": "isenum\tMatlab method", "contents": "isenum(${1:args})"} ,
		{"trigger": "isequal\tMatlab method", "contents": "isequal(${1:args})"} ,
		{"trigger": "isequaln\tMatlab method", "contents": "isequaln(${1:args})"} ,
		{"trigger": "isequalwithequalnans\tMatlab method", "contents": "isequalwithequalnans(${1:args})"} ,
		{"trigger": "isevent\tMatlab method", "contents": "isevent(${1:args})"} ,
		{"trigger": "isfield\tMatlab method", "contents": "isfield(${1:args})"} ,
		{"trigger": "isfinite\tMatlab method", "contents": "isfinite(${1:args})"} ,
		{"trigger": "isfloat\tMatlab method", "contents": "isfloat(${1:args})"} ,
		{"trigger": "isglobal\tMatlab method", "contents": "isglobal(${1:args})"} ,
		{"trigger": "isgraphics\tMatlab method", "contents": "isgraphics(${1:args})"} ,
		{"trigger": "ishandle\tMatlab method", "contents": "ishandle(${1:args})"} ,
		{"trigger": "ishermitian\tMatlab method", "contents": "ishermitian(${1:args})"} ,
		{"trigger": "ishghandle\tMatlab method", "contents": "ishghandle(${1:args})"} ,
		{"trigger": "ishold\tMatlab method", "contents": "ishold(${1:args})"} ,
		{"trigger": "isinf\tMatlab method", "contents": "isinf(${1:args})"} ,
		{"trigger": "isinteger\tMatlab method", "contents": "isinteger(${1:args})"} ,
		{"trigger": "isinterface\tMatlab method", "contents": "isinterface(${1:args})"} ,
		{"trigger": "isjava\tMatlab method", "contents": "isjava(${1:args})"} ,
		{"trigger": "iskeyword\tMatlab method", "contents": "iskeyword(${1:args})"} ,
		{"trigger": "isletter\tMatlab method", "contents": "isletter(${1:args})"} ,
		{"trigger": "islogical\tMatlab method", "contents": "islogical(${1:args})"} ,
		{"trigger": "ismac\tMatlab method", "contents": "ismac(${1:args})"} ,
		{"trigger": "ismatrix\tMatlab method", "contents": "ismatrix(${1:args})"} ,
		{"trigger": "ismember\tMatlab method", "contents": "ismember(${1:args})"} ,
		{"trigger": "ismembertol\tMatlab method", "contents": "ismembertol(${1:args})"} ,
		{"trigger": "ismethod\tMatlab method", "contents": "ismethod(${1:args})"} ,
		{"trigger": "ismissing\tMatlab method", "contents": "ismissing(${1:args})"} ,
		{"trigger": "isnan\tMatlab method", "contents": "isnan(${1:args})"} ,
		{"trigger": "isnat\tMatlab method", "contents": "isnat(${1:args})"} ,
		{"trigger": "isnumeric\tMatlab method", "contents": "isnumeric(${1:args})"} ,
		{"trigger": "isobject\tMatlab method", "contents": "isobject(${1:args})"} ,
		{"trigger": "isocaps\tMatlab method", "contents": "isocaps(${1:args})"} ,
		{"trigger": "isocolors\tMatlab method", "contents": "isocolors(${1:args})"} ,
		{"trigger": "isonormals\tMatlab method", "contents": "isonormals(${1:args})"} ,
		{"trigger": "isordinal\tMatlab method", "contents": "isordinal(${1:args})"} ,
		{"trigger": "isosurface\tMatlab method", "contents": "isosurface(${1:args})"} ,
		{"trigger": "ispc\tMatlab method", "contents": "ispc(${1:args})"} ,
		{"trigger": "ispref\tMatlab method", "contents": "ispref(${1:args})"} ,
		{"trigger": "isprime\tMatlab method", "contents": "isprime(${1:args})"} ,
		{"trigger": "isprop\tMatlab method", "contents": "isprop(${1:args})"} ,
		{"trigger": "isprotected\tMatlab method", "contents": "isprotected(${1:args})"} ,
		{"trigger": "isreal\tMatlab method", "contents": "isreal(${1:args})"} ,
		{"trigger": "isrow\tMatlab method", "contents": "isrow(${1:args})"} ,
		{"trigger": "isscalar\tMatlab method", "contents": "isscalar(${1:args})"} ,
		{"trigger": "issorted\tMatlab method", "contents": "issorted(${1:args})"} ,
		{"trigger": "isspace\tMatlab method", "contents": "isspace(${1:args})"} ,
		{"trigger": "issparse\tMatlab method", "contents": "issparse(${1:args})"} ,
		{"trigger": "isstr\tMatlab method", "contents": "isstr(${1:args})"} ,
		{"trigger": "isstrprop\tMatlab method", "contents": "isstrprop(${1:args})"} ,
		{"trigger": "isstruct\tMatlab method", "contents": "isstruct(${1:args})"} ,
		{"trigger": "isstudent\tMatlab method", "contents": "isstudent(${1:args})"} ,
		{"trigger": "issymmetric\tMatlab method", "contents": "issymmetric(${1:args})"} ,
		{"trigger": "istable\tMatlab method", "contents": "istable(${1:args})"} ,
		{"trigger": "istril\tMatlab method", "contents": "istril(${1:args})"} ,
		{"trigger": "istriu\tMatlab method", "contents": "istriu(${1:args})"} ,
		{"trigger": "isundefined\tMatlab method", "contents": "isundefined(${1:args})"} ,
		{"trigger": "isunix\tMatlab method", "contents": "isunix(${1:args})"} ,
		{"trigger": "isvalid\tMatlab method", "contents": "isvalid(${1:args})"} ,
		{"trigger": "isvarname\tMatlab method", "contents": "isvarname(${1:args})"} ,
		{"trigger": "isvector\tMatlab method", "contents": "isvector(${1:args})"} ,
		{"trigger": "isweekend\tMatlab method", "contents": "isweekend(${1:args})"} ,
		{"trigger": "j\tMatlab method", "contents": "j(${1:args})"} ,
		{"trigger": "javaArray\tMatlab method", "contents": "javaArray(${1:args})"} ,
		{"trigger": "javaMethod\tMatlab method", "contents": "javaMethod(${1:args})"} ,
		{"trigger": "javaMethodEDT\tMatlab method", "contents": "javaMethodEDT(${1:args})"} ,
		{"trigger": "javaObject\tMatlab method", "contents": "javaObject(${1:args})"} ,
		{"trigger": "javaObjectEDT\tMatlab method", "contents": "javaObjectEDT(${1:args})"} ,
		{"trigger": "javaaddpath\tMatlab method", "contents": "javaaddpath(${1:args})"} ,
		{"trigger": "javachk\tMatlab method", "contents": "javachk(${1:args})"} ,
		{"trigger": "javaclasspath\tMatlab method", "contents": "javaclasspath(${1:args})"} ,
		{"trigger": "javarmpath\tMatlab method", "contents": "javarmpath(${1:args})"} ,
		{"trigger": "join\tMatlab method", "contents": "join(${1:args})"} ,
		{"trigger": "juliandate\tMatlab method", "contents": "juliandate(${1:args})"} ,
		{"trigger": "keyboard\tMatlab method", "contents": "keyboard(${1:args})"} ,
		{"trigger": "keys\tMatlab method", "contents": "keys(${1:args})"} ,
		{"trigger": "kron\tMatlab method", "contents": "kron(${1:args})"} ,
		{"trigger": "labeledge\tMatlab method", "contents": "labeledge(${1:args})"} ,
		{"trigger": "labelnode\tMatlab method", "contents": "labelnode(${1:args})"} ,
		{"trigger": "laplacian\tMatlab method", "contents": "laplacian(${1:args})"} ,
		{"trigger": "last\tMatlab method", "contents": "last(${1:args})"} ,
		{"trigger": "lasterr\tMatlab method", "contents": "lasterr(${1:args})"} ,
		{"trigger": "lasterror\tMatlab method", "contents": "lasterror(${1:args})"} ,
		{"trigger": "lastwarn\tMatlab method", "contents": "lastwarn(${1:args})"} ,
		{"trigger": "layout\tMatlab method", "contents": "layout(${1:args})"} ,
		{"trigger": "lcm\tMatlab method", "contents": "lcm(${1:args})"} ,
		{"trigger": "ldivide\tMatlab method", "contents": "ldivide(${1:args})"} ,
		{"trigger": "ldl\tMatlab method", "contents": "ldl(${1:args})"} ,
		{"trigger": "le\tMatlab method", "contents": "le(${1:args})"} ,
		{"trigger": "legend\tMatlab method", "contents": "legend(${1:args})"} ,
		{"trigger": "legendre\tMatlab method", "contents": "legendre(${1:args})"} ,
		{"trigger": "length\tMatlab method", "contents": "length(${1:args})"} ,
		{"trigger": "lib.pointer\tMatlab method", "contents": "lib.pointer(${1:args})"} ,
		{"trigger": "lib.pointer.disp\tMatlab method", "contents": "lib.pointer.disp(${1:args})"} ,
		{"trigger": "lib.pointer.isNull\tMatlab method", "contents": "lib.pointer.isNull(${1:args})"} ,
		{"trigger": "lib.pointer.plus\tMatlab method", "contents": "lib.pointer.plus(${1:args})"} ,
		{"trigger": "lib.pointer.reshape\tMatlab method", "contents": "lib.pointer.reshape(${1:args})"} ,
		{"trigger": "lib.pointer.setdatatype\tMatlab method", "contents": "lib.pointer.setdatatype(${1:args})"} ,
		{"trigger": "libfunctions\tMatlab method", "contents": "libfunctions(${1:args})"} ,
		{"trigger": "libfunctionsview\tMatlab method", "contents": "libfunctionsview(${1:args})"} ,
		{"trigger": "libisloaded\tMatlab method", "contents": "libisloaded(${1:args})"} ,
		{"trigger": "libpointer\tMatlab method", "contents": "libpointer(${1:args})"} ,
		{"trigger": "libstruct\tMatlab method", "contents": "libstruct(${1:args})"} ,
		{"trigger": "license\tMatlab method", "contents": "license(${1:args})"} ,
		{"trigger": "light\tMatlab method", "contents": "light(${1:args})"} ,
		{"trigger": "lightangle\tMatlab method", "contents": "lightangle(${1:args})"} ,
		{"trigger": "lighting\tMatlab method", "contents": "lighting(${1:args})"} ,
		{"trigger": "lin2mu\tMatlab method", "contents": "lin2mu(${1:args})"} ,
		{"trigger": "line\tMatlab method", "contents": "line(${1:args})"} ,
		{"trigger": "linkaxes\tMatlab method", "contents": "linkaxes(${1:args})"} ,
		{"trigger": "linkdata\tMatlab method", "contents": "linkdata(${1:args})"} ,
		{"trigger": "linkprop\tMatlab method", "contents": "linkprop(${1:args})"} ,
		{"trigger": "linsolve\tMatlab method", "contents": "linsolve(${1:args})"} ,
		{"trigger": "linspace\tMatlab method", "contents": "linspace(${1:args})"} ,
		{"trigger": "listdlg\tMatlab method", "contents": "listdlg(${1:args})"} ,
		{"trigger": "listfonts\tMatlab method", "contents": "listfonts(${1:args})"} ,
		{"trigger": "load\tMatlab method", "contents": "load(${1:args})"} ,
		{"trigger": "loadlibrary\tMatlab method", "contents": "loadlibrary(${1:args})"} ,
		{"trigger": "loadobj\tMatlab method", "contents": "loadobj(${1:args})"} ,
		{"trigger": "localfunctions\tMatlab method", "contents": "localfunctions(${1:args})"} ,
		{"trigger": "log\tMatlab method", "contents": "log(${1:args})"} ,
		{"trigger": "log10\tMatlab method", "contents": "log10(${1:args})"} ,
		{"trigger": "log1p\tMatlab method", "contents": "log1p(${1:args})"} ,
		{"trigger": "log2\tMatlab method", "contents": "log2(${1:args})"} ,
		{"trigger": "logical\tMatlab method", "contents": "logical(${1:args})"} ,
		{"trigger": "loglog\tMatlab method", "contents": "loglog(${1:args})"} ,
		{"trigger": "logm\tMatlab method", "contents": "logm(${1:args})"} ,
		{"trigger": "logspace\tMatlab method", "contents": "logspace(${1:args})"} ,
		{"trigger": "lookfor\tMatlab method", "contents": "lookfor(${1:args})"} ,
		{"trigger": "lower\tMatlab method", "contents": "lower(${1:args})"} ,
		{"trigger": "ls\tMatlab method", "contents": "ls(${1:args})"} ,
		{"trigger": "lscov\tMatlab method", "contents": "lscov(${1:args})"} ,
		{"trigger": "lsqnonneg\tMatlab method", "contents": "lsqnonneg(${1:args})"} ,
		{"trigger": "lsqr\tMatlab method", "contents": "lsqr(${1:args})"} ,
		{"trigger": "lt\tMatlab method", "contents": "lt(${1:args})"} ,
		{"trigger": "lu\tMatlab method", "contents": "lu(${1:args})"} ,
		{"trigger": "magic\tMatlab method", "contents": "magic(${1:args})"} ,
		{"trigger": "makehgtform\tMatlab method", "contents": "makehgtform(${1:args})"} ,
		{"trigger": "mapreduce\tMatlab method", "contents": "mapreduce(${1:args})"} ,
		{"trigger": "mapreducer\tMatlab method", "contents": "mapreducer(${1:args})"} ,
		{"trigger": "mat2cell\tMatlab method", "contents": "mat2cell(${1:args})"} ,
		{"trigger": "mat2str\tMatlab method", "contents": "mat2str(${1:args})"} ,
		{"trigger": "material\tMatlab method", "contents": "material(${1:args})"} ,
		{"trigger": "matfile\tMatlab method", "contents": "matfile(${1:args})"} ,
		{"trigger": "matlab\tMatlab method", "contents": "matlab(${1:args})"} ,
		{"trigger": "matlab.apputil.create\tMatlab method", "contents": "matlab.apputil.create(${1:args})"} ,
		{"trigger": "matlab.apputil.getInstalledAppInfo\tMatlab method", "contents": "matlab.apputil.getInstalledAppInfo(${1:args})"} ,
		{"trigger": "matlab.apputil.install\tMatlab method", "contents": "matlab.apputil.install(${1:args})"} ,
		{"trigger": "matlab.apputil.package\tMatlab method", "contents": "matlab.apputil.package(${1:args})"} ,
		{"trigger": "matlab.apputil.run\tMatlab method", "contents": "matlab.apputil.run(${1:args})"} ,
		{"trigger": "matlab.apputil.uninstall\tMatlab method", "contents": "matlab.apputil.uninstall(${1:args})"} ,
		{"trigger": "matlab.codetools.requiredFilesAndProducts\tMatlab method", "contents": "matlab.codetools.requiredFilesAndProducts(${1:args})"} ,
		{"trigger": "matlab.engine.FutureResult\tMatlab method", "contents": "matlab.engine.FutureResult(${1:args})"} ,
		{"trigger": "matlab.engine.FutureResult.cancel\tMatlab method", "contents": "matlab.engine.FutureResult.cancel(${1:args})"} ,
		{"trigger": "matlab.engine.FutureResult.cancelled\tMatlab method", "contents": "matlab.engine.FutureResult.cancelled(${1:args})"} ,
		{"trigger": "matlab.engine.FutureResult.done\tMatlab method", "contents": "matlab.engine.FutureResult.done(${1:args})"} ,
		{"trigger": "matlab.engine.FutureResult.result\tMatlab method", "contents": "matlab.engine.FutureResult.result(${1:args})"} ,
		{"trigger": "matlab.engine.MatlabEngine\tMatlab method", "contents": "matlab.engine.MatlabEngine(${1:args})"} ,
		{"trigger": "matlab.engine.connect_matlab\tMatlab method", "contents": "matlab.engine.connect_matlab(${1:args})"} ,
		{"trigger": "matlab.engine.engineName\tMatlab method", "contents": "matlab.engine.engineName(${1:args})"} ,
		{"trigger": "matlab.engine.find_matlab\tMatlab method", "contents": "matlab.engine.find_matlab(${1:args})"} ,
		{"trigger": "matlab.engine.isEngineShared\tMatlab method", "contents": "matlab.engine.isEngineShared(${1:args})"} ,
		{"trigger": "matlab.engine.shareEngine\tMatlab method", "contents": "matlab.engine.shareEngine(${1:args})"} ,
		{"trigger": "matlab.engine.start_matlab\tMatlab method", "contents": "matlab.engine.start_matlab(${1:args})"} ,
		{"trigger": "matlab.exception.JavaException\tMatlab method", "contents": "matlab.exception.JavaException(${1:args})"} ,
		{"trigger": "matlab.exception.PyException\tMatlab method", "contents": "matlab.exception.PyException(${1:args})"} ,
		{"trigger": "matlab.graphics.Graphics\tMatlab method", "contents": "matlab.graphics.Graphics(${1:args})"} ,
		{"trigger": "matlab.graphics.GraphicsPlaceholder\tMatlab method", "contents": "matlab.graphics.GraphicsPlaceholder(${1:args})"} ,
		{"trigger": "matlab.io.MatFile\tMatlab method", "contents": "matlab.io.MatFile(${1:args})"} ,
		{"trigger": "matlab.io.MatFile.size\tMatlab method", "contents": "matlab.io.MatFile.size(${1:args})"} ,
		{"trigger": "matlab.io.MatFile.who\tMatlab method", "contents": "matlab.io.MatFile.who(${1:args})"} ,
		{"trigger": "matlab.io.MatFile.whos\tMatlab method", "contents": "matlab.io.MatFile.whos(${1:args})"} ,
		{"trigger": "matlab.io.hdf4.sd.attrInfo\tMatlab method", "contents": "matlab.io.hdf4.sd.attrInfo(${1:args})"} ,
		{"trigger": "matlab.io.hdf4.sd.close\tMatlab method", "contents": "matlab.io.hdf4.sd.close(${1:args})"} ,
		{"trigger": "matlab.io.hdf4.sd.create\tMatlab method", "contents": "matlab.io.hdf4.sd.create(${1:args})"} ,
		{"trigger": "matlab.io.hdf4.sd.dimInfo\tMatlab method", "contents": "matlab.io.hdf4.sd.dimInfo(${1:args})"} ,
		{"trigger": "matlab.io.hdf4.sd.endAccess\tMatlab method", "contents": "matlab.io.hdf4.sd.endAccess(${1:args})"} ,
		{"trigger": "matlab.io.hdf4.sd.fileInfo\tMatlab method", "contents": "matlab.io.hdf4.sd.fileInfo(${1:args})"} ,
		{"trigger": "matlab.io.hdf4.sd.findAttr\tMatlab method", "contents": "matlab.io.hdf4.sd.findAttr(${1:args})"} ,
		{"trigger": "matlab.io.hdf4.sd.getCal\tMatlab method", "contents": "matlab.io.hdf4.sd.getCal(${1:args})"} ,
		{"trigger": "matlab.io.hdf4.sd.getChunkInfo\tMatlab method", "contents": "matlab.io.hdf4.sd.getChunkInfo(${1:args})"} ,
		{"trigger": "matlab.io.hdf4.sd.getCompInfo\tMatlab method", "contents": "matlab.io.hdf4.sd.getCompInfo(${1:args})"} ,
		{"trigger": "matlab.io.hdf4.sd.getDataStrs\tMatlab method", "contents": "matlab.io.hdf4.sd.getDataStrs(${1:args})"} ,
		{"trigger": "matlab.io.hdf4.sd.getDimID\tMatlab method", "contents": "matlab.io.hdf4.sd.getDimID(${1:args})"} ,
		{"trigger": "matlab.io.hdf4.sd.getDimScale\tMatlab method", "contents": "matlab.io.hdf4.sd.getDimScale(${1:args})"} ,
		{"trigger": "matlab.io.hdf4.sd.getDimStrs\tMatlab method", "contents": "matlab.io.hdf4.sd.getDimStrs(${1:args})"} ,
		{"trigger": "matlab.io.hdf4.sd.getFilename\tMatlab method", "contents": "matlab.io.hdf4.sd.getFilename(${1:args})"} ,
		{"trigger": "matlab.io.hdf4.sd.getFillValue\tMatlab method", "contents": "matlab.io.hdf4.sd.getFillValue(${1:args})"} ,
		{"trigger": "matlab.io.hdf4.sd.getInfo\tMatlab method", "contents": "matlab.io.hdf4.sd.getInfo(${1:args})"} ,
		{"trigger": "matlab.io.hdf4.sd.getRange\tMatlab method", "contents": "matlab.io.hdf4.sd.getRange(${1:args})"} ,
		{"trigger": "matlab.io.hdf4.sd.idToRef\tMatlab method", "contents": "matlab.io.hdf4.sd.idToRef(${1:args})"} ,
		{"trigger": "matlab.io.hdf4.sd.idType\tMatlab method", "contents": "matlab.io.hdf4.sd.idType(${1:args})"} ,
		{"trigger": "matlab.io.hdf4.sd.isCoordVar\tMatlab method", "contents": "matlab.io.hdf4.sd.isCoordVar(${1:args})"} ,
		{"trigger": "matlab.io.hdf4.sd.isRecord\tMatlab method", "contents": "matlab.io.hdf4.sd.isRecord(${1:args})"} ,
		{"trigger": "matlab.io.hdf4.sd.nameToIndex\tMatlab method", "contents": "matlab.io.hdf4.sd.nameToIndex(${1:args})"} ,
		{"trigger": "matlab.io.hdf4.sd.nameToIndices\tMatlab method", "contents": "matlab.io.hdf4.sd.nameToIndices(${1:args})"} ,
		{"trigger": "matlab.io.hdf4.sd.readAttr\tMatlab method", "contents": "matlab.io.hdf4.sd.readAttr(${1:args})"} ,
		{"trigger": "matlab.io.hdf4.sd.readChunk\tMatlab method", "contents": "matlab.io.hdf4.sd.readChunk(${1:args})"} ,
		{"trigger": "matlab.io.hdf4.sd.readData\tMatlab method", "contents": "matlab.io.hdf4.sd.readData(${1:args})"} ,
		{"trigger": "matlab.io.hdf4.sd.refToIndex\tMatlab method", "contents": "matlab.io.hdf4.sd.refToIndex(${1:args})"} ,
		{"trigger": "matlab.io.hdf4.sd.select\tMatlab method", "contents": "matlab.io.hdf4.sd.select(${1:args})"} ,
		{"trigger": "matlab.io.hdf4.sd.setAttr\tMatlab method", "contents": "matlab.io.hdf4.sd.setAttr(${1:args})"} ,
		{"trigger": "matlab.io.hdf4.sd.setCal\tMatlab method", "contents": "matlab.io.hdf4.sd.setCal(${1:args})"} ,
		{"trigger": "matlab.io.hdf4.sd.setChunk\tMatlab method", "contents": "matlab.io.hdf4.sd.setChunk(${1:args})"} ,
		{"trigger": "matlab.io.hdf4.sd.setCompress\tMatlab method", "contents": "matlab.io.hdf4.sd.setCompress(${1:args})"} ,
		{"trigger": "matlab.io.hdf4.sd.setDataStrs\tMatlab method", "contents": "matlab.io.hdf4.sd.setDataStrs(${1:args})"} ,
		{"trigger": "matlab.io.hdf4.sd.setDimName\tMatlab method", "contents": "matlab.io.hdf4.sd.setDimName(${1:args})"} ,
		{"trigger": "matlab.io.hdf4.sd.setDimScale\tMatlab method", "contents": "matlab.io.hdf4.sd.setDimScale(${1:args})"} ,
		{"trigger": "matlab.io.hdf4.sd.setDimStrs\tMatlab method", "contents": "matlab.io.hdf4.sd.setDimStrs(${1:args})"} ,
		{"trigger": "matlab.io.hdf4.sd.setExternalFile\tMatlab method", "contents": "matlab.io.hdf4.sd.setExternalFile(${1:args})"} ,
		{"trigger": "matlab.io.hdf4.sd.setFillMode\tMatlab method", "contents": "matlab.io.hdf4.sd.setFillMode(${1:args})"} ,
		{"trigger": "matlab.io.hdf4.sd.setFillValue\tMatlab method", "contents": "matlab.io.hdf4.sd.setFillValue(${1:args})"} ,
		{"trigger": "matlab.io.hdf4.sd.setNBitDataSet\tMatlab method", "contents": "matlab.io.hdf4.sd.setNBitDataSet(${1:args})"} ,
		{"trigger": "matlab.io.hdf4.sd.setRange\tMatlab method", "contents": "matlab.io.hdf4.sd.setRange(${1:args})"} ,
		{"trigger": "matlab.io.hdf4.sd.start\tMatlab method", "contents": "matlab.io.hdf4.sd.start(${1:args})"} ,
		{"trigger": "matlab.io.hdf4.sd.writeChunk\tMatlab method", "contents": "matlab.io.hdf4.sd.writeChunk(${1:args})"} ,
		{"trigger": "matlab.io.hdf4.sd.writeData\tMatlab method", "contents": "matlab.io.hdf4.sd.writeData(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.attach\tMatlab method", "contents": "matlab.io.hdfeos.gd.attach(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.close\tMatlab method", "contents": "matlab.io.hdfeos.gd.close(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.compInfo\tMatlab method", "contents": "matlab.io.hdfeos.gd.compInfo(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.create\tMatlab method", "contents": "matlab.io.hdfeos.gd.create(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.defBoxRegion\tMatlab method", "contents": "matlab.io.hdfeos.gd.defBoxRegion(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.defComp\tMatlab method", "contents": "matlab.io.hdfeos.gd.defComp(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.defDim\tMatlab method", "contents": "matlab.io.hdfeos.gd.defDim(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.defField\tMatlab method", "contents": "matlab.io.hdfeos.gd.defField(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.defOrigin\tMatlab method", "contents": "matlab.io.hdfeos.gd.defOrigin(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.defPixReg\tMatlab method", "contents": "matlab.io.hdfeos.gd.defPixReg(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.defProj\tMatlab method", "contents": "matlab.io.hdfeos.gd.defProj(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.defTile\tMatlab method", "contents": "matlab.io.hdfeos.gd.defTile(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.defVrtRegion\tMatlab method", "contents": "matlab.io.hdfeos.gd.defVrtRegion(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.detach\tMatlab method", "contents": "matlab.io.hdfeos.gd.detach(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.dimInfo\tMatlab method", "contents": "matlab.io.hdfeos.gd.dimInfo(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.extractRegion\tMatlab method", "contents": "matlab.io.hdfeos.gd.extractRegion(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.fieldInfo\tMatlab method", "contents": "matlab.io.hdfeos.gd.fieldInfo(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.getFillValue\tMatlab method", "contents": "matlab.io.hdfeos.gd.getFillValue(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.getPixValues\tMatlab method", "contents": "matlab.io.hdfeos.gd.getPixValues(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.getPixels\tMatlab method", "contents": "matlab.io.hdfeos.gd.getPixels(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.gridInfo\tMatlab method", "contents": "matlab.io.hdfeos.gd.gridInfo(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.ij2ll\tMatlab method", "contents": "matlab.io.hdfeos.gd.ij2ll(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.inqAttrs\tMatlab method", "contents": "matlab.io.hdfeos.gd.inqAttrs(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.inqDims\tMatlab method", "contents": "matlab.io.hdfeos.gd.inqDims(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.inqFields\tMatlab method", "contents": "matlab.io.hdfeos.gd.inqFields(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.inqGrid\tMatlab method", "contents": "matlab.io.hdfeos.gd.inqGrid(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.interpolate\tMatlab method", "contents": "matlab.io.hdfeos.gd.interpolate(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.ll2ij\tMatlab method", "contents": "matlab.io.hdfeos.gd.ll2ij(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.nEntries\tMatlab method", "contents": "matlab.io.hdfeos.gd.nEntries(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.open\tMatlab method", "contents": "matlab.io.hdfeos.gd.open(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.originInfo\tMatlab method", "contents": "matlab.io.hdfeos.gd.originInfo(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.pixRegInfo\tMatlab method", "contents": "matlab.io.hdfeos.gd.pixRegInfo(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.projInfo\tMatlab method", "contents": "matlab.io.hdfeos.gd.projInfo(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.readAttr\tMatlab method", "contents": "matlab.io.hdfeos.gd.readAttr(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.readBlkSomOffset\tMatlab method", "contents": "matlab.io.hdfeos.gd.readBlkSomOffset(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.readField\tMatlab method", "contents": "matlab.io.hdfeos.gd.readField(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.readTile\tMatlab method", "contents": "matlab.io.hdfeos.gd.readTile(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.regionInfo\tMatlab method", "contents": "matlab.io.hdfeos.gd.regionInfo(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.setFillValue\tMatlab method", "contents": "matlab.io.hdfeos.gd.setFillValue(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.setTileComp\tMatlab method", "contents": "matlab.io.hdfeos.gd.setTileComp(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.sphereCodeToName\tMatlab method", "contents": "matlab.io.hdfeos.gd.sphereCodeToName(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.sphereNameToCode\tMatlab method", "contents": "matlab.io.hdfeos.gd.sphereNameToCode(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.tileInfo\tMatlab method", "contents": "matlab.io.hdfeos.gd.tileInfo(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.writeAttr\tMatlab method", "contents": "matlab.io.hdfeos.gd.writeAttr(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.writeBlkSomOffset\tMatlab method", "contents": "matlab.io.hdfeos.gd.writeBlkSomOffset(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.writeField\tMatlab method", "contents": "matlab.io.hdfeos.gd.writeField(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.gd.writeTile\tMatlab method", "contents": "matlab.io.hdfeos.gd.writeTile(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.sw.attach\tMatlab method", "contents": "matlab.io.hdfeos.sw.attach(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.sw.close\tMatlab method", "contents": "matlab.io.hdfeos.sw.close(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.sw.compInfo\tMatlab method", "contents": "matlab.io.hdfeos.sw.compInfo(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.sw.create\tMatlab method", "contents": "matlab.io.hdfeos.sw.create(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.sw.defBoxRegion\tMatlab method", "contents": "matlab.io.hdfeos.sw.defBoxRegion(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.sw.defComp\tMatlab method", "contents": "matlab.io.hdfeos.sw.defComp(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.sw.defDataField\tMatlab method", "contents": "matlab.io.hdfeos.sw.defDataField(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.sw.defDim\tMatlab method", "contents": "matlab.io.hdfeos.sw.defDim(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.sw.defDimMap\tMatlab method", "contents": "matlab.io.hdfeos.sw.defDimMap(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.sw.defGeoField\tMatlab method", "contents": "matlab.io.hdfeos.sw.defGeoField(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.sw.defTimePeriod\tMatlab method", "contents": "matlab.io.hdfeos.sw.defTimePeriod(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.sw.defVrtRegion\tMatlab method", "contents": "matlab.io.hdfeos.sw.defVrtRegion(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.sw.detach\tMatlab method", "contents": "matlab.io.hdfeos.sw.detach(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.sw.dimInfo\tMatlab method", "contents": "matlab.io.hdfeos.sw.dimInfo(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.sw.extractPeriod\tMatlab method", "contents": "matlab.io.hdfeos.sw.extractPeriod(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.sw.extractRegion\tMatlab method", "contents": "matlab.io.hdfeos.sw.extractRegion(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.sw.fieldInfo\tMatlab method", "contents": "matlab.io.hdfeos.sw.fieldInfo(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.sw.geoMapInfo\tMatlab method", "contents": "matlab.io.hdfeos.sw.geoMapInfo(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.sw.getFillValue\tMatlab method", "contents": "matlab.io.hdfeos.sw.getFillValue(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.sw.idxMapInfo\tMatlab method", "contents": "matlab.io.hdfeos.sw.idxMapInfo(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.sw.inqAttrs\tMatlab method", "contents": "matlab.io.hdfeos.sw.inqAttrs(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.sw.inqDataFields\tMatlab method", "contents": "matlab.io.hdfeos.sw.inqDataFields(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.sw.inqDims\tMatlab method", "contents": "matlab.io.hdfeos.sw.inqDims(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.sw.inqGeoFields\tMatlab method", "contents": "matlab.io.hdfeos.sw.inqGeoFields(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.sw.inqIdxMaps\tMatlab method", "contents": "matlab.io.hdfeos.sw.inqIdxMaps(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.sw.inqMaps\tMatlab method", "contents": "matlab.io.hdfeos.sw.inqMaps(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.sw.inqSwath\tMatlab method", "contents": "matlab.io.hdfeos.sw.inqSwath(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.sw.mapInfo\tMatlab method", "contents": "matlab.io.hdfeos.sw.mapInfo(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.sw.nEntries\tMatlab method", "contents": "matlab.io.hdfeos.sw.nEntries(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.sw.open\tMatlab method", "contents": "matlab.io.hdfeos.sw.open(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.sw.periodInfo\tMatlab method", "contents": "matlab.io.hdfeos.sw.periodInfo(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.sw.readAttr\tMatlab method", "contents": "matlab.io.hdfeos.sw.readAttr(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.sw.readField\tMatlab method", "contents": "matlab.io.hdfeos.sw.readField(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.sw.regionInfo\tMatlab method", "contents": "matlab.io.hdfeos.sw.regionInfo(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.sw.setFillValue\tMatlab method", "contents": "matlab.io.hdfeos.sw.setFillValue(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.sw.writeAttr\tMatlab method", "contents": "matlab.io.hdfeos.sw.writeAttr(${1:args})"} ,
		{"trigger": "matlab.io.hdfeos.sw.writeField\tMatlab method", "contents": "matlab.io.hdfeos.sw.writeField(${1:args})"} ,
		{"trigger": "matlab.lang.makeUniqueStrings\tMatlab method", "contents": "matlab.lang.makeUniqueStrings(${1:args})"} ,
		{"trigger": "matlab.lang.makeValidName\tMatlab method", "contents": "matlab.lang.makeValidName(${1:args})"} ,
		{"trigger": "matlab.mixin.Copyable\tMatlab method", "contents": "matlab.mixin.Copyable(${1:args})"} ,
		{"trigger": "matlab.mixin.CustomDisplay\tMatlab method", "contents": "matlab.mixin.CustomDisplay(${1:args})"} ,
		{"trigger": "matlab.mixin.Heterogeneous\tMatlab method", "contents": "matlab.mixin.Heterogeneous(${1:args})"} ,
		{"trigger": "matlab.mixin.SetGet\tMatlab method", "contents": "matlab.mixin.SetGet(${1:args})"} ,
		{"trigger": "matlab.mixin.util.PropertyGroup\tMatlab method", "contents": "matlab.mixin.util.PropertyGroup(${1:args})"} ,
		{"trigger": "matlab.unittest.Test\tMatlab method", "contents": "matlab.unittest.Test(${1:args})"} ,
		{"trigger": "matlab.unittest.TestResult\tMatlab method", "contents": "matlab.unittest.TestResult(${1:args})"} ,
		{"trigger": "matlab.unittest.TestRunner.run\tMatlab method", "contents": "matlab.unittest.TestRunner.run(${1:args})"} ,
		{"trigger": "matlab.unittest.TestSuite.run\tMatlab method", "contents": "matlab.unittest.TestSuite.run(${1:args})"} ,
		{"trigger": "matlab.unittest.constraints.BooleanConstraint\tMatlab method", "contents": "matlab.unittest.constraints.BooleanConstraint(${1:args})"} ,
		{"trigger": "matlab.unittest.constraints.Constraint\tMatlab method", "contents": "matlab.unittest.constraints.Constraint(${1:args})"} ,
		{"trigger": "matlab.unittest.constraints.Tolerance\tMatlab method", "contents": "matlab.unittest.constraints.Tolerance(${1:args})"} ,
		{"trigger": "matlab.unittest.diagnostics.ConstraintDiagnostic\tMatlab method", "contents": "matlab.unittest.diagnostics.ConstraintDiagnostic(${1:args})"} ,
		{"trigger": "matlab.unittest.diagnostics.Diagnostic\tMatlab method", "contents": "matlab.unittest.diagnostics.Diagnostic(${1:args})"} ,
		{"trigger": "matlab.unittest.fixtures.Fixture\tMatlab method", "contents": "matlab.unittest.fixtures.Fixture(${1:args})"} ,
		{"trigger": "matlab.unittest.plugins.OutputStream\tMatlab method", "contents": "matlab.unittest.plugins.OutputStream(${1:args})"} ,
		{"trigger": "matlab.unittest.plugins.QualifyingPlugin\tMatlab method", "contents": "matlab.unittest.plugins.QualifyingPlugin(${1:args})"} ,
		{"trigger": "matlab.unittest.plugins.TestRunnerPlugin\tMatlab method", "contents": "matlab.unittest.plugins.TestRunnerPlugin(${1:args})"} ,
		{"trigger": "matlab.wsdl.createWSDLClient\tMatlab method", "contents": "matlab.wsdl.createWSDLClient(${1:args})"} ,
		{"trigger": "matlab.wsdl.setWSDLToolPath\tMatlab method", "contents": "matlab.wsdl.setWSDLToolPath(${1:args})"} ,
		{"trigger": "matlabrc\tMatlab method", "contents": "matlabrc(${1:args})"} ,
		{"trigger": "matlabroot\tMatlab method", "contents": "matlabroot(${1:args})"} ,
		{"trigger": "matlabshared.supportpkg.checkForUpdate\tMatlab method", "contents": "matlabshared.supportpkg.checkForUpdate(${1:args})"} ,
		{"trigger": "matlabshared.supportpkg.getInstalled\tMatlab method", "contents": "matlabshared.supportpkg.getInstalled(${1:args})"} ,
		{"trigger": "max\tMatlab method", "contents": "max(${1:args})"} ,
		{"trigger": "maxNumCompThreads\tMatlab method", "contents": "maxNumCompThreads(${1:args})"} ,
		{"trigger": "maxflow\tMatlab method", "contents": "maxflow(${1:args})"} ,
		{"trigger": "mean\tMatlab method", "contents": "mean(${1:args})"} ,
		{"trigger": "median\tMatlab method", "contents": "median(${1:args})"} ,
		{"trigger": "memmapfile\tMatlab method", "contents": "memmapfile(${1:args})"} ,
		{"trigger": "memory\tMatlab method", "contents": "memory(${1:args})"} ,
		{"trigger": "menu\tMatlab method", "contents": "menu(${1:args})"} ,
		{"trigger": "mergecats\tMatlab method", "contents": "mergecats(${1:args})"} ,
		{"trigger": "mesh\tMatlab method", "contents": "mesh(${1:args})"} ,
		{"trigger": "meshc\tMatlab method", "contents": "meshc(${1:args})"} ,
		{"trigger": "meshgrid\tMatlab method", "contents": "meshgrid(${1:args})"} ,
		{"trigger": "meshz\tMatlab method", "contents": "meshz(${1:args})"} ,
		{"trigger": "meta.DynamicProperty\tMatlab method", "contents": "meta.DynamicProperty(${1:args})"} ,
		{"trigger": "meta.EnumeratedValue\tMatlab method", "contents": "meta.EnumeratedValue(${1:args})"} ,
		{"trigger": "meta.MetaData\tMatlab method", "contents": "meta.MetaData(${1:args})"} ,
		{"trigger": "meta.abstractDetails\tMatlab method", "contents": "meta.abstractDetails(${1:args})"} ,
		{"trigger": "meta.class\tMatlab method", "contents": "meta.class(${1:args})"} ,
		{"trigger": "meta.class.fromName\tMatlab method", "contents": "meta.class.fromName(${1:args})"} ,
		{"trigger": "meta.event\tMatlab method", "contents": "meta.event(${1:args})"} ,
		{"trigger": "meta.method\tMatlab method", "contents": "meta.method(${1:args})"} ,
		{"trigger": "meta.package\tMatlab method", "contents": "meta.package(${1:args})"} ,
		{"trigger": "meta.package.fromName\tMatlab method", "contents": "meta.package.fromName(${1:args})"} ,
		{"trigger": "meta.package.getAllPackages\tMatlab method", "contents": "meta.package.getAllPackages(${1:args})"} ,
		{"trigger": "meta.property\tMatlab method", "contents": "meta.property(${1:args})"} ,
		{"trigger": "metaclass\tMatlab method", "contents": "metaclass(${1:args})"} ,
		{"trigger": "methods\tMatlab method", "contents": "methods(${1:args})"} ,
		{"trigger": "methodsview\tMatlab method", "contents": "methodsview(${1:args})"} ,
		{"trigger": "mex\tMatlab method", "contents": "mex(${1:args})"} ,
		{"trigger": "mex.getCompilerConfigurations\tMatlab method", "contents": "mex.getCompilerConfigurations(${1:args})"} ,
		{"trigger": "mexext\tMatlab method", "contents": "mexext(${1:args})"} ,
		{"trigger": "mfilename\tMatlab method", "contents": "mfilename(${1:args})"} ,
		{"trigger": "milliseconds\tMatlab method", "contents": "milliseconds(${1:args})"} ,
		{"trigger": "min\tMatlab method", "contents": "min(${1:args})"} ,
		{"trigger": "minres\tMatlab method", "contents": "minres(${1:args})"} ,
		{"trigger": "minspantree\tMatlab method", "contents": "minspantree(${1:args})"} ,
		{"trigger": "minus\tMatlab method", "contents": "minus(${1:args})"} ,
		{"trigger": "minute\tMatlab method", "contents": "minute(${1:args})"} ,
		{"trigger": "minutes\tMatlab method", "contents": "minutes(${1:args})"} ,
		{"trigger": "mislocked\tMatlab method", "contents": "mislocked(${1:args})"} ,
		{"trigger": "mkdir\tMatlab method", "contents": "mkdir(${1:args})"} ,
		{"trigger": "mkpp\tMatlab method", "contents": "mkpp(${1:args})"} ,
		{"trigger": "mldivide\tMatlab method", "contents": "mldivide(${1:args})"} ,
		{"trigger": "mlint\tMatlab method", "contents": "mlint(${1:args})"} ,
		{"trigger": "mlintrpt\tMatlab method", "contents": "mlintrpt(${1:args})"} ,
		{"trigger": "mlock\tMatlab method", "contents": "mlock(${1:args})"} ,
		{"trigger": "mmfileinfo\tMatlab method", "contents": "mmfileinfo(${1:args})"} ,
		{"trigger": "mod\tMatlab method", "contents": "mod(${1:args})"} ,
		{"trigger": "mode\tMatlab method", "contents": "mode(${1:args})"} ,
		{"trigger": "month\tMatlab method", "contents": "month(${1:args})"} ,
		{"trigger": "more\tMatlab method", "contents": "more(${1:args})"} ,
		{"trigger": "morebins\tMatlab method", "contents": "morebins(${1:args})"} ,
		{"trigger": "movAbsHDU\tMatlab method", "contents": "movAbsHDU(${1:args})"} ,
		{"trigger": "movNamHDU\tMatlab method", "contents": "movNamHDU(${1:args})"} ,
		{"trigger": "movRelHDU\tMatlab method", "contents": "movRelHDU(${1:args})"} ,
		{"trigger": "move\tMatlab method", "contents": "move(${1:args})"} ,
		{"trigger": "movefile\tMatlab method", "contents": "movefile(${1:args})"} ,
		{"trigger": "movegui\tMatlab method", "contents": "movegui(${1:args})"} ,
		{"trigger": "movie\tMatlab method", "contents": "movie(${1:args})"} ,
		{"trigger": "movie2avi\tMatlab method", "contents": "movie2avi(${1:args})"} ,
		{"trigger": "mpower\tMatlab method", "contents": "mpower(${1:args})"} ,
		{"trigger": "mrdivide\tMatlab method", "contents": "mrdivide(${1:args})"} ,
		{"trigger": "msgbox\tMatlab method", "contents": "msgbox(${1:args})"} ,
		{"trigger": "mtimes\tMatlab method", "contents": "mtimes(${1:args})"} ,
		{"trigger": "mu2lin\tMatlab method", "contents": "mu2lin(${1:args})"} ,
		{"trigger": "multibandread\tMatlab method", "contents": "multibandread(${1:args})"} ,
		{"trigger": "multibandwrite\tMatlab method", "contents": "multibandwrite(${1:args})"} ,
		{"trigger": "munlock\tMatlab method", "contents": "munlock(${1:args})"} ,
		{"trigger": "namelengthmax\tMatlab method", "contents": "namelengthmax(${1:args})"} ,
		{"trigger": "nargchk\tMatlab method", "contents": "nargchk(${1:args})"} ,
		{"trigger": "nargin\tMatlab method", "contents": "nargin(${1:args})"} ,
		{"trigger": "narginchk\tMatlab method", "contents": "narginchk(${1:args})"} ,
		{"trigger": "nargout\tMatlab method", "contents": "nargout(${1:args})"} ,
		{"trigger": "nargoutchk\tMatlab method", "contents": "nargoutchk(${1:args})"} ,
		{"trigger": "native2unicode\tMatlab method", "contents": "native2unicode(${1:args})"} ,
		{"trigger": "nccreate\tMatlab method", "contents": "nccreate(${1:args})"} ,
		{"trigger": "ncdisp\tMatlab method", "contents": "ncdisp(${1:args})"} ,
		{"trigger": "nchoosek\tMatlab method", "contents": "nchoosek(${1:args})"} ,
		{"trigger": "ncinfo\tMatlab method", "contents": "ncinfo(${1:args})"} ,
		{"trigger": "ncread\tMatlab method", "contents": "ncread(${1:args})"} ,
		{"trigger": "ncreadatt\tMatlab method", "contents": "ncreadatt(${1:args})"} ,
		{"trigger": "ncwrite\tMatlab method", "contents": "ncwrite(${1:args})"} ,
		{"trigger": "ncwriteatt\tMatlab method", "contents": "ncwriteatt(${1:args})"} ,
		{"trigger": "ncwriteschema\tMatlab method", "contents": "ncwriteschema(${1:args})"} ,
		{"trigger": "ndgrid\tMatlab method", "contents": "ndgrid(${1:args})"} ,
		{"trigger": "ndims\tMatlab method", "contents": "ndims(${1:args})"} ,
		{"trigger": "ne\tMatlab method", "contents": "ne(${1:args})"} ,
		{"trigger": "nearestNeighbor\tMatlab method", "contents": "nearestNeighbor(${1:args})"} ,
		{"trigger": "neighbors\tMatlab method", "contents": "neighbors(${1:args})"} ,
		{"trigger": "netcdf.abort\tMatlab method", "contents": "netcdf.abort(${1:args})"} ,
		{"trigger": "netcdf.close\tMatlab method", "contents": "netcdf.close(${1:args})"} ,
		{"trigger": "netcdf.copyAtt\tMatlab method", "contents": "netcdf.copyAtt(${1:args})"} ,
		{"trigger": "netcdf.create\tMatlab method", "contents": "netcdf.create(${1:args})"} ,
		{"trigger": "netcdf.defDim\tMatlab method", "contents": "netcdf.defDim(${1:args})"} ,
		{"trigger": "netcdf.defGrp\tMatlab method", "contents": "netcdf.defGrp(${1:args})"} ,
		{"trigger": "netcdf.defVar\tMatlab method", "contents": "netcdf.defVar(${1:args})"} ,
		{"trigger": "netcdf.defVarChunking\tMatlab method", "contents": "netcdf.defVarChunking(${1:args})"} ,
		{"trigger": "netcdf.defVarDeflate\tMatlab method", "contents": "netcdf.defVarDeflate(${1:args})"} ,
		{"trigger": "netcdf.defVarFill\tMatlab method", "contents": "netcdf.defVarFill(${1:args})"} ,
		{"trigger": "netcdf.defVarFletcher32\tMatlab method", "contents": "netcdf.defVarFletcher32(${1:args})"} ,
		{"trigger": "netcdf.delAtt\tMatlab method", "contents": "netcdf.delAtt(${1:args})"} ,
		{"trigger": "netcdf.endDef\tMatlab method", "contents": "netcdf.endDef(${1:args})"} ,
		{"trigger": "netcdf.getAtt\tMatlab method", "contents": "netcdf.getAtt(${1:args})"} ,
		{"trigger": "netcdf.getChunkCache\tMatlab method", "contents": "netcdf.getChunkCache(${1:args})"} ,
		{"trigger": "netcdf.getConstant\tMatlab method", "contents": "netcdf.getConstant(${1:args})"} ,
		{"trigger": "netcdf.getConstantNames\tMatlab method", "contents": "netcdf.getConstantNames(${1:args})"} ,
		{"trigger": "netcdf.getVar\tMatlab method", "contents": "netcdf.getVar(${1:args})"} ,
		{"trigger": "netcdf.inq\tMatlab method", "contents": "netcdf.inq(${1:args})"} ,
		{"trigger": "netcdf.inqAtt\tMatlab method", "contents": "netcdf.inqAtt(${1:args})"} ,
		{"trigger": "netcdf.inqAttID\tMatlab method", "contents": "netcdf.inqAttID(${1:args})"} ,
		{"trigger": "netcdf.inqAttName\tMatlab method", "contents": "netcdf.inqAttName(${1:args})"} ,
		{"trigger": "netcdf.inqDim\tMatlab method", "contents": "netcdf.inqDim(${1:args})"} ,
		{"trigger": "netcdf.inqDimID\tMatlab method", "contents": "netcdf.inqDimID(${1:args})"} ,
		{"trigger": "netcdf.inqDimIDs\tMatlab method", "contents": "netcdf.inqDimIDs(${1:args})"} ,
		{"trigger": "netcdf.inqFormat\tMatlab method", "contents": "netcdf.inqFormat(${1:args})"} ,
		{"trigger": "netcdf.inqGrpName\tMatlab method", "contents": "netcdf.inqGrpName(${1:args})"} ,
		{"trigger": "netcdf.inqGrpNameFull\tMatlab method", "contents": "netcdf.inqGrpNameFull(${1:args})"} ,
		{"trigger": "netcdf.inqGrpParent\tMatlab method", "contents": "netcdf.inqGrpParent(${1:args})"} ,
		{"trigger": "netcdf.inqGrps\tMatlab method", "contents": "netcdf.inqGrps(${1:args})"} ,
		{"trigger": "netcdf.inqLibVers\tMatlab method", "contents": "netcdf.inqLibVers(${1:args})"} ,
		{"trigger": "netcdf.inqNcid\tMatlab method", "contents": "netcdf.inqNcid(${1:args})"} ,
		{"trigger": "netcdf.inqUnlimDims\tMatlab method", "contents": "netcdf.inqUnlimDims(${1:args})"} ,
		{"trigger": "netcdf.inqVar\tMatlab method", "contents": "netcdf.inqVar(${1:args})"} ,
		{"trigger": "netcdf.inqVarChunking\tMatlab method", "contents": "netcdf.inqVarChunking(${1:args})"} ,
		{"trigger": "netcdf.inqVarDeflate\tMatlab method", "contents": "netcdf.inqVarDeflate(${1:args})"} ,
		{"trigger": "netcdf.inqVarFill\tMatlab method", "contents": "netcdf.inqVarFill(${1:args})"} ,
		{"trigger": "netcdf.inqVarFletcher32\tMatlab method", "contents": "netcdf.inqVarFletcher32(${1:args})"} ,
		{"trigger": "netcdf.inqVarID\tMatlab method", "contents": "netcdf.inqVarID(${1:args})"} ,
		{"trigger": "netcdf.inqVarIDs\tMatlab method", "contents": "netcdf.inqVarIDs(${1:args})"} ,
		{"trigger": "netcdf.open\tMatlab method", "contents": "netcdf.open(${1:args})"} ,
		{"trigger": "netcdf.putAtt\tMatlab method", "contents": "netcdf.putAtt(${1:args})"} ,
		{"trigger": "netcdf.putVar\tMatlab method", "contents": "netcdf.putVar(${1:args})"} ,
		{"trigger": "netcdf.reDef\tMatlab method", "contents": "netcdf.reDef(${1:args})"} ,
		{"trigger": "netcdf.renameAtt\tMatlab method", "contents": "netcdf.renameAtt(${1:args})"} ,
		{"trigger": "netcdf.renameDim\tMatlab method", "contents": "netcdf.renameDim(${1:args})"} ,
		{"trigger": "netcdf.renameVar\tMatlab method", "contents": "netcdf.renameVar(${1:args})"} ,
		{"trigger": "netcdf.setChunkCache\tMatlab method", "contents": "netcdf.setChunkCache(${1:args})"} ,
		{"trigger": "netcdf.setDefaultFormat\tMatlab method", "contents": "netcdf.setDefaultFormat(${1:args})"} ,
		{"trigger": "netcdf.setFill\tMatlab method", "contents": "netcdf.setFill(${1:args})"} ,
		{"trigger": "netcdf.sync\tMatlab method", "contents": "netcdf.sync(${1:args})"} ,
		{"trigger": "newplot\tMatlab method", "contents": "newplot(${1:args})"} ,
		{"trigger": "nextpow2\tMatlab method", "contents": "nextpow2(${1:args})"} ,
		{"trigger": "nnz\tMatlab method", "contents": "nnz(${1:args})"} ,
		{"trigger": "noanimate\tMatlab method", "contents": "noanimate(${1:args})"} ,
		{"trigger": "nonzeros\tMatlab method", "contents": "nonzeros(${1:args})"} ,
		{"trigger": "norm\tMatlab method", "contents": "norm(${1:args})"} ,
		{"trigger": "normest\tMatlab method", "contents": "normest(${1:args})"} ,
		{"trigger": "not\tMatlab method", "contents": "not(${1:args})"} ,
		{"trigger": "notebook\tMatlab method", "contents": "notebook(${1:args})"} ,
		{"trigger": "now\tMatlab method", "contents": "now(${1:args})"} ,
		{"trigger": "nthroot\tMatlab method", "contents": "nthroot(${1:args})"} ,
		{"trigger": "null\tMatlab method", "contents": "null(${1:args})"} ,
		{"trigger": "num2cell\tMatlab method", "contents": "num2cell(${1:args})"} ,
		{"trigger": "num2hex\tMatlab method", "contents": "num2hex(${1:args})"} ,
		{"trigger": "num2str\tMatlab method", "contents": "num2str(${1:args})"} ,
		{"trigger": "numArgumentsFromSubscript\tMatlab method", "contents": "numArgumentsFromSubscript(${1:args})"} ,
		{"trigger": "numRegions\tMatlab method", "contents": "numRegions(${1:args})"} ,
		{"trigger": "numedges\tMatlab method", "contents": "numedges(${1:args})"} ,
		{"trigger": "numel\tMatlab method", "contents": "numel(${1:args})"} ,
		{"trigger": "numnodes\tMatlab method", "contents": "numnodes(${1:args})"} ,
		{"trigger": "numpartitions\tMatlab method", "contents": "numpartitions(${1:args})"} ,
		{"trigger": "nzmax\tMatlab method", "contents": "nzmax(${1:args})"} ,
		{"trigger": "ode113\tMatlab method", "contents": "ode113(${1:args})"} ,
		{"trigger": "ode15i\tMatlab method", "contents": "ode15i(${1:args})"} ,
		{"trigger": "ode15s\tMatlab method", "contents": "ode15s(${1:args})"} ,
		{"trigger": "ode23\tMatlab method", "contents": "ode23(${1:args})"} ,
		{"trigger": "ode23s\tMatlab method", "contents": "ode23s(${1:args})"} ,
		{"trigger": "ode23t\tMatlab method", "contents": "ode23t(${1:args})"} ,
		{"trigger": "ode23tb\tMatlab method", "contents": "ode23tb(${1:args})"} ,
		{"trigger": "ode45\tMatlab method", "contents": "ode45(${1:args})"} ,
		{"trigger": "odeget\tMatlab method", "contents": "odeget(${1:args})"} ,
		{"trigger": "odeset\tMatlab method", "contents": "odeset(${1:args})"} ,
		{"trigger": "odextend\tMatlab method", "contents": "odextend(${1:args})"} ,
		{"trigger": "onCleanup\tMatlab method", "contents": "onCleanup(${1:args})"} ,
		{"trigger": "ones\tMatlab method", "contents": "ones(${1:args})"} ,
		{"trigger": "open\tMatlab method", "contents": "open(${1:args})"} ,
		{"trigger": "openFile\tMatlab method", "contents": "openFile(${1:args})"} ,
		{"trigger": "openfig\tMatlab method", "contents": "openfig(${1:args})"} ,
		{"trigger": "opengl\tMatlab method", "contents": "opengl(${1:args})"} ,
		{"trigger": "openvar\tMatlab method", "contents": "openvar(${1:args})"} ,
		{"trigger": "optimget\tMatlab method", "contents": "optimget(${1:args})"} ,
		{"trigger": "optimset\tMatlab method", "contents": "optimset(${1:args})"} ,
		{"trigger": "or\tMatlab method", "contents": "or(${1:args})"} ,
		{"trigger": "ordeig\tMatlab method", "contents": "ordeig(${1:args})"} ,
		{"trigger": "orderfields\tMatlab method", "contents": "orderfields(${1:args})"} ,
		{"trigger": "ordqz\tMatlab method", "contents": "ordqz(${1:args})"} ,
		{"trigger": "ordschur\tMatlab method", "contents": "ordschur(${1:args})"} ,
		{"trigger": "orth\tMatlab method", "contents": "orth(${1:args})"} ,
		{"trigger": "outdegree\tMatlab method", "contents": "outdegree(${1:args})"} ,
		{"trigger": "outerjoin\tMatlab method", "contents": "outerjoin(${1:args})"} ,
		{"trigger": "pack\tMatlab method", "contents": "pack(${1:args})"} ,
		{"trigger": "padecoef\tMatlab method", "contents": "padecoef(${1:args})"} ,
		{"trigger": "pagesetupdlg\tMatlab method", "contents": "pagesetupdlg(${1:args})"} ,
		{"trigger": "pan\tMatlab method", "contents": "pan(${1:args})"} ,
		{"trigger": "pareto\tMatlab method", "contents": "pareto(${1:args})"} ,
		{"trigger": "parfor\tMatlab method", "contents": "parfor(${1:args})"} ,
		{"trigger": "parse\tMatlab method", "contents": "parse(${1:args})"} ,
		{"trigger": "parseSoapResponse\tMatlab method", "contents": "parseSoapResponse(${1:args})"} ,
		{"trigger": "partition\tMatlab method", "contents": "partition(${1:args})"} ,
		{"trigger": "pascal\tMatlab method", "contents": "pascal(${1:args})"} ,
		{"trigger": "patch\tMatlab method", "contents": "patch(${1:args})"} ,
		{"trigger": "path\tMatlab method", "contents": "path(${1:args})"} ,
		{"trigger": "path2rc\tMatlab method", "contents": "path2rc(${1:args})"} ,
		{"trigger": "pathsep\tMatlab method", "contents": "pathsep(${1:args})"} ,
		{"trigger": "pathtool\tMatlab method", "contents": "pathtool(${1:args})"} ,
		{"trigger": "pause\tMatlab method", "contents": "pause(${1:args})"} ,
		{"trigger": "pbaspect\tMatlab method", "contents": "pbaspect(${1:args})"} ,
		{"trigger": "pcg\tMatlab method", "contents": "pcg(${1:args})"} ,
		{"trigger": "pchip\tMatlab method", "contents": "pchip(${1:args})"} ,
		{"trigger": "pcode\tMatlab method", "contents": "pcode(${1:args})"} ,
		{"trigger": "pcolor\tMatlab method", "contents": "pcolor(${1:args})"} ,
		{"trigger": "pdepe\tMatlab method", "contents": "pdepe(${1:args})"} ,
		{"trigger": "pdeval\tMatlab method", "contents": "pdeval(${1:args})"} ,
		{"trigger": "peaks\tMatlab method", "contents": "peaks(${1:args})"} ,
		{"trigger": "perimeter\tMatlab method", "contents": "perimeter(${1:args})"} ,
		{"trigger": "perl\tMatlab method", "contents": "perl(${1:args})"} ,
		{"trigger": "perms\tMatlab method", "contents": "perms(${1:args})"} ,
		{"trigger": "permute\tMatlab method", "contents": "permute(${1:args})"} ,
		{"trigger": "persistent\tMatlab method", "contents": "persistent(${1:args})"} ,
		{"trigger": "pi\tMatlab method", "contents": "pi(${1:args})"} ,
		{"trigger": "pie\tMatlab method", "contents": "pie(${1:args})"} ,
		{"trigger": "pie3\tMatlab method", "contents": "pie3(${1:args})"} ,
		{"trigger": "pinv\tMatlab method", "contents": "pinv(${1:args})"} ,
		{"trigger": "planerot\tMatlab method", "contents": "planerot(${1:args})"} ,
		{"trigger": "play\tMatlab method", "contents": "play(${1:args})"} ,
		{"trigger": "playblocking\tMatlab method", "contents": "playblocking(${1:args})"} ,
		{"trigger": "plot\tMatlab method", "contents": "plot(${1:args})"} ,
		{"trigger": "plot3\tMatlab method", "contents": "plot3(${1:args})"} ,
		{"trigger": "plotbrowser\tMatlab method", "contents": "plotbrowser(${1:args})"} ,
		{"trigger": "plotedit\tMatlab method", "contents": "plotedit(${1:args})"} ,
		{"trigger": "plotmatrix\tMatlab method", "contents": "plotmatrix(${1:args})"} ,
		{"trigger": "plottools\tMatlab method", "contents": "plottools(${1:args})"} ,
		{"trigger": "plotyy\tMatlab method", "contents": "plotyy(${1:args})"} ,
		{"trigger": "plus\tMatlab method", "contents": "plus(${1:args})"} ,
		{"trigger": "pointLocation\tMatlab method", "contents": "pointLocation(${1:args})"} ,
		{"trigger": "pol2cart\tMatlab method", "contents": "pol2cart(${1:args})"} ,
		{"trigger": "polar\tMatlab method", "contents": "polar(${1:args})"} ,
		{"trigger": "poly\tMatlab method", "contents": "poly(${1:args})"} ,
		{"trigger": "polyarea\tMatlab method", "contents": "polyarea(${1:args})"} ,
		{"trigger": "polyder\tMatlab method", "contents": "polyder(${1:args})"} ,
		{"trigger": "polyeig\tMatlab method", "contents": "polyeig(${1:args})"} ,
		{"trigger": "polyfit\tMatlab method", "contents": "polyfit(${1:args})"} ,
		{"trigger": "polyint\tMatlab method", "contents": "polyint(${1:args})"} ,
		{"trigger": "polyval\tMatlab method", "contents": "polyval(${1:args})"} ,
		{"trigger": "polyvalm\tMatlab method", "contents": "polyvalm(${1:args})"} ,
		{"trigger": "posixtime\tMatlab method", "contents": "posixtime(${1:args})"} ,
		{"trigger": "pow2\tMatlab method", "contents": "pow2(${1:args})"} ,
		{"trigger": "power\tMatlab method", "contents": "power(${1:args})"} ,
		{"trigger": "ppval\tMatlab method", "contents": "ppval(${1:args})"} ,
		{"trigger": "predecessors\tMatlab method", "contents": "predecessors(${1:args})"} ,
		{"trigger": "prefdir\tMatlab method", "contents": "prefdir(${1:args})"} ,
		{"trigger": "preferences\tMatlab method", "contents": "preferences(${1:args})"} ,
		{"trigger": "preview\tMatlab method", "contents": "preview(${1:args})"} ,
		{"trigger": "primes\tMatlab method", "contents": "primes(${1:args})"} ,
		{"trigger": "printdlg\tMatlab method", "contents": "printdlg(${1:args})"} ,
		{"trigger": "printopt\tMatlab method", "contents": "printopt(${1:args})"} ,
		{"trigger": "printpreview\tMatlab method", "contents": "printpreview(${1:args})"} ,
		{"trigger": "prod\tMatlab method", "contents": "prod(${1:args})"} ,
		{"trigger": "profile\tMatlab method", "contents": "profile(${1:args})"} ,
		{"trigger": "profsave\tMatlab method", "contents": "profsave(${1:args})"} ,
		{"trigger": "propedit\tMatlab method", "contents": "propedit(${1:args})"} ,
		{"trigger": "properties\tMatlab method", "contents": "properties(${1:args})"} ,
		{"trigger": "propertyeditor\tMatlab method", "contents": "propertyeditor(${1:args})"} ,
		{"trigger": "psi\tMatlab method", "contents": "psi(${1:args})"} ,
		{"trigger": "publish\tMatlab method", "contents": "publish(${1:args})"} ,
		{"trigger": "pwd\tMatlab method", "contents": "pwd(${1:args})"} ,
		{"trigger": "pyargs\tMatlab method", "contents": "pyargs(${1:args})"} ,
		{"trigger": "pyversion\tMatlab method", "contents": "pyversion(${1:args})"} ,
		{"trigger": "qmr\tMatlab method", "contents": "qmr(${1:args})"} ,
		{"trigger": "qr\tMatlab method", "contents": "qr(${1:args})"} ,
		{"trigger": "qrdelete\tMatlab method", "contents": "qrdelete(${1:args})"} ,
		{"trigger": "qrinsert\tMatlab method", "contents": "qrinsert(${1:args})"} ,
		{"trigger": "qrupdate\tMatlab method", "contents": "qrupdate(${1:args})"} ,
		{"trigger": "quad\tMatlab method", "contents": "quad(${1:args})"} ,
		{"trigger": "quad2d\tMatlab method", "contents": "quad2d(${1:args})"} ,
		{"trigger": "quadgk\tMatlab method", "contents": "quadgk(${1:args})"} ,
		{"trigger": "quadl\tMatlab method", "contents": "quadl(${1:args})"} ,
		{"trigger": "quadv\tMatlab method", "contents": "quadv(${1:args})"} ,
		{"trigger": "quarter\tMatlab method", "contents": "quarter(${1:args})"} ,
		{"trigger": "questdlg\tMatlab method", "contents": "questdlg(${1:args})"} ,
		{"trigger": "quit\tMatlab method", "contents": "quit(${1:args})"} ,
		{"trigger": "quiver\tMatlab method", "contents": "quiver(${1:args})"} ,
		{"trigger": "quiver3\tMatlab method", "contents": "quiver3(${1:args})"} ,
		{"trigger": "qz\tMatlab method", "contents": "qz(${1:args})"} ,
		{"trigger": "rad2deg\tMatlab method", "contents": "rad2deg(${1:args})"} ,
		{"trigger": "rand\tMatlab method", "contents": "rand(${1:args})"} ,
		{"trigger": "randi\tMatlab method", "contents": "randi(${1:args})"} ,
		{"trigger": "randn\tMatlab method", "contents": "randn(${1:args})"} ,
		{"trigger": "randperm\tMatlab method", "contents": "randperm(${1:args})"} ,
		{"trigger": "rank\tMatlab method", "contents": "rank(${1:args})"} ,
		{"trigger": "rat\tMatlab method", "contents": "rat(${1:args})"} ,
		{"trigger": "rats\tMatlab method", "contents": "rats(${1:args})"} ,
		{"trigger": "rbbox\tMatlab method", "contents": "rbbox(${1:args})"} ,
		{"trigger": "rcond\tMatlab method", "contents": "rcond(${1:args})"} ,
		{"trigger": "rdivide\tMatlab method", "contents": "rdivide(${1:args})"} ,
		{"trigger": "read\tMatlab method", "contents": "read(${1:args})"} ,
		{"trigger": "readATblHdr\tMatlab method", "contents": "readATblHdr(${1:args})"} ,
		{"trigger": "readBTblHdr\tMatlab method", "contents": "readBTblHdr(${1:args})"} ,
		{"trigger": "readCard\tMatlab method", "contents": "readCard(${1:args})"} ,
		{"trigger": "readCol\tMatlab method", "contents": "readCol(${1:args})"} ,
		{"trigger": "readFrame\tMatlab method", "contents": "readFrame(${1:args})"} ,
		{"trigger": "readImg\tMatlab method", "contents": "readImg(${1:args})"} ,
		{"trigger": "readKey\tMatlab method", "contents": "readKey(${1:args})"} ,
		{"trigger": "readKeyCmplx\tMatlab method", "contents": "readKeyCmplx(${1:args})"} ,
		{"trigger": "readKeyDbl\tMatlab method", "contents": "readKeyDbl(${1:args})"} ,
		{"trigger": "readKeyLongLong\tMatlab method", "contents": "readKeyLongLong(${1:args})"} ,
		{"trigger": "readKeyLongStr\tMatlab method", "contents": "readKeyLongStr(${1:args})"} ,
		{"trigger": "readKeyUnit\tMatlab method", "contents": "readKeyUnit(${1:args})"} ,
		{"trigger": "readRecord\tMatlab method", "contents": "readRecord(${1:args})"} ,
		{"trigger": "readall\tMatlab method", "contents": "readall(${1:args})"} ,
		{"trigger": "readasync\tMatlab method", "contents": "readasync(${1:args})"} ,
		{"trigger": "readimage\tMatlab method", "contents": "readimage(${1:args})"} ,
		{"trigger": "readtable\tMatlab method", "contents": "readtable(${1:args})"} ,
		{"trigger": "real\tMatlab method", "contents": "real(${1:args})"} ,
		{"trigger": "reallog\tMatlab method", "contents": "reallog(${1:args})"} ,
		{"trigger": "realmax\tMatlab method", "contents": "realmax(${1:args})"} ,
		{"trigger": "realmin\tMatlab method", "contents": "realmin(${1:args})"} ,
		{"trigger": "realpow\tMatlab method", "contents": "realpow(${1:args})"} ,
		{"trigger": "realsqrt\tMatlab method", "contents": "realsqrt(${1:args})"} ,
		{"trigger": "record\tMatlab method", "contents": "record(${1:args})"} ,
		{"trigger": "recordblocking\tMatlab method", "contents": "recordblocking(${1:args})"} ,
		{"trigger": "rectangle\tMatlab method", "contents": "rectangle(${1:args})"} ,
		{"trigger": "rectint\tMatlab method", "contents": "rectint(${1:args})"} ,
		{"trigger": "recycle\tMatlab method", "contents": "recycle(${1:args})"} ,
		{"trigger": "reducepatch\tMatlab method", "contents": "reducepatch(${1:args})"} ,
		{"trigger": "reducevolume\tMatlab method", "contents": "reducevolume(${1:args})"} ,
		{"trigger": "refresh\tMatlab method", "contents": "refresh(${1:args})"} ,
		{"trigger": "refreshdata\tMatlab method", "contents": "refreshdata(${1:args})"} ,
		{"trigger": "regexp\tMatlab method", "contents": "regexp(${1:args})"} ,
		{"trigger": "regexpi\tMatlab method", "contents": "regexpi(${1:args})"} ,
		{"trigger": "regexprep\tMatlab method", "contents": "regexprep(${1:args})"} ,
		{"trigger": "regexptranslate\tMatlab method", "contents": "regexptranslate(${1:args})"} ,
		{"trigger": "registerevent\tMatlab method", "contents": "registerevent(${1:args})"} ,
		{"trigger": "regmatlabserver\tMatlab method", "contents": "regmatlabserver(${1:args})"} ,
		{"trigger": "rehash\tMatlab method", "contents": "rehash(${1:args})"} ,
		{"trigger": "release\tMatlab method", "contents": "release(${1:args})"} ,
		{"trigger": "rem\tMatlab method", "contents": "rem(${1:args})"} ,
		{"trigger": "remove\tMatlab method", "contents": "remove(${1:args})"} ,
		{"trigger": "removecats\tMatlab method", "contents": "removecats(${1:args})"} ,
		{"trigger": "removets\tMatlab method", "contents": "removets(${1:args})"} ,
		{"trigger": "renamecats\tMatlab method", "contents": "renamecats(${1:args})"} ,
		{"trigger": "reordercats\tMatlab method", "contents": "reordercats(${1:args})"} ,
		{"trigger": "reordernodes\tMatlab method", "contents": "reordernodes(${1:args})"} ,
		{"trigger": "repelem\tMatlab method", "contents": "repelem(${1:args})"} ,
		{"trigger": "repmat\tMatlab method", "contents": "repmat(${1:args})"} ,
		{"trigger": "resample\tMatlab method", "contents": "resample(${1:args})"} ,
		{"trigger": "reset\tMatlab method", "contents": "reset(${1:args})"} ,
		{"trigger": "reshape\tMatlab method", "contents": "reshape(${1:args})"} ,
		{"trigger": "residue\tMatlab method", "contents": "residue(${1:args})"} ,
		{"trigger": "restoredefaultpath\tMatlab method", "contents": "restoredefaultpath(${1:args})"} ,
		{"trigger": "rethrow\tMatlab method", "contents": "rethrow(${1:args})"} ,
		{"trigger": "return\tMatlab method", "contents": "return(${1:args})"} ,
		{"trigger": "rgb2gray\tMatlab method", "contents": "rgb2gray(${1:args})"} ,
		{"trigger": "rgb2hsv\tMatlab method", "contents": "rgb2hsv(${1:args})"} ,
		{"trigger": "rgb2ind\tMatlab method", "contents": "rgb2ind(${1:args})"} ,
		{"trigger": "rgbplot\tMatlab method", "contents": "rgbplot(${1:args})"} ,
		{"trigger": "ribbon\tMatlab method", "contents": "ribbon(${1:args})"} ,
		{"trigger": "rmappdata\tMatlab method", "contents": "rmappdata(${1:args})"} ,
		{"trigger": "rmdir\tMatlab method", "contents": "rmdir(${1:args})"} ,
		{"trigger": "rmedge\tMatlab method", "contents": "rmedge(${1:args})"} ,
		{"trigger": "rmfield\tMatlab method", "contents": "rmfield(${1:args})"} ,
		{"trigger": "rmnode\tMatlab method", "contents": "rmnode(${1:args})"} ,
		{"trigger": "rmpath\tMatlab method", "contents": "rmpath(${1:args})"} ,
		{"trigger": "rmpref\tMatlab method", "contents": "rmpref(${1:args})"} ,
		{"trigger": "rng\tMatlab method", "contents": "rng(${1:args})"} ,
		{"trigger": "roots\tMatlab method", "contents": "roots(${1:args})"} ,
		{"trigger": "rose\tMatlab method", "contents": "rose(${1:args})"} ,
		{"trigger": "rosser\tMatlab method", "contents": "rosser(${1:args})"} ,
		{"trigger": "rot90\tMatlab method", "contents": "rot90(${1:args})"} ,
		{"trigger": "rotate\tMatlab method", "contents": "rotate(${1:args})"} ,
		{"trigger": "rotate3d\tMatlab method", "contents": "rotate3d(${1:args})"} ,
		{"trigger": "round\tMatlab method", "contents": "round(${1:args})"} ,
		{"trigger": "rowfun\tMatlab method", "contents": "rowfun(${1:args})"} ,
		{"trigger": "rref\tMatlab method", "contents": "rref(${1:args})"} ,
		{"trigger": "rsf2csf\tMatlab method", "contents": "rsf2csf(${1:args})"} ,
		{"trigger": "run\tMatlab method", "contents": "run(${1:args})"} ,
		{"trigger": "runtests\tMatlab method", "contents": "runtests(${1:args})"} ,
		{"trigger": "save\tMatlab method", "contents": "save(${1:args})"} ,
		{"trigger": "saveas\tMatlab method", "contents": "saveas(${1:args})"} ,
		{"trigger": "savefig\tMatlab method", "contents": "savefig(${1:args})"} ,
		{"trigger": "saveobj\tMatlab method", "contents": "saveobj(${1:args})"} ,
		{"trigger": "savepath\tMatlab method", "contents": "savepath(${1:args})"} ,
		{"trigger": "scatter\tMatlab method", "contents": "scatter(${1:args})"} ,
		{"trigger": "scatter3\tMatlab method", "contents": "scatter3(${1:args})"} ,
		{"trigger": "scatteredInterpolant\tMatlab method", "contents": "scatteredInterpolant(${1:args})"} ,
		{"trigger": "schur\tMatlab method", "contents": "schur(${1:args})"} ,
		{"trigger": "sec\tMatlab method", "contents": "sec(${1:args})"} ,
		{"trigger": "secd\tMatlab method", "contents": "secd(${1:args})"} ,
		{"trigger": "sech\tMatlab method", "contents": "sech(${1:args})"} ,
		{"trigger": "second\tMatlab method", "contents": "second(${1:args})"} ,
		{"trigger": "seconds\tMatlab method", "contents": "seconds(${1:args})"} ,
		{"trigger": "selectmoveresize\tMatlab method", "contents": "selectmoveresize(${1:args})"} ,
		{"trigger": "semilogx\tMatlab method", "contents": "semilogx(${1:args})"} ,
		{"trigger": "semilogy\tMatlab method", "contents": "semilogy(${1:args})"} ,
		{"trigger": "sendmail\tMatlab method", "contents": "sendmail(${1:args})"} ,
		{"trigger": "serial\tMatlab method", "contents": "serial(${1:args})"} ,
		{"trigger": "serialbreak\tMatlab method", "contents": "serialbreak(${1:args})"} ,
		{"trigger": "set\tMatlab method", "contents": "set(${1:args})"} ,
		{"trigger": "setBscale\tMatlab method", "contents": "setBscale(${1:args})"} ,
		{"trigger": "setCompressionType\tMatlab method", "contents": "setCompressionType(${1:args})"} ,
		{"trigger": "setHCompScale\tMatlab method", "contents": "setHCompScale(${1:args})"} ,
		{"trigger": "setHCompSmooth\tMatlab method", "contents": "setHCompSmooth(${1:args})"} ,
		{"trigger": "setTileDim\tMatlab method", "contents": "setTileDim(${1:args})"} ,
		{"trigger": "setTscale\tMatlab method", "contents": "setTscale(${1:args})"} ,
		{"trigger": "setabstime\tMatlab method", "contents": "setabstime(${1:args})"} ,
		{"trigger": "setappdata\tMatlab method", "contents": "setappdata(${1:args})"} ,
		{"trigger": "setcats\tMatlab method", "contents": "setcats(${1:args})"} ,
		{"trigger": "setdiff\tMatlab method", "contents": "setdiff(${1:args})"} ,
		{"trigger": "setenv\tMatlab method", "contents": "setenv(${1:args})"} ,
		{"trigger": "setfield\tMatlab method", "contents": "setfield(${1:args})"} ,
		{"trigger": "setinterpmethod\tMatlab method", "contents": "setinterpmethod(${1:args})"} ,
		{"trigger": "setpixelposition\tMatlab method", "contents": "setpixelposition(${1:args})"} ,
		{"trigger": "setpref\tMatlab method", "contents": "setpref(${1:args})"} ,
		{"trigger": "setstr\tMatlab method", "contents": "setstr(${1:args})"} ,
		{"trigger": "settimeseriesnames\tMatlab method", "contents": "settimeseriesnames(${1:args})"} ,
		{"trigger": "setxor\tMatlab method", "contents": "setxor(${1:args})"} ,
		{"trigger": "shading\tMatlab method", "contents": "shading(${1:args})"} ,
		{"trigger": "shg\tMatlab method", "contents": "shg(${1:args})"} ,
		{"trigger": "shiftdim\tMatlab method", "contents": "shiftdim(${1:args})"} ,
		{"trigger": "shortestpath\tMatlab method", "contents": "shortestpath(${1:args})"} ,
		{"trigger": "shortestpathtree\tMatlab method", "contents": "shortestpathtree(${1:args})"} ,
		{"trigger": "showplottool\tMatlab method", "contents": "showplottool(${1:args})"} ,
		{"trigger": "shrinkfaces\tMatlab method", "contents": "shrinkfaces(${1:args})"} ,
		{"trigger": "sign\tMatlab method", "contents": "sign(${1:args})"} ,
		{"trigger": "sin\tMatlab method", "contents": "sin(${1:args})"} ,
		{"trigger": "sind\tMatlab method", "contents": "sind(${1:args})"} ,
		{"trigger": "single\tMatlab method", "contents": "single(${1:args})"} ,
		{"trigger": "sinh\tMatlab method", "contents": "sinh(${1:args})"} ,
		{"trigger": "size\tMatlab method", "contents": "size(${1:args})"} ,
		{"trigger": "slice\tMatlab method", "contents": "slice(${1:args})"} ,
		{"trigger": "smooth3\tMatlab method", "contents": "smooth3(${1:args})"} ,
		{"trigger": "snapnow\tMatlab method", "contents": "snapnow(${1:args})"} ,
		{"trigger": "sort\tMatlab method", "contents": "sort(${1:args})"} ,
		{"trigger": "sortrows\tMatlab method", "contents": "sortrows(${1:args})"} ,
		{"trigger": "sound\tMatlab method", "contents": "sound(${1:args})"} ,
		{"trigger": "soundsc\tMatlab method", "contents": "soundsc(${1:args})"} ,
		{"trigger": "spalloc\tMatlab method", "contents": "spalloc(${1:args})"} ,
		{"trigger": "sparse\tMatlab method", "contents": "sparse(${1:args})"} ,
		{"trigger": "spaugment\tMatlab method", "contents": "spaugment(${1:args})"} ,
		{"trigger": "spconvert\tMatlab method", "contents": "spconvert(${1:args})"} ,
		{"trigger": "spdiags\tMatlab method", "contents": "spdiags(${1:args})"} ,
		{"trigger": "specular\tMatlab method", "contents": "specular(${1:args})"} ,
		{"trigger": "speye\tMatlab method", "contents": "speye(${1:args})"} ,
		{"trigger": "spfun\tMatlab method", "contents": "spfun(${1:args})"} ,
		{"trigger": "sph2cart\tMatlab method", "contents": "sph2cart(${1:args})"} ,
		{"trigger": "sphere\tMatlab method", "contents": "sphere(${1:args})"} ,
		{"trigger": "spinmap\tMatlab method", "contents": "spinmap(${1:args})"} ,
		{"trigger": "spline\tMatlab method", "contents": "spline(${1:args})"} ,
		{"trigger": "split\tMatlab method", "contents": "split(${1:args})"} ,
		{"trigger": "splitapply\tMatlab method", "contents": "splitapply(${1:args})"} ,
		{"trigger": "spones\tMatlab method", "contents": "spones(${1:args})"} ,
		{"trigger": "spparms\tMatlab method", "contents": "spparms(${1:args})"} ,
		{"trigger": "sprand\tMatlab method", "contents": "sprand(${1:args})"} ,
		{"trigger": "sprandn\tMatlab method", "contents": "sprandn(${1:args})"} ,
		{"trigger": "sprandsym\tMatlab method", "contents": "sprandsym(${1:args})"} ,
		{"trigger": "sprank\tMatlab method", "contents": "sprank(${1:args})"} ,
		{"trigger": "sprintf\tMatlab method", "contents": "sprintf(${1:args})"} ,
		{"trigger": "spy\tMatlab method", "contents": "spy(${1:args})"} ,
		{"trigger": "sqrt\tMatlab method", "contents": "sqrt(${1:args})"} ,
		{"trigger": "sqrtm\tMatlab method", "contents": "sqrtm(${1:args})"} ,
		{"trigger": "squeeze\tMatlab method", "contents": "squeeze(${1:args})"} ,
		{"trigger": "ss2tf\tMatlab method", "contents": "ss2tf(${1:args})"} ,
		{"trigger": "sscanf\tMatlab method", "contents": "sscanf(${1:args})"} ,
		{"trigger": "stack\tMatlab method", "contents": "stack(${1:args})"} ,
		{"trigger": "stairs\tMatlab method", "contents": "stairs(${1:args})"} ,
		{"trigger": "standardizeMissing\tMatlab method", "contents": "standardizeMissing(${1:args})"} ,
		{"trigger": "startup\tMatlab method", "contents": "startup(${1:args})"} ,
		{"trigger": "std\tMatlab method", "contents": "std(${1:args})"} ,
		{"trigger": "stem\tMatlab method", "contents": "stem(${1:args})"} ,
		{"trigger": "stem3\tMatlab method", "contents": "stem3(${1:args})"} ,
		{"trigger": "stopasync\tMatlab method", "contents": "stopasync(${1:args})"} ,
		{"trigger": "str2double\tMatlab method", "contents": "str2double(${1:args})"} ,
		{"trigger": "str2func\tMatlab method", "contents": "str2func(${1:args})"} ,
		{"trigger": "str2mat\tMatlab method", "contents": "str2mat(${1:args})"} ,
		{"trigger": "str2num\tMatlab method", "contents": "str2num(${1:args})"} ,
		{"trigger": "strcat\tMatlab method", "contents": "strcat(${1:args})"} ,
		{"trigger": "strcmp\tMatlab method", "contents": "strcmp(${1:args})"} ,
		{"trigger": "strcmpi\tMatlab method", "contents": "strcmpi(${1:args})"} ,
		{"trigger": "stream2\tMatlab method", "contents": "stream2(${1:args})"} ,
		{"trigger": "stream3\tMatlab method", "contents": "stream3(${1:args})"} ,
		{"trigger": "streamline\tMatlab method", "contents": "streamline(${1:args})"} ,
		{"trigger": "streamparticles\tMatlab method", "contents": "streamparticles(${1:args})"} ,
		{"trigger": "streamribbon\tMatlab method", "contents": "streamribbon(${1:args})"} ,
		{"trigger": "streamslice\tMatlab method", "contents": "streamslice(${1:args})"} ,
		{"trigger": "streamtube\tMatlab method", "contents": "streamtube(${1:args})"} ,
		{"trigger": "strfind\tMatlab method", "contents": "strfind(${1:args})"} ,
		{"trigger": "strings\tMatlab method", "contents": "strings(${1:args})"} ,
		{"trigger": "strjoin\tMatlab method", "contents": "strjoin(${1:args})"} ,
		{"trigger": "strjust\tMatlab method", "contents": "strjust(${1:args})"} ,
		{"trigger": "strmatch\tMatlab method", "contents": "strmatch(${1:args})"} ,
		{"trigger": "strncmp\tMatlab method", "contents": "strncmp(${1:args})"} ,
		{"trigger": "strncmpi\tMatlab method", "contents": "strncmpi(${1:args})"} ,
		{"trigger": "strread\tMatlab method", "contents": "strread(${1:args})"} ,
		{"trigger": "strrep\tMatlab method", "contents": "strrep(${1:args})"} ,
		{"trigger": "strsplit\tMatlab method", "contents": "strsplit(${1:args})"} ,
		{"trigger": "strtok\tMatlab method", "contents": "strtok(${1:args})"} ,
		{"trigger": "strtrim\tMatlab method", "contents": "strtrim(${1:args})"} ,
		{"trigger": "struct\tMatlab method", "contents": "struct(${1:args})"} ,
		{"trigger": "struct2cell\tMatlab method", "contents": "struct2cell(${1:args})"} ,
		{"trigger": "struct2table\tMatlab method", "contents": "struct2table(${1:args})"} ,
		{"trigger": "structfun\tMatlab method", "contents": "structfun(${1:args})"} ,
		{"trigger": "strvcat\tMatlab method", "contents": "strvcat(${1:args})"} ,
		{"trigger": "sub2ind\tMatlab method", "contents": "sub2ind(${1:args})"} ,
		{"trigger": "subgraph\tMatlab method", "contents": "subgraph(${1:args})"} ,
		{"trigger": "subplot\tMatlab method", "contents": "subplot(${1:args})"} ,
		{"trigger": "subsasgn\tMatlab method", "contents": "subsasgn(${1:args})"} ,
		{"trigger": "subsindex\tMatlab method", "contents": "subsindex(${1:args})"} ,
		{"trigger": "subspace\tMatlab method", "contents": "subspace(${1:args})"} ,
		{"trigger": "subsref\tMatlab method", "contents": "subsref(${1:args})"} ,
		{"trigger": "substruct\tMatlab method", "contents": "substruct(${1:args})"} ,
		{"trigger": "subvolume\tMatlab method", "contents": "subvolume(${1:args})"} ,
		{"trigger": "successors\tMatlab method", "contents": "successors(${1:args})"} ,
		{"trigger": "sum\tMatlab method", "contents": "sum(${1:args})"} ,
		{"trigger": "summary\tMatlab method", "contents": "summary(${1:args})"} ,
		{"trigger": "superclasses\tMatlab method", "contents": "superclasses(${1:args})"} ,
		{"trigger": "superiorto\tMatlab method", "contents": "superiorto(${1:args})"} ,
		{"trigger": "support\tMatlab method", "contents": "support(${1:args})"} ,
		{"trigger": "supportPackageInstaller\tMatlab method", "contents": "supportPackageInstaller(${1:args})"} ,
		{"trigger": "surf\tMatlab method", "contents": "surf(${1:args})"} ,
		{"trigger": "surf2patch\tMatlab method", "contents": "surf2patch(${1:args})"} ,
		{"trigger": "surface\tMatlab method", "contents": "surface(${1:args})"} ,
		{"trigger": "surfaceArea\tMatlab method", "contents": "surfaceArea(${1:args})"} ,
		{"trigger": "surfc\tMatlab method", "contents": "surfc(${1:args})"} ,
		{"trigger": "surfl\tMatlab method", "contents": "surfl(${1:args})"} ,
		{"trigger": "surfnorm\tMatlab method", "contents": "surfnorm(${1:args})"} ,
		{"trigger": "svd\tMatlab method", "contents": "svd(${1:args})"} ,
		{"trigger": "svds\tMatlab method", "contents": "svds(${1:args})"} ,
		{"trigger": "swapbytes\tMatlab method", "contents": "swapbytes(${1:args})"} ,
		{"trigger": "sylvester\tMatlab method", "contents": "sylvester(${1:args})"} ,
		{"trigger": "symamd\tMatlab method", "contents": "symamd(${1:args})"} ,
		{"trigger": "symbfact\tMatlab method", "contents": "symbfact(${1:args})"} ,
		{"trigger": "symmlq\tMatlab method", "contents": "symmlq(${1:args})"} ,
		{"trigger": "symrcm\tMatlab method", "contents": "symrcm(${1:args})"} ,
		{"trigger": "symvar\tMatlab method", "contents": "symvar(${1:args})"} ,
		{"trigger": "synchronize\tMatlab method", "contents": "synchronize(${1:args})"} ,
		{"trigger": "syntax\tMatlab method", "contents": "syntax(${1:args})"} ,
		{"trigger": "system\tMatlab method", "contents": "system(${1:args})"} ,
		{"trigger": "table\tMatlab method", "contents": "table(${1:args})"} ,
		{"trigger": "table2array\tMatlab method", "contents": "table2array(${1:args})"} ,
		{"trigger": "table2cell\tMatlab method", "contents": "table2cell(${1:args})"} ,
		{"trigger": "table2struct\tMatlab method", "contents": "table2struct(${1:args})"} ,
		{"trigger": "tan\tMatlab method", "contents": "tan(${1:args})"} ,
		{"trigger": "tand\tMatlab method", "contents": "tand(${1:args})"} ,
		{"trigger": "tanh\tMatlab method", "contents": "tanh(${1:args})"} ,
		{"trigger": "tar\tMatlab method", "contents": "tar(${1:args})"} ,
		{"trigger": "targetupdater\tMatlab method", "contents": "targetupdater(${1:args})"} ,
		{"trigger": "tcpclient\tMatlab method", "contents": "tcpclient(${1:args})"} ,
		{"trigger": "tempdir\tMatlab method", "contents": "tempdir(${1:args})"} ,
		{"trigger": "tempname\tMatlab method", "contents": "tempname(${1:args})"} ,
		{"trigger": "tetramesh\tMatlab method", "contents": "tetramesh(${1:args})"} ,
		{"trigger": "texlabel\tMatlab method", "contents": "texlabel(${1:args})"} ,
		{"trigger": "text\tMatlab method", "contents": "text(${1:args})"} ,
		{"trigger": "textread\tMatlab method", "contents": "textread(${1:args})"} ,
		{"trigger": "textscan\tMatlab method", "contents": "textscan(${1:args})"} ,
		{"trigger": "textwrap\tMatlab method", "contents": "textwrap(${1:args})"} ,
		{"trigger": "tfqmr\tMatlab method", "contents": "tfqmr(${1:args})"} ,
		{"trigger": "throw\tMatlab method", "contents": "throw(${1:args})"} ,
		{"trigger": "throwAsCaller\tMatlab method", "contents": "throwAsCaller(${1:args})"} ,
		{"trigger": "tic\tMatlab method", "contents": "tic(${1:args})"} ,
		{"trigger": "time\tMatlab method", "contents": "time(${1:args})"} ,
		{"trigger": "timeit\tMatlab method", "contents": "timeit(${1:args})"} ,
		{"trigger": "timeofday\tMatlab method", "contents": "timeofday(${1:args})"} ,
		{"trigger": "timer\tMatlab method", "contents": "timer(${1:args})"} ,
		{"trigger": "timer.delete\tMatlab method", "contents": "timer.delete(${1:args})"} ,
		{"trigger": "timer.get\tMatlab method", "contents": "timer.get(${1:args})"} ,
		{"trigger": "timer.isvalid\tMatlab method", "contents": "timer.isvalid(${1:args})"} ,
		{"trigger": "timer.set\tMatlab method", "contents": "timer.set(${1:args})"} ,
		{"trigger": "timer.start\tMatlab method", "contents": "timer.start(${1:args})"} ,
		{"trigger": "timer.startat\tMatlab method", "contents": "timer.startat(${1:args})"} ,
		{"trigger": "timer.stop\tMatlab method", "contents": "timer.stop(${1:args})"} ,
		{"trigger": "timer.timerfind\tMatlab method", "contents": "timer.timerfind(${1:args})"} ,
		{"trigger": "timer.timerfindall\tMatlab method", "contents": "timer.timerfindall(${1:args})"} ,
		{"trigger": "timer.wait\tMatlab method", "contents": "timer.wait(${1:args})"} ,
		{"trigger": "times\tMatlab method", "contents": "times(${1:args})"} ,
		{"trigger": "timeseries\tMatlab method", "contents": "timeseries(${1:args})"} ,
		{"trigger": "timezones\tMatlab method", "contents": "timezones(${1:args})"} ,
		{"trigger": "title\tMatlab method", "contents": "title(${1:args})"} ,
		{"trigger": "toc\tMatlab method", "contents": "toc(${1:args})"} ,
		{"trigger": "todatenum\tMatlab method", "contents": "todatenum(${1:args})"} ,
		{"trigger": "toeplitz\tMatlab method", "contents": "toeplitz(${1:args})"} ,
		{"trigger": "toolboxdir\tMatlab method", "contents": "toolboxdir(${1:args})"} ,
		{"trigger": "toposort\tMatlab method", "contents": "toposort(${1:args})"} ,
		{"trigger": "trace\tMatlab method", "contents": "trace(${1:args})"} ,
		{"trigger": "transclosure\tMatlab method", "contents": "transclosure(${1:args})"} ,
		{"trigger": "transpose\tMatlab method", "contents": "transpose(${1:args})"} ,
		{"trigger": "transreduction\tMatlab method", "contents": "transreduction(${1:args})"} ,
		{"trigger": "trapz\tMatlab method", "contents": "trapz(${1:args})"} ,
		{"trigger": "treelayout\tMatlab method", "contents": "treelayout(${1:args})"} ,
		{"trigger": "treeplot\tMatlab method", "contents": "treeplot(${1:args})"} ,
		{"trigger": "triangulation\tMatlab method", "contents": "triangulation(${1:args})"} ,
		{"trigger": "tril\tMatlab method", "contents": "tril(${1:args})"} ,
		{"trigger": "trimesh\tMatlab method", "contents": "trimesh(${1:args})"} ,
		{"trigger": "triplequad\tMatlab method", "contents": "triplequad(${1:args})"} ,
		{"trigger": "triplot\tMatlab method", "contents": "triplot(${1:args})"} ,
		{"trigger": "trisurf\tMatlab method", "contents": "trisurf(${1:args})"} ,
		{"trigger": "triu\tMatlab method", "contents": "triu(${1:args})"} ,
		{"trigger": "true\tMatlab method", "contents": "true(${1:args})"} ,
		{"trigger": "tscollection\tMatlab method", "contents": "tscollection(${1:args})"} ,
		{"trigger": "tsdata.event\tMatlab method", "contents": "tsdata.event(${1:args})"} ,
		{"trigger": "tsearchn\tMatlab method", "contents": "tsearchn(${1:args})"} ,
		{"trigger": "type\tMatlab method", "contents": "type(${1:args})"} ,
		{"trigger": "typecast\tMatlab method", "contents": "typecast(${1:args})"} ,
		{"trigger": "tzoffset\tMatlab method", "contents": "tzoffset(${1:args})"} ,
		{"trigger": "uibuttongroup\tMatlab method", "contents": "uibuttongroup(${1:args})"} ,
		{"trigger": "uicontextmenu\tMatlab method", "contents": "uicontextmenu(${1:args})"} ,
		{"trigger": "uicontrol\tMatlab method", "contents": "uicontrol(${1:args})"} ,
		{"trigger": "uigetdir\tMatlab method", "contents": "uigetdir(${1:args})"} ,
		{"trigger": "uigetfile\tMatlab method", "contents": "uigetfile(${1:args})"} ,
		{"trigger": "uigetpref\tMatlab method", "contents": "uigetpref(${1:args})"} ,
		{"trigger": "uiimport\tMatlab method", "contents": "uiimport(${1:args})"} ,
		{"trigger": "uimenu\tMatlab method", "contents": "uimenu(${1:args})"} ,
		{"trigger": "uint16\tMatlab method", "contents": "uint16(${1:args})"} ,
		{"trigger": "uint32\tMatlab method", "contents": "uint32(${1:args})"} ,
		{"trigger": "uint64\tMatlab method", "contents": "uint64(${1:args})"} ,
		{"trigger": "uint8\tMatlab method", "contents": "uint8(${1:args})"} ,
		{"trigger": "uiopen\tMatlab method", "contents": "uiopen(${1:args})"} ,
		{"trigger": "uipanel\tMatlab method", "contents": "uipanel(${1:args})"} ,
		{"trigger": "uipushtool\tMatlab method", "contents": "uipushtool(${1:args})"} ,
		{"trigger": "uiputfile\tMatlab method", "contents": "uiputfile(${1:args})"} ,
		{"trigger": "uiresume\tMatlab method", "contents": "uiresume(${1:args})"} ,
		{"trigger": "uisave\tMatlab method", "contents": "uisave(${1:args})"} ,
		{"trigger": "uisetcolor\tMatlab method", "contents": "uisetcolor(${1:args})"} ,
		{"trigger": "uisetfont\tMatlab method", "contents": "uisetfont(${1:args})"} ,
		{"trigger": "uisetpref\tMatlab method", "contents": "uisetpref(${1:args})"} ,
		{"trigger": "uistack\tMatlab method", "contents": "uistack(${1:args})"} ,
		{"trigger": "uitab\tMatlab method", "contents": "uitab(${1:args})"} ,
		{"trigger": "uitabgroup\tMatlab method", "contents": "uitabgroup(${1:args})"} ,
		{"trigger": "uitable\tMatlab method", "contents": "uitable(${1:args})"} ,
		{"trigger": "uitoggletool\tMatlab method", "contents": "uitoggletool(${1:args})"} ,
		{"trigger": "uitoolbar\tMatlab method", "contents": "uitoolbar(${1:args})"} ,
		{"trigger": "uiwait\tMatlab method", "contents": "uiwait(${1:args})"} ,
		{"trigger": "uminus\tMatlab method", "contents": "uminus(${1:args})"} ,
		{"trigger": "undocheckout\tMatlab method", "contents": "undocheckout(${1:args})"} ,
		{"trigger": "unicode2native\tMatlab method", "contents": "unicode2native(${1:args})"} ,
		{"trigger": "union\tMatlab method", "contents": "union(${1:args})"} ,
		{"trigger": "unique\tMatlab method", "contents": "unique(${1:args})"} ,
		{"trigger": "uniquetol\tMatlab method", "contents": "uniquetol(${1:args})"} ,
		{"trigger": "unix\tMatlab method", "contents": "unix(${1:args})"} ,
		{"trigger": "unloadlibrary\tMatlab method", "contents": "unloadlibrary(${1:args})"} ,
		{"trigger": "unmesh\tMatlab method", "contents": "unmesh(${1:args})"} ,
		{"trigger": "unmkpp\tMatlab method", "contents": "unmkpp(${1:args})"} ,
		{"trigger": "unregisterallevents\tMatlab method", "contents": "unregisterallevents(${1:args})"} ,
		{"trigger": "unregisterevent\tMatlab method", "contents": "unregisterevent(${1:args})"} ,
		{"trigger": "unstack\tMatlab method", "contents": "unstack(${1:args})"} ,
		{"trigger": "untar\tMatlab method", "contents": "untar(${1:args})"} ,
		{"trigger": "unwrap\tMatlab method", "contents": "unwrap(${1:args})"} ,
		{"trigger": "unzip\tMatlab method", "contents": "unzip(${1:args})"} ,
		{"trigger": "uplus\tMatlab method", "contents": "uplus(${1:args})"} ,
		{"trigger": "upper\tMatlab method", "contents": "upper(${1:args})"} ,
		{"trigger": "urlread\tMatlab method", "contents": "urlread(${1:args})"} ,
		{"trigger": "urlwrite\tMatlab method", "contents": "urlwrite(${1:args})"} ,
		{"trigger": "usejava\tMatlab method", "contents": "usejava(${1:args})"} ,
		{"trigger": "userpath\tMatlab method", "contents": "userpath(${1:args})"} ,
		{"trigger": "validateattributes\tMatlab method", "contents": "validateattributes(${1:args})"} ,
		{"trigger": "validatestring\tMatlab method", "contents": "validatestring(${1:args})"} ,
		{"trigger": "values\tMatlab method", "contents": "values(${1:args})"} ,
		{"trigger": "vander\tMatlab method", "contents": "vander(${1:args})"} ,
		{"trigger": "var\tMatlab method", "contents": "var(${1:args})"} ,
		{"trigger": "varargin\tMatlab method", "contents": "varargin(${1:args})"} ,
		{"trigger": "varargout\tMatlab method", "contents": "varargout(${1:args})"} ,
		{"trigger": "varfun\tMatlab method", "contents": "varfun(${1:args})"} ,
		{"trigger": "vectorize\tMatlab method", "contents": "vectorize(${1:args})"} ,
		{"trigger": "ver\tMatlab method", "contents": "ver(${1:args})"} ,
		{"trigger": "verLessThan\tMatlab method", "contents": "verLessThan(${1:args})"} ,
		{"trigger": "verctrl\tMatlab method", "contents": "verctrl(${1:args})"} ,
		{"trigger": "version\tMatlab method", "contents": "version(${1:args})"} ,
		{"trigger": "vertcat\tMatlab method", "contents": "vertcat(${1:args})"} ,
		{"trigger": "vertexAttachments\tMatlab method", "contents": "vertexAttachments(${1:args})"} ,
		{"trigger": "vertexNormal\tMatlab method", "contents": "vertexNormal(${1:args})"} ,
		{"trigger": "view\tMatlab method", "contents": "view(${1:args})"} ,
		{"trigger": "viewmtx\tMatlab method", "contents": "viewmtx(${1:args})"} ,
		{"trigger": "visdiff\tMatlab method", "contents": "visdiff(${1:args})"} ,
		{"trigger": "volume\tMatlab method", "contents": "volume(${1:args})"} ,
		{"trigger": "volumebounds\tMatlab method", "contents": "volumebounds(${1:args})"} ,
		{"trigger": "voronoi\tMatlab method", "contents": "voronoi(${1:args})"} ,
		{"trigger": "voronoiDiagram\tMatlab method", "contents": "voronoiDiagram(${1:args})"} ,
		{"trigger": "voronoin\tMatlab method", "contents": "voronoin(${1:args})"} ,
		{"trigger": "waitbar\tMatlab method", "contents": "waitbar(${1:args})"} ,
		{"trigger": "waitfor\tMatlab method", "contents": "waitfor(${1:args})"} ,
		{"trigger": "waitforbuttonpress\tMatlab method", "contents": "waitforbuttonpress(${1:args})"} ,
		{"trigger": "warndlg\tMatlab method", "contents": "warndlg(${1:args})"} ,
		{"trigger": "warning\tMatlab method", "contents": "warning(${1:args})"} ,
		{"trigger": "waterfall\tMatlab method", "contents": "waterfall(${1:args})"} ,
		{"trigger": "wavfinfo\tMatlab method", "contents": "wavfinfo(${1:args})"} ,
		{"trigger": "wavread\tMatlab method", "contents": "wavread(${1:args})"} ,
		{"trigger": "wavwrite\tMatlab method", "contents": "wavwrite(${1:args})"} ,
		{"trigger": "web\tMatlab method", "contents": "web(${1:args})"} ,
		{"trigger": "weboptions\tMatlab method", "contents": "weboptions(${1:args})"} ,
		{"trigger": "webread\tMatlab method", "contents": "webread(${1:args})"} ,
		{"trigger": "websave\tMatlab method", "contents": "websave(${1:args})"} ,
		{"trigger": "webwrite\tMatlab method", "contents": "webwrite(${1:args})"} ,
		{"trigger": "week\tMatlab method", "contents": "week(${1:args})"} ,
		{"trigger": "weekday\tMatlab method", "contents": "weekday(${1:args})"} ,
		{"trigger": "what\tMatlab method", "contents": "what(${1:args})"} ,
		{"trigger": "whatsnew\tMatlab method", "contents": "whatsnew(${1:args})"} ,
		{"trigger": "which\tMatlab method", "contents": "which(${1:args})"} ,
		{"trigger": "while\tMatlab method", "contents": "while(${1:args})"} ,
		{"trigger": "whitebg\tMatlab method", "contents": "whitebg(${1:args})"} ,
		{"trigger": "width\tMatlab method", "contents": "width(${1:args})"} ,
		{"trigger": "wilkinson\tMatlab method", "contents": "wilkinson(${1:args})"} ,
		{"trigger": "winopen\tMatlab method", "contents": "winopen(${1:args})"} ,
		{"trigger": "winqueryreg\tMatlab method", "contents": "winqueryreg(${1:args})"} ,
		{"trigger": "workspace\tMatlab method", "contents": "workspace(${1:args})"} ,
		{"trigger": "write\tMatlab method", "contents": "write(${1:args})"} ,
		{"trigger": "writeChecksum\tMatlab method", "contents": "writeChecksum(${1:args})"} ,
		{"trigger": "writeCol\tMatlab method", "contents": "writeCol(${1:args})"} ,
		{"trigger": "writeComment\tMatlab method", "contents": "writeComment(${1:args})"} ,
		{"trigger": "writeDate\tMatlab method", "contents": "writeDate(${1:args})"} ,
		{"trigger": "writeHistory\tMatlab method", "contents": "writeHistory(${1:args})"} ,
		{"trigger": "writeImg\tMatlab method", "contents": "writeImg(${1:args})"} ,
		{"trigger": "writeKey\tMatlab method", "contents": "writeKey(${1:args})"} ,
		{"trigger": "writeKeyUnit\tMatlab method", "contents": "writeKeyUnit(${1:args})"} ,
		{"trigger": "writeVideo\tMatlab method", "contents": "writeVideo(${1:args})"} ,
		{"trigger": "writetable\tMatlab method", "contents": "writetable(${1:args})"} ,
		{"trigger": "xlabel\tMatlab method", "contents": "xlabel(${1:args})"} ,
		{"trigger": "xlim\tMatlab method", "contents": "xlim(${1:args})"} ,
		{"trigger": "xlsfinfo\tMatlab method", "contents": "xlsfinfo(${1:args})"} ,
		{"trigger": "xlsread\tMatlab method", "contents": "xlsread(${1:args})"} ,
		{"trigger": "xlswrite\tMatlab method", "contents": "xlswrite(${1:args})"} ,
		{"trigger": "xmlread\tMatlab method", "contents": "xmlread(${1:args})"} ,
		{"trigger": "xmlwrite\tMatlab method", "contents": "xmlwrite(${1:args})"} ,
		{"trigger": "xor\tMatlab method", "contents": "xor(${1:args})"} ,
		{"trigger": "xslt\tMatlab method", "contents": "xslt(${1:args})"} ,
		{"trigger": "year\tMatlab method", "contents": "year(${1:args})"} ,
		{"trigger": "years\tMatlab method", "contents": "years(${1:args})"} ,
		{"trigger": "ylabel\tMatlab method", "contents": "ylabel(${1:args})"} ,
		{"trigger": "ylim\tMatlab method", "contents": "ylim(${1:args})"} ,
		{"trigger": "ymd\tMatlab method", "contents": "ymd(${1:args})"} ,
		{"trigger": "yyyymmdd\tMatlab method", "contents": "yyyymmdd(${1:args})"} ,
		{"trigger": "zeros\tMatlab method", "contents": "zeros(${1:args})"} ,
		{"trigger": "zip\tMatlab method", "contents": "zip(${1:args})"} ,
		{"trigger": "zlabel\tMatlab method", "contents": "zlabel(${1:args})"} ,
		{"trigger": "zlim\tMatlab method", "contents": "zlim(${1:args})"} ,
		{"trigger": "zoom\tMatlab method", "contents": "zoom(${1:args})"} ,

	]
}
{
	"scope": "source.matlab, source.m",
	"completions":
	[
		{"trigger": "continueFcn\tSimevents method", "contents": "continueFcn(${1:args})"} ,
		{"trigger": "entityAdvance\tSimevents method", "contents": "entityAdvance(${1:args})"} ,
		{"trigger": "entityCombine\tSimevents method", "contents": "entityCombine(${1:args})"} ,
		{"trigger": "entityDestroy\tSimevents method", "contents": "entityDestroy(${1:args})"} ,
		{"trigger": "entityGenerate\tSimevents method", "contents": "entityGenerate(${1:args})"} ,
		{"trigger": "entityQueue\tSimevents method", "contents": "entityQueue(${1:args})"} ,
		{"trigger": "entityReplicate\tSimevents method", "contents": "entityReplicate(${1:args})"} ,
		{"trigger": "entitySplit\tSimevents method", "contents": "entitySplit(${1:args})"} ,
		{"trigger": "eventCancel\tSimevents method", "contents": "eventCancel(${1:args})"} ,
		{"trigger": "eventExecute\tSimevents method", "contents": "eventExecute(${1:args})"} ,
		{"trigger": "eventSchedule\tSimevents method", "contents": "eventSchedule(${1:args})"} ,
		{"trigger": "getBlocksToObserve\tSimevents method", "contents": "getBlocksToObserve(${1:args})"} ,
		{"trigger": "getPace\tSimevents method", "contents": "getPace(${1:args})"} ,
		{"trigger": "initialize\tSimevents method", "contents": "initialize(${1:args})"} ,
		{"trigger": "pauseFcn\tSimevents method", "contents": "pauseFcn(${1:args})"} ,
		{"trigger": "se_getdbopts\tSimevents method", "contents": "se_getdbopts(${1:args})"} ,
		{"trigger": "se_getseeds\tSimevents method", "contents": "se_getseeds(${1:args})"} ,
		{"trigger": "se_randomizeseeds\tSimevents method", "contents": "se_randomizeseeds(${1:args})"} ,
		{"trigger": "se_setseeds\tSimevents method", "contents": "se_setseeds(${1:args})"} ,
		{"trigger": "sedb.animate\tSimevents method", "contents": "sedb.animate(${1:args})"} ,
		{"trigger": "sedb.bdelete\tSimevents method", "contents": "sedb.bdelete(${1:args})"} ,
		{"trigger": "sedb.blkbreak\tSimevents method", "contents": "sedb.blkbreak(${1:args})"} ,
		{"trigger": "sedb.blkinfo\tSimevents method", "contents": "sedb.blkinfo(${1:args})"} ,
		{"trigger": "sedb.blklist\tSimevents method", "contents": "sedb.blklist(${1:args})"} ,
		{"trigger": "sedb.breakpoints\tSimevents method", "contents": "sedb.breakpoints(${1:args})"} ,
		{"trigger": "sedb.cont\tSimevents method", "contents": "sedb.cont(${1:args})"} ,
		{"trigger": "sedb.currentop\tSimevents method", "contents": "sedb.currentop(${1:args})"} ,
		{"trigger": "sedb.detail\tSimevents method", "contents": "sedb.detail(${1:args})"} ,
		{"trigger": "sedb.disable\tSimevents method", "contents": "sedb.disable(${1:args})"} ,
		{"trigger": "sedb.enable\tSimevents method", "contents": "sedb.enable(${1:args})"} ,
		{"trigger": "sedb.enbreak\tSimevents method", "contents": "sedb.enbreak(${1:args})"} ,
		{"trigger": "sedb.eninfo\tSimevents method", "contents": "sedb.eninfo(${1:args})"} ,
		{"trigger": "sedb.evbreak\tSimevents method", "contents": "sedb.evbreak(${1:args})"} ,
		{"trigger": "sedb.evcal\tSimevents method", "contents": "sedb.evcal(${1:args})"} ,
		{"trigger": "sedb.evinfo\tSimevents method", "contents": "sedb.evinfo(${1:args})"} ,
		{"trigger": "sedb.gceb\tSimevents method", "contents": "sedb.gceb(${1:args})"} ,
		{"trigger": "sedb.gcebid\tSimevents method", "contents": "sedb.gcebid(${1:args})"} ,
		{"trigger": "sedb.gcen\tSimevents method", "contents": "sedb.gcen(${1:args})"} ,
		{"trigger": "sedb.gcev\tSimevents method", "contents": "sedb.gcev(${1:args})"} ,
		{"trigger": "sedb.quit\tSimevents method", "contents": "sedb.quit(${1:args})"} ,
		{"trigger": "sedb.runtoend\tSimevents method", "contents": "sedb.runtoend(${1:args})"} ,
		{"trigger": "sedb.simtime\tSimevents method", "contents": "sedb.simtime(${1:args})"} ,
		{"trigger": "sedb.step\tSimevents method", "contents": "sedb.step(${1:args})"} ,
		{"trigger": "sedb.tbreak\tSimevents method", "contents": "sedb.tbreak(${1:args})"} ,
		{"trigger": "sedebug\tSimevents method", "contents": "sedebug(${1:args})"} ,
		{"trigger": "simevents\tSimevents method", "contents": "simevents(${1:args})"} ,
		{"trigger": "simevents.CustomObserverInterface\tSimevents method", "contents": "simevents.CustomObserverInterface(${1:args})"} ,
		{"trigger": "simevents.connectObserver\tSimevents method", "contents": "simevents.connectObserver(${1:args})"} ,
		{"trigger": "simevents.disconnectObserver\tSimevents method", "contents": "simevents.disconnectObserver(${1:args})"} ,
		{"trigger": "simeventslib\tSimevents method", "contents": "simeventslib(${1:args})"} ,
		{"trigger": "terminate\tSimevents method", "contents": "terminate(${1:args})"} ,

	]
}
{
	"scope": "source.matlab, source.m",
	"completions":
	[
		{"trigger": "ModelAdvisor.Preferences\tSimulink method", "contents": "ModelAdvisor.Preferences(${1:args})"} ,
		{"trigger": "Simulink.AliasType\tSimulink method", "contents": "Simulink.AliasType(${1:args})"} ,
		{"trigger": "Simulink.Annotation\tSimulink method", "contents": "Simulink.Annotation(${1:args})"} ,
		{"trigger": "Simulink.Block.getSampleTimes\tSimulink method", "contents": "Simulink.Block.getSampleTimes(${1:args})"} ,
		{"trigger": "Simulink.BlockCompDworkData\tSimulink method", "contents": "Simulink.BlockCompDworkData(${1:args})"} ,
		{"trigger": "Simulink.BlockCompInputPortData\tSimulink method", "contents": "Simulink.BlockCompInputPortData(${1:args})"} ,
		{"trigger": "Simulink.BlockCompOutputPortData\tSimulink method", "contents": "Simulink.BlockCompOutputPortData(${1:args})"} ,
		{"trigger": "Simulink.BlockData\tSimulink method", "contents": "Simulink.BlockData(${1:args})"} ,
		{"trigger": "Simulink.BlockDiagram.addBusToVector\tSimulink method", "contents": "Simulink.BlockDiagram.addBusToVector(${1:args})"} ,
		{"trigger": "Simulink.BlockDiagram.buildRapidAcceleratorTarget\tSimulink method", "contents": "Simulink.BlockDiagram.buildRapidAcceleratorTarget(${1:args})"} ,
		{"trigger": "Simulink.BlockDiagram.copyContentsToSubSystem\tSimulink method", "contents": "Simulink.BlockDiagram.copyContentsToSubSystem(${1:args})"} ,
		{"trigger": "Simulink.BlockDiagram.createSubSystem\tSimulink method", "contents": "Simulink.BlockDiagram.createSubSystem(${1:args})"} ,
		{"trigger": "Simulink.BlockDiagram.deleteContents\tSimulink method", "contents": "Simulink.BlockDiagram.deleteContents(${1:args})"} ,
		{"trigger": "Simulink.BlockDiagram.expandSubsystem\tSimulink method", "contents": "Simulink.BlockDiagram.expandSubsystem(${1:args})"} ,
		{"trigger": "Simulink.BlockDiagram.getChecksum\tSimulink method", "contents": "Simulink.BlockDiagram.getChecksum(${1:args})"} ,
		{"trigger": "Simulink.BlockDiagram.getInitialState\tSimulink method", "contents": "Simulink.BlockDiagram.getInitialState(${1:args})"} ,
		{"trigger": "Simulink.BlockDiagram.getSampleTimes\tSimulink method", "contents": "Simulink.BlockDiagram.getSampleTimes(${1:args})"} ,
		{"trigger": "Simulink.BlockDiagram.loadActiveConfigSet\tSimulink method", "contents": "Simulink.BlockDiagram.loadActiveConfigSet(${1:args})"} ,
		{"trigger": "Simulink.BlockDiagram.saveActiveConfigSet\tSimulink method", "contents": "Simulink.BlockDiagram.saveActiveConfigSet(${1:args})"} ,
		{"trigger": "Simulink.BlockPath\tSimulink method", "contents": "Simulink.BlockPath(${1:args})"} ,
		{"trigger": "Simulink.BlockPortData\tSimulink method", "contents": "Simulink.BlockPortData(${1:args})"} ,
		{"trigger": "Simulink.BlockPreCompInputPortData\tSimulink method", "contents": "Simulink.BlockPreCompInputPortData(${1:args})"} ,
		{"trigger": "Simulink.BlockPreCompOutputPortData\tSimulink method", "contents": "Simulink.BlockPreCompOutputPortData(${1:args})"} ,
		{"trigger": "Simulink.Bus\tSimulink method", "contents": "Simulink.Bus(${1:args})"} ,
		{"trigger": "Simulink.Bus.cellToObject\tSimulink method", "contents": "Simulink.Bus.cellToObject(${1:args})"} ,
		{"trigger": "Simulink.Bus.createMATLABStruct\tSimulink method", "contents": "Simulink.Bus.createMATLABStruct(${1:args})"} ,
		{"trigger": "Simulink.Bus.createObject\tSimulink method", "contents": "Simulink.Bus.createObject(${1:args})"} ,
		{"trigger": "Simulink.Bus.objectToCell\tSimulink method", "contents": "Simulink.Bus.objectToCell(${1:args})"} ,
		{"trigger": "Simulink.Bus.save\tSimulink method", "contents": "Simulink.Bus.save(${1:args})"} ,
		{"trigger": "Simulink.BusElement\tSimulink method", "contents": "Simulink.BusElement(${1:args})"} ,
		{"trigger": "Simulink.CoderInfo\tSimulink method", "contents": "Simulink.CoderInfo(${1:args})"} ,
		{"trigger": "Simulink.ConfigSet\tSimulink method", "contents": "Simulink.ConfigSet(${1:args})"} ,
		{"trigger": "Simulink.ConfigSetRef\tSimulink method", "contents": "Simulink.ConfigSetRef(${1:args})"} ,
		{"trigger": "Simulink.DualScaledParameter\tSimulink method", "contents": "Simulink.DualScaledParameter(${1:args})"} ,
		{"trigger": "Simulink.GlobalDataTransfer\tSimulink method", "contents": "Simulink.GlobalDataTransfer(${1:args})"} ,
		{"trigger": "Simulink.MDLInfo\tSimulink method", "contents": "Simulink.MDLInfo(${1:args})"} ,
		{"trigger": "Simulink.MDLInfo.getDescription\tSimulink method", "contents": "Simulink.MDLInfo.getDescription(${1:args})"} ,
		{"trigger": "Simulink.MDLInfo.getMetadata\tSimulink method", "contents": "Simulink.MDLInfo.getMetadata(${1:args})"} ,
		{"trigger": "Simulink.MSFcnRunTimeBlock\tSimulink method", "contents": "Simulink.MSFcnRunTimeBlock(${1:args})"} ,
		{"trigger": "Simulink.Mask\tSimulink method", "contents": "Simulink.Mask(${1:args})"} ,
		{"trigger": "Simulink.MaskParameter\tSimulink method", "contents": "Simulink.MaskParameter(${1:args})"} ,
		{"trigger": "Simulink.ModelAdvisor\tSimulink method", "contents": "Simulink.ModelAdvisor(${1:args})"} ,
		{"trigger": "Simulink.ModelDataLogs\tSimulink method", "contents": "Simulink.ModelDataLogs(${1:args})"} ,
		{"trigger": "Simulink.ModelDataLogs.convertToDataset\tSimulink method", "contents": "Simulink.ModelDataLogs.convertToDataset(${1:args})"} ,
		{"trigger": "Simulink.ModelWorkspace\tSimulink method", "contents": "Simulink.ModelWorkspace(${1:args})"} ,
		{"trigger": "Simulink.NumericType\tSimulink method", "contents": "Simulink.NumericType(${1:args})"} ,
		{"trigger": "Simulink.Parameter\tSimulink method", "contents": "Simulink.Parameter(${1:args})"} ,
		{"trigger": "Simulink.RunTimeBlock\tSimulink method", "contents": "Simulink.RunTimeBlock(${1:args})"} ,
		{"trigger": "Simulink.SampleTime\tSimulink method", "contents": "Simulink.SampleTime(${1:args})"} ,
		{"trigger": "Simulink.Signal\tSimulink method", "contents": "Simulink.Signal(${1:args})"} ,
		{"trigger": "Simulink.SimState.ModelSimState\tSimulink method", "contents": "Simulink.SimState.ModelSimState(${1:args})"} ,
		{"trigger": "Simulink.SimulationData.BlockPath\tSimulink method", "contents": "Simulink.SimulationData.BlockPath(${1:args})"} ,
		{"trigger": "Simulink.SimulationData.DataStoreMemory\tSimulink method", "contents": "Simulink.SimulationData.DataStoreMemory(${1:args})"} ,
		{"trigger": "Simulink.SimulationData.Dataset\tSimulink method", "contents": "Simulink.SimulationData.Dataset(${1:args})"} ,
		{"trigger": "Simulink.SimulationData.LoggingInfo\tSimulink method", "contents": "Simulink.SimulationData.LoggingInfo(${1:args})"} ,
		{"trigger": "Simulink.SimulationData.ModelLoggingInfo\tSimulink method", "contents": "Simulink.SimulationData.ModelLoggingInfo(${1:args})"} ,
		{"trigger": "Simulink.SimulationData.Signal\tSimulink method", "contents": "Simulink.SimulationData.Signal(${1:args})"} ,
		{"trigger": "Simulink.SimulationData.SignalLoggingInfo\tSimulink method", "contents": "Simulink.SimulationData.SignalLoggingInfo(${1:args})"} ,
		{"trigger": "Simulink.SimulationData.State\tSimulink method", "contents": "Simulink.SimulationData.State(${1:args})"} ,
		{"trigger": "Simulink.SimulationData.createStructOfTimeseries\tSimulink method", "contents": "Simulink.SimulationData.createStructOfTimeseries(${1:args})"} ,
		{"trigger": "Simulink.SimulationData.signalLoggingSelector\tSimulink method", "contents": "Simulink.SimulationData.signalLoggingSelector(${1:args})"} ,
		{"trigger": "Simulink.SimulationData.updateDatasetFormatLogging\tSimulink method", "contents": "Simulink.SimulationData.updateDatasetFormatLogging(${1:args})"} ,
		{"trigger": "Simulink.SimulationMetadata\tSimulink method", "contents": "Simulink.SimulationMetadata(${1:args})"} ,
		{"trigger": "Simulink.SimulationOutput\tSimulink method", "contents": "Simulink.SimulationOutput(${1:args})"} ,
		{"trigger": "Simulink.SubSystem.convertToModelReference\tSimulink method", "contents": "Simulink.SubSystem.convertToModelReference(${1:args})"} ,
		{"trigger": "Simulink.SubSystem.copyContentsToBlockDiagram\tSimulink method", "contents": "Simulink.SubSystem.copyContentsToBlockDiagram(${1:args})"} ,
		{"trigger": "Simulink.SubSystem.deleteContents\tSimulink method", "contents": "Simulink.SubSystem.deleteContents(${1:args})"} ,
		{"trigger": "Simulink.SubSystem.getChecksum\tSimulink method", "contents": "Simulink.SubSystem.getChecksum(${1:args})"} ,
		{"trigger": "Simulink.SubsysDataLogs\tSimulink method", "contents": "Simulink.SubsysDataLogs(${1:args})"} ,
		{"trigger": "Simulink.TimeInfo\tSimulink method", "contents": "Simulink.TimeInfo(${1:args})"} ,
		{"trigger": "Simulink.Timeseries\tSimulink method", "contents": "Simulink.Timeseries(${1:args})"} ,
		{"trigger": "Simulink.TsArray\tSimulink method", "contents": "Simulink.TsArray(${1:args})"} ,
		{"trigger": "Simulink.VariableUsage\tSimulink method", "contents": "Simulink.VariableUsage(${1:args})"} ,
		{"trigger": "Simulink.Variant\tSimulink method", "contents": "Simulink.Variant(${1:args})"} ,
		{"trigger": "Simulink.VariantConfigurationData\tSimulink method", "contents": "Simulink.VariantConfigurationData(${1:args})"} ,
		{"trigger": "Simulink.WorkspaceVar\tSimulink method", "contents": "Simulink.WorkspaceVar(${1:args})"} ,
		{"trigger": "Simulink.architecture.add\tSimulink method", "contents": "Simulink.architecture.add(${1:args})"} ,
		{"trigger": "Simulink.architecture.config\tSimulink method", "contents": "Simulink.architecture.config(${1:args})"} ,
		{"trigger": "Simulink.architecture.delete\tSimulink method", "contents": "Simulink.architecture.delete(${1:args})"} ,
		{"trigger": "Simulink.architecture.find_system\tSimulink method", "contents": "Simulink.architecture.find_system(${1:args})"} ,
		{"trigger": "Simulink.architecture.get_param\tSimulink method", "contents": "Simulink.architecture.get_param(${1:args})"} ,
		{"trigger": "Simulink.architecture.importAndSelect\tSimulink method", "contents": "Simulink.architecture.importAndSelect(${1:args})"} ,
		{"trigger": "Simulink.architecture.profile\tSimulink method", "contents": "Simulink.architecture.profile(${1:args})"} ,
		{"trigger": "Simulink.architecture.register\tSimulink method", "contents": "Simulink.architecture.register(${1:args})"} ,
		{"trigger": "Simulink.architecture.set_param\tSimulink method", "contents": "Simulink.architecture.set_param(${1:args})"} ,
		{"trigger": "Simulink.data.Dictionary\tSimulink method", "contents": "Simulink.data.Dictionary(${1:args})"} ,
		{"trigger": "Simulink.data.assigninGlobal\tSimulink method", "contents": "Simulink.data.assigninGlobal(${1:args})"} ,
		{"trigger": "Simulink.data.dictionary.Entry\tSimulink method", "contents": "Simulink.data.dictionary.Entry(${1:args})"} ,
		{"trigger": "Simulink.data.dictionary.EnumTypeDefinition\tSimulink method", "contents": "Simulink.data.dictionary.EnumTypeDefinition(${1:args})"} ,
		{"trigger": "Simulink.data.dictionary.Section\tSimulink method", "contents": "Simulink.data.dictionary.Section(${1:args})"} ,
		{"trigger": "Simulink.data.dictionary.cleanupWorkerCache\tSimulink method", "contents": "Simulink.data.dictionary.cleanupWorkerCache(${1:args})"} ,
		{"trigger": "Simulink.data.dictionary.create\tSimulink method", "contents": "Simulink.data.dictionary.create(${1:args})"} ,
		{"trigger": "Simulink.data.dictionary.open\tSimulink method", "contents": "Simulink.data.dictionary.open(${1:args})"} ,
		{"trigger": "Simulink.data.dictionary.setupWorkerCache\tSimulink method", "contents": "Simulink.data.dictionary.setupWorkerCache(${1:args})"} ,
		{"trigger": "Simulink.data.evalinGlobal\tSimulink method", "contents": "Simulink.data.evalinGlobal(${1:args})"} ,
		{"trigger": "Simulink.data.existsInGlobal\tSimulink method", "contents": "Simulink.data.existsInGlobal(${1:args})"} ,
		{"trigger": "Simulink.data.getEnumTypeInfo\tSimulink method", "contents": "Simulink.data.getEnumTypeInfo(${1:args})"} ,
		{"trigger": "Simulink.defineIntEnumType\tSimulink method", "contents": "Simulink.defineIntEnumType(${1:args})"} ,
		{"trigger": "Simulink.dialog.Control\tSimulink method", "contents": "Simulink.dialog.Control(${1:args})"} ,
		{"trigger": "Simulink.findVars\tSimulink method", "contents": "Simulink.findVars(${1:args})"} ,
		{"trigger": "Simulink.getFileChecksum\tSimulink method", "contents": "Simulink.getFileChecksum(${1:args})"} ,
		{"trigger": "Simulink.sdi.DiffRunResult\tSimulink method", "contents": "Simulink.sdi.DiffRunResult(${1:args})"} ,
		{"trigger": "Simulink.sdi.DiffSignalResult\tSimulink method", "contents": "Simulink.sdi.DiffSignalResult(${1:args})"} ,
		{"trigger": "Simulink.sdi.Run\tSimulink method", "contents": "Simulink.sdi.Run(${1:args})"} ,
		{"trigger": "Simulink.sdi.addToRun\tSimulink method", "contents": "Simulink.sdi.addToRun(${1:args})"} ,
		{"trigger": "Simulink.sdi.changeLoggedToStreamed\tSimulink method", "contents": "Simulink.sdi.changeLoggedToStreamed(${1:args})"} ,
		{"trigger": "Simulink.sdi.changeStreamedToLogged\tSimulink method", "contents": "Simulink.sdi.changeStreamedToLogged(${1:args})"} ,
		{"trigger": "Simulink.sdi.clear\tSimulink method", "contents": "Simulink.sdi.clear(${1:args})"} ,
		{"trigger": "Simulink.sdi.close\tSimulink method", "contents": "Simulink.sdi.close(${1:args})"} ,
		{"trigger": "Simulink.sdi.compareRuns\tSimulink method", "contents": "Simulink.sdi.compareRuns(${1:args})"} ,
		{"trigger": "Simulink.sdi.compareSignals\tSimulink method", "contents": "Simulink.sdi.compareSignals(${1:args})"} ,
		{"trigger": "Simulink.sdi.copyRun\tSimulink method", "contents": "Simulink.sdi.copyRun(${1:args})"} ,
		{"trigger": "Simulink.sdi.createRun\tSimulink method", "contents": "Simulink.sdi.createRun(${1:args})"} ,
		{"trigger": "Simulink.sdi.deleteRun\tSimulink method", "contents": "Simulink.sdi.deleteRun(${1:args})"} ,
		{"trigger": "Simulink.sdi.discardDataFromPriorSessions\tSimulink method", "contents": "Simulink.sdi.discardDataFromPriorSessions(${1:args})"} ,
		{"trigger": "Simulink.sdi.getRun\tSimulink method", "contents": "Simulink.sdi.getRun(${1:args})"} ,
		{"trigger": "Simulink.sdi.getRunCount\tSimulink method", "contents": "Simulink.sdi.getRunCount(${1:args})"} ,
		{"trigger": "Simulink.sdi.getRunIDByIndex\tSimulink method", "contents": "Simulink.sdi.getRunIDByIndex(${1:args})"} ,
		{"trigger": "Simulink.sdi.getRunNamingRule\tSimulink method", "contents": "Simulink.sdi.getRunNamingRule(${1:args})"} ,
		{"trigger": "Simulink.sdi.getSignal\tSimulink method", "contents": "Simulink.sdi.getSignal(${1:args})"} ,
		{"trigger": "Simulink.sdi.getSource\tSimulink method", "contents": "Simulink.sdi.getSource(${1:args})"} ,
		{"trigger": "Simulink.sdi.hasDataFromPriorSessions\tSimulink method", "contents": "Simulink.sdi.hasDataFromPriorSessions(${1:args})"} ,
		{"trigger": "Simulink.sdi.importDataFromPriorSessions\tSimulink method", "contents": "Simulink.sdi.importDataFromPriorSessions(${1:args})"} ,
		{"trigger": "Simulink.sdi.isValidRunID\tSimulink method", "contents": "Simulink.sdi.isValidRunID(${1:args})"} ,
		{"trigger": "Simulink.sdi.load\tSimulink method", "contents": "Simulink.sdi.load(${1:args})"} ,
		{"trigger": "Simulink.sdi.markSignalForStreaming\tSimulink method", "contents": "Simulink.sdi.markSignalForStreaming(${1:args})"} ,
		{"trigger": "Simulink.sdi.refresh\tSimulink method", "contents": "Simulink.sdi.refresh(${1:args})"} ,
		{"trigger": "Simulink.sdi.report\tSimulink method", "contents": "Simulink.sdi.report(${1:args})"} ,
		{"trigger": "Simulink.sdi.resetRunNamingRule\tSimulink method", "contents": "Simulink.sdi.resetRunNamingRule(${1:args})"} ,
		{"trigger": "Simulink.sdi.save\tSimulink method", "contents": "Simulink.sdi.save(${1:args})"} ,
		{"trigger": "Simulink.sdi.setRunNamingRule\tSimulink method", "contents": "Simulink.sdi.setRunNamingRule(${1:args})"} ,
		{"trigger": "Simulink.sdi.setRunOverwrite\tSimulink method", "contents": "Simulink.sdi.setRunOverwrite(${1:args})"} ,
		{"trigger": "Simulink.sdi.view\tSimulink method", "contents": "Simulink.sdi.view(${1:args})"} ,
		{"trigger": "addFile\tSimulink method", "contents": "addFile(${1:args})"} ,
		{"trigger": "addFolderIncludingChildFiles\tSimulink method", "contents": "addFolderIncludingChildFiles(${1:args})"} ,
		{"trigger": "addLabel\tSimulink method", "contents": "addLabel(${1:args})"} ,
		{"trigger": "add_block\tSimulink method", "contents": "add_block(${1:args})"} ,
		{"trigger": "add_exec_event_listener\tSimulink method", "contents": "add_exec_event_listener(${1:args})"} ,
		{"trigger": "add_line\tSimulink method", "contents": "add_line(${1:args})"} ,
		{"trigger": "add_param\tSimulink method", "contents": "add_param(${1:args})"} ,
		{"trigger": "addterms\tSimulink method", "contents": "addterms(${1:args})"} ,
		{"trigger": "attachConfigSet\tSimulink method", "contents": "attachConfigSet(${1:args})"} ,
		{"trigger": "attachConfigSetCopy\tSimulink method", "contents": "attachConfigSetCopy(${1:args})"} ,
		{"trigger": "bdIsLibrary\tSimulink method", "contents": "bdIsLibrary(${1:args})"} ,
		{"trigger": "bdIsLoaded\tSimulink method", "contents": "bdIsLoaded(${1:args})"} ,
		{"trigger": "bdclose\tSimulink method", "contents": "bdclose(${1:args})"} ,
		{"trigger": "bdroot\tSimulink method", "contents": "bdroot(${1:args})"} ,
		{"trigger": "close\tSimulink method", "contents": "close(${1:args})"} ,
		{"trigger": "closeDialog\tSimulink method", "contents": "closeDialog(${1:args})"} ,
		{"trigger": "close_system\tSimulink method", "contents": "close_system(${1:args})"} ,
		{"trigger": "coder.BuildConfig\tSimulink method", "contents": "coder.BuildConfig(${1:args})"} ,
		{"trigger": "coder.BuildConfig.getHardwareImplementation\tSimulink method", "contents": "coder.BuildConfig.getHardwareImplementation(${1:args})"} ,
		{"trigger": "coder.BuildConfig.getStdLibInfo\tSimulink method", "contents": "coder.BuildConfig.getStdLibInfo(${1:args})"} ,
		{"trigger": "coder.BuildConfig.getTargetLang\tSimulink method", "contents": "coder.BuildConfig.getTargetLang(${1:args})"} ,
		{"trigger": "coder.BuildConfig.getToolchainInfo\tSimulink method", "contents": "coder.BuildConfig.getToolchainInfo(${1:args})"} ,
		{"trigger": "coder.BuildConfig.isCodeGenTarget\tSimulink method", "contents": "coder.BuildConfig.isCodeGenTarget(${1:args})"} ,
		{"trigger": "coder.BuildConfig.isMatlabHostTarget\tSimulink method", "contents": "coder.BuildConfig.isMatlabHostTarget(${1:args})"} ,
		{"trigger": "coder.ExternalDependency\tSimulink method", "contents": "coder.ExternalDependency(${1:args})"} ,
		{"trigger": "coder.ExternalDependency.getDescriptiveName\tSimulink method", "contents": "coder.ExternalDependency.getDescriptiveName(${1:args})"} ,
		{"trigger": "coder.ExternalDependency.isSupportedContext\tSimulink method", "contents": "coder.ExternalDependency.isSupportedContext(${1:args})"} ,
		{"trigger": "coder.ExternalDependency.updateBuildInfo\tSimulink method", "contents": "coder.ExternalDependency.updateBuildInfo(${1:args})"} ,
		{"trigger": "coder.allowpcode\tSimulink method", "contents": "coder.allowpcode(${1:args})"} ,
		{"trigger": "coder.ceval\tSimulink method", "contents": "coder.ceval(${1:args})"} ,
		{"trigger": "coder.cinclude\tSimulink method", "contents": "coder.cinclude(${1:args})"} ,
		{"trigger": "coder.const\tSimulink method", "contents": "coder.const(${1:args})"} ,
		{"trigger": "coder.cstructname\tSimulink method", "contents": "coder.cstructname(${1:args})"} ,
		{"trigger": "coder.extrinsic\tSimulink method", "contents": "coder.extrinsic(${1:args})"} ,
		{"trigger": "coder.inline\tSimulink method", "contents": "coder.inline(${1:args})"} ,
		{"trigger": "coder.load\tSimulink method", "contents": "coder.load(${1:args})"} ,
		{"trigger": "coder.nullcopy\tSimulink method", "contents": "coder.nullcopy(${1:args})"} ,
		{"trigger": "coder.opaque\tSimulink method", "contents": "coder.opaque(${1:args})"} ,
		{"trigger": "coder.ref\tSimulink method", "contents": "coder.ref(${1:args})"} ,
		{"trigger": "coder.rref\tSimulink method", "contents": "coder.rref(${1:args})"} ,
		{"trigger": "coder.screener\tSimulink method", "contents": "coder.screener(${1:args})"} ,
		{"trigger": "coder.target\tSimulink method", "contents": "coder.target(${1:args})"} ,
		{"trigger": "coder.typeof\tSimulink method", "contents": "coder.typeof(${1:args})"} ,
		{"trigger": "coder.unroll\tSimulink method", "contents": "coder.unroll(${1:args})"} ,
		{"trigger": "coder.updateBuildInfo\tSimulink method", "contents": "coder.updateBuildInfo(${1:args})"} ,
		{"trigger": "coder.varsize\tSimulink method", "contents": "coder.varsize(${1:args})"} ,
		{"trigger": "coder.wref\tSimulink method", "contents": "coder.wref(${1:args})"} ,
		{"trigger": "createCategory\tSimulink method", "contents": "createCategory(${1:args})"} ,
		{"trigger": "createLabel\tSimulink method", "contents": "createLabel(${1:args})"} ,
		{"trigger": "delete_block\tSimulink method", "contents": "delete_block(${1:args})"} ,
		{"trigger": "delete_line\tSimulink method", "contents": "delete_line(${1:args})"} ,
		{"trigger": "delete_param\tSimulink method", "contents": "delete_param(${1:args})"} ,
		{"trigger": "dependencies.fileDependencyAnalysis\tSimulink method", "contents": "dependencies.fileDependencyAnalysis(${1:args})"} ,
		{"trigger": "dependencies.toolboxDependencyAnalysis\tSimulink method", "contents": "dependencies.toolboxDependencyAnalysis(${1:args})"} ,
		{"trigger": "detachConfigSet\tSimulink method", "contents": "detachConfigSet(${1:args})"} ,
		{"trigger": "disableimplicitsignalresolution\tSimulink method", "contents": "disableimplicitsignalresolution(${1:args})"} ,
		{"trigger": "dlinmod\tSimulink method", "contents": "dlinmod(${1:args})"} ,
		{"trigger": "docblock\tSimulink method", "contents": "docblock(${1:args})"} ,
		{"trigger": "enumeration\tSimulink method", "contents": "enumeration(${1:args})"} ,
		{"trigger": "eventData\tSimulink method", "contents": "eventData(${1:args})"} ,
		{"trigger": "export\tSimulink method", "contents": "export(${1:args})"} ,
		{"trigger": "find\tSimulink method", "contents": "find(${1:args})"} ,
		{"trigger": "findCategory\tSimulink method", "contents": "findCategory(${1:args})"} ,
		{"trigger": "findFile\tSimulink method", "contents": "findFile(${1:args})"} ,
		{"trigger": "findLabel\tSimulink method", "contents": "findLabel(${1:args})"} ,
		{"trigger": "find_mdlrefs\tSimulink method", "contents": "find_mdlrefs(${1:args})"} ,
		{"trigger": "find_system\tSimulink method", "contents": "find_system(${1:args})"} ,
		{"trigger": "fixdt\tSimulink method", "contents": "fixdt(${1:args})"} ,
		{"trigger": "fixpt_evenspace_cleanup\tSimulink method", "contents": "fixpt_evenspace_cleanup(${1:args})"} ,
		{"trigger": "fixpt_interp1\tSimulink method", "contents": "fixpt_interp1(${1:args})"} ,
		{"trigger": "fixpt_look1_func_approx\tSimulink method", "contents": "fixpt_look1_func_approx(${1:args})"} ,
		{"trigger": "fixpt_look1_func_plot\tSimulink method", "contents": "fixpt_look1_func_plot(${1:args})"} ,
		{"trigger": "fixpt_set_all\tSimulink method", "contents": "fixpt_set_all(${1:args})"} ,
		{"trigger": "fixptbestexp\tSimulink method", "contents": "fixptbestexp(${1:args})"} ,
		{"trigger": "fixptbestprec\tSimulink method", "contents": "fixptbestprec(${1:args})"} ,
		{"trigger": "float\tSimulink method", "contents": "float(${1:args})"} ,
		{"trigger": "frameedit\tSimulink method", "contents": "frameedit(${1:args})"} ,
		{"trigger": "fxptdlg\tSimulink method", "contents": "fxptdlg(${1:args})"} ,
		{"trigger": "gcb\tSimulink method", "contents": "gcb(${1:args})"} ,
		{"trigger": "gcbh\tSimulink method", "contents": "gcbh(${1:args})"} ,
		{"trigger": "gcs\tSimulink method", "contents": "gcs(${1:args})"} ,
		{"trigger": "get\tSimulink method", "contents": "get(${1:args})"} ,
		{"trigger": "getActiveConfigSet\tSimulink method", "contents": "getActiveConfigSet(${1:args})"} ,
		{"trigger": "getBlockSimState\tSimulink method", "contents": "getBlockSimState(${1:args})"} ,
		{"trigger": "getCallbackAnnotation\tSimulink method", "contents": "getCallbackAnnotation(${1:args})"} ,
		{"trigger": "getConfigSet\tSimulink method", "contents": "getConfigSet(${1:args})"} ,
		{"trigger": "getConfigSets\tSimulink method", "contents": "getConfigSets(${1:args})"} ,
		{"trigger": "getInitialState\tSimulink method", "contents": "getInitialState(${1:args})"} ,
		{"trigger": "getInputString\tSimulink method", "contents": "getInputString(${1:args})"} ,
		{"trigger": "getRootInportMap\tSimulink method", "contents": "getRootInportMap(${1:args})"} ,
		{"trigger": "getSimulinkBlockHandle\tSimulink method", "contents": "getSimulinkBlockHandle(${1:args})"} ,
		{"trigger": "getSlRootInportMap\tSimulink method", "contents": "getSlRootInportMap(${1:args})"} ,
		{"trigger": "getVariable\tSimulink method", "contents": "getVariable(${1:args})"} ,
		{"trigger": "get_param\tSimulink method", "contents": "get_param(${1:args})"} ,
		{"trigger": "getfullname\tSimulink method", "contents": "getfullname(${1:args})"} ,
		{"trigger": "hasVariable\tSimulink method", "contents": "hasVariable(${1:args})"} ,
		{"trigger": "hdllib\tSimulink method", "contents": "hdllib(${1:args})"} ,
		{"trigger": "hilite_system\tSimulink method", "contents": "hilite_system(${1:args})"} ,
		{"trigger": "isLoaded\tSimulink method", "contents": "isLoaded(${1:args})"} ,
		{"trigger": "legacy_code\tSimulink method", "contents": "legacy_code(${1:args})"} ,
		{"trigger": "libinfo\tSimulink method", "contents": "libinfo(${1:args})"} ,
		{"trigger": "linmod\tSimulink method", "contents": "linmod(${1:args})"} ,
		{"trigger": "linmod2\tSimulink method", "contents": "linmod2(${1:args})"} ,
		{"trigger": "linmodv5\tSimulink method", "contents": "linmodv5(${1:args})"} ,
		{"trigger": "load_system\tSimulink method", "contents": "load_system(${1:args})"} ,
		{"trigger": "matlab.System\tSimulink method", "contents": "matlab.System(${1:args})"} ,
		{"trigger": "matlab.io.saveVariablesToScript\tSimulink method", "contents": "matlab.io.saveVariablesToScript(${1:args})"} ,
		{"trigger": "matlab.system.StringSet\tSimulink method", "contents": "matlab.system.StringSet(${1:args})"} ,
		{"trigger": "matlab.system.display.Action\tSimulink method", "contents": "matlab.system.display.Action(${1:args})"} ,
		{"trigger": "matlab.system.display.Header\tSimulink method", "contents": "matlab.system.display.Header(${1:args})"} ,
		{"trigger": "matlab.system.display.Section\tSimulink method", "contents": "matlab.system.display.Section(${1:args})"} ,
		{"trigger": "matlab.system.display.SectionGroup\tSimulink method", "contents": "matlab.system.display.SectionGroup(${1:args})"} ,
		{"trigger": "matlab.system.mixin.CustomIcon\tSimulink method", "contents": "matlab.system.mixin.CustomIcon(${1:args})"} ,
		{"trigger": "matlab.system.mixin.FiniteSource\tSimulink method", "contents": "matlab.system.mixin.FiniteSource(${1:args})"} ,
		{"trigger": "matlab.system.mixin.Nondirect\tSimulink method", "contents": "matlab.system.mixin.Nondirect(${1:args})"} ,
		{"trigger": "matlab.system.mixin.Propagates\tSimulink method", "contents": "matlab.system.mixin.Propagates(${1:args})"} ,
		{"trigger": "model\tSimulink method", "contents": "model(${1:args})"} ,
		{"trigger": "modeladvisor\tSimulink method", "contents": "modeladvisor(${1:args})"} ,
		{"trigger": "new_system\tSimulink method", "contents": "new_system(${1:args})"} ,
		{"trigger": "num2fixpt\tSimulink method", "contents": "num2fixpt(${1:args})"} ,
		{"trigger": "openDialog\tSimulink method", "contents": "openDialog(${1:args})"} ,
		{"trigger": "open_system\tSimulink method", "contents": "open_system(${1:args})"} ,
		{"trigger": "orient\tSimulink method", "contents": "orient(${1:args})"} ,
		{"trigger": "performanceadvisor\tSimulink method", "contents": "performanceadvisor(${1:args})"} ,
		{"trigger": "print\tSimulink method", "contents": "print(${1:args})"} ,
		{"trigger": "reload\tSimulink method", "contents": "reload(${1:args})"} ,
		{"trigger": "removeCategory\tSimulink method", "contents": "removeCategory(${1:args})"} ,
		{"trigger": "removeFile\tSimulink method", "contents": "removeFile(${1:args})"} ,
		{"trigger": "removeLabel\tSimulink method", "contents": "removeLabel(${1:args})"} ,
		{"trigger": "replace_block\tSimulink method", "contents": "replace_block(${1:args})"} ,
		{"trigger": "save_system\tSimulink method", "contents": "save_system(${1:args})"} ,
		{"trigger": "setActiveConfigSet\tSimulink method", "contents": "setActiveConfigSet(${1:args})"} ,
		{"trigger": "setBlockSimState\tSimulink method", "contents": "setBlockSimState(${1:args})"} ,
		{"trigger": "set_param\tSimulink method", "contents": "set_param(${1:args})"} ,
		{"trigger": "sfix\tSimulink method", "contents": "sfix(${1:args})"} ,
		{"trigger": "sfrac\tSimulink method", "contents": "sfrac(${1:args})"} ,
		{"trigger": "signalbuilder\tSimulink method", "contents": "signalbuilder(${1:args})"} ,
		{"trigger": "sim\tSimulink method", "contents": "sim(${1:args})"} ,
		{"trigger": "simplot\tSimulink method", "contents": "simplot(${1:args})"} ,
		{"trigger": "simulink\tSimulink method", "contents": "simulink(${1:args})"} ,
		{"trigger": "simulinkproject\tSimulink method", "contents": "simulinkproject(${1:args})"} ,
		{"trigger": "sint\tSimulink method", "contents": "sint(${1:args})"} ,
		{"trigger": "slCharacterEncoding\tSimulink method", "contents": "slCharacterEncoding(${1:args})"} ,
		{"trigger": "slIsFileChangedOnDisk\tSimulink method", "contents": "slIsFileChangedOnDisk(${1:args})"} ,
		{"trigger": "slbuild\tSimulink method", "contents": "slbuild(${1:args})"} ,
		{"trigger": "sldebug\tSimulink method", "contents": "sldebug(${1:args})"} ,
		{"trigger": "sldiagnostics\tSimulink method", "contents": "sldiagnostics(${1:args})"} ,
		{"trigger": "sldiscmdl\tSimulink method", "contents": "sldiscmdl(${1:args})"} ,
		{"trigger": "slmdldiscui\tSimulink method", "contents": "slmdldiscui(${1:args})"} ,
		{"trigger": "slprofreport\tSimulink method", "contents": "slprofreport(${1:args})"} ,
		{"trigger": "slproject.getCurrentProject\tSimulink method", "contents": "slproject.getCurrentProject(${1:args})"} ,
		{"trigger": "slproject.loadProject\tSimulink method", "contents": "slproject.loadProject(${1:args})"} ,
		{"trigger": "slreplace_mux\tSimulink method", "contents": "slreplace_mux(${1:args})"} ,
		{"trigger": "slupdate\tSimulink method", "contents": "slupdate(${1:args})"} ,
		{"trigger": "start_simulink\tSimulink method", "contents": "start_simulink(${1:args})"} ,
		{"trigger": "trim\tSimulink method", "contents": "trim(${1:args})"} ,
		{"trigger": "tunablevars2parameterobjects\tSimulink method", "contents": "tunablevars2parameterobjects(${1:args})"} ,
		{"trigger": "ufix\tSimulink method", "contents": "ufix(${1:args})"} ,
		{"trigger": "ufrac\tSimulink method", "contents": "ufrac(${1:args})"} ,
		{"trigger": "uint\tSimulink method", "contents": "uint(${1:args})"} ,
		{"trigger": "unpack\tSimulink method", "contents": "unpack(${1:args})"} ,
		{"trigger": "upgradeadvisor\tSimulink method", "contents": "upgradeadvisor(${1:args})"} ,
		{"trigger": "view_mdlrefs\tSimulink method", "contents": "view_mdlrefs(${1:args})"} ,
		{"trigger": "who\tSimulink method", "contents": "who(${1:args})"} ,
		{"trigger": "whos\tSimulink method", "contents": "whos(${1:args})"} ,

	]
}
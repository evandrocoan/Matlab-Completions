{
	"scope": "source.matlab, source.m",
	"completions":
	[
		{"trigger": "EyeScope\tComm method", "contents": "EyeScope(${1:args})"} ,
		{"trigger": "algdeintrlv\tComm method", "contents": "algdeintrlv(${1:args})"} ,
		{"trigger": "algintrlv\tComm method", "contents": "algintrlv(${1:args})"} ,
		{"trigger": "alignsignals\tComm method", "contents": "alignsignals(${1:args})"} ,
		{"trigger": "amdemod\tComm method", "contents": "amdemod(${1:args})"} ,
		{"trigger": "ammod\tComm method", "contents": "ammod(${1:args})"} ,
		{"trigger": "arithdeco\tComm method", "contents": "arithdeco(${1:args})"} ,
		{"trigger": "arithenco\tComm method", "contents": "arithenco(${1:args})"} ,
		{"trigger": "awgn\tComm method", "contents": "awgn(${1:args})"} ,
		{"trigger": "bchdec\tComm method", "contents": "bchdec(${1:args})"} ,
		{"trigger": "bchenc\tComm method", "contents": "bchenc(${1:args})"} ,
		{"trigger": "bchgenpoly\tComm method", "contents": "bchgenpoly(${1:args})"} ,
		{"trigger": "bchnumerr\tComm method", "contents": "bchnumerr(${1:args})"} ,
		{"trigger": "berawgn\tComm method", "contents": "berawgn(${1:args})"} ,
		{"trigger": "bercoding\tComm method", "contents": "bercoding(${1:args})"} ,
		{"trigger": "berconfint\tComm method", "contents": "berconfint(${1:args})"} ,
		{"trigger": "berfading\tComm method", "contents": "berfading(${1:args})"} ,
		{"trigger": "berfit\tComm method", "contents": "berfit(${1:args})"} ,
		{"trigger": "bersync\tComm method", "contents": "bersync(${1:args})"} ,
		{"trigger": "bertool\tComm method", "contents": "bertool(${1:args})"} ,
		{"trigger": "bi2de\tComm method", "contents": "bi2de(${1:args})"} ,
		{"trigger": "bin2gray\tComm method", "contents": "bin2gray(${1:args})"} ,
		{"trigger": "biterr\tComm method", "contents": "biterr(${1:args})"} ,
		{"trigger": "bsc\tComm method", "contents": "bsc(${1:args})"} ,
		{"trigger": "cdma2000ForwardReferenceChannels\tComm method", "contents": "cdma2000ForwardReferenceChannels(${1:args})"} ,
		{"trigger": "cdma2000ForwardWaveformGenerator\tComm method", "contents": "cdma2000ForwardWaveformGenerator(${1:args})"} ,
		{"trigger": "cdma2000ReverseReferenceChannels\tComm method", "contents": "cdma2000ReverseReferenceChannels(${1:args})"} ,
		{"trigger": "cdma2000ReverseWaveformGenerator\tComm method", "contents": "cdma2000ReverseWaveformGenerator(${1:args})"} ,
		{"trigger": "cma\tComm method", "contents": "cma(${1:args})"} ,
		{"trigger": "comm.ACPR\tComm method", "contents": "comm.ACPR(${1:args})"} ,
		{"trigger": "comm.AGC\tComm method", "contents": "comm.AGC(${1:args})"} ,
		{"trigger": "comm.APPDecoder\tComm method", "contents": "comm.APPDecoder(${1:args})"} ,
		{"trigger": "comm.AWGNChannel\tComm method", "contents": "comm.AWGNChannel(${1:args})"} ,
		{"trigger": "comm.AlgebraicDeinterleaver\tComm method", "contents": "comm.AlgebraicDeinterleaver(${1:args})"} ,
		{"trigger": "comm.AlgebraicInterleaver\tComm method", "contents": "comm.AlgebraicInterleaver(${1:args})"} ,
		{"trigger": "comm.BCHDecoder\tComm method", "contents": "comm.BCHDecoder(${1:args})"} ,
		{"trigger": "comm.BCHEncoder\tComm method", "contents": "comm.BCHEncoder(${1:args})"} ,
		{"trigger": "comm.BPSKDemodulator\tComm method", "contents": "comm.BPSKDemodulator(${1:args})"} ,
		{"trigger": "comm.BPSKModulator\tComm method", "contents": "comm.BPSKModulator(${1:args})"} ,
		{"trigger": "comm.BarkerCode\tComm method", "contents": "comm.BarkerCode(${1:args})"} ,
		{"trigger": "comm.BinarySymmetricChannel\tComm method", "contents": "comm.BinarySymmetricChannel(${1:args})"} ,
		{"trigger": "comm.BlockDeinterleaver\tComm method", "contents": "comm.BlockDeinterleaver(${1:args})"} ,
		{"trigger": "comm.BlockInterleaver\tComm method", "contents": "comm.BlockInterleaver(${1:args})"} ,
		{"trigger": "comm.CCDF\tComm method", "contents": "comm.CCDF(${1:args})"} ,
		{"trigger": "comm.CPFSKDemodulator\tComm method", "contents": "comm.CPFSKDemodulator(${1:args})"} ,
		{"trigger": "comm.CPFSKModulator\tComm method", "contents": "comm.CPFSKModulator(${1:args})"} ,
		{"trigger": "comm.CPMCarrierPhaseSynchronizer\tComm method", "contents": "comm.CPMCarrierPhaseSynchronizer(${1:args})"} ,
		{"trigger": "comm.CPMDemodulator\tComm method", "contents": "comm.CPMDemodulator(${1:args})"} ,
		{"trigger": "comm.CPMModulator\tComm method", "contents": "comm.CPMModulator(${1:args})"} ,
		{"trigger": "comm.CRCDetector\tComm method", "contents": "comm.CRCDetector(${1:args})"} ,
		{"trigger": "comm.CRCGenerator\tComm method", "contents": "comm.CRCGenerator(${1:args})"} ,
		{"trigger": "comm.CarrierSynchronizer\tComm method", "contents": "comm.CarrierSynchronizer(${1:args})"} ,
		{"trigger": "comm.CoarseFrequencyCompensator\tComm method", "contents": "comm.CoarseFrequencyCompensator(${1:args})"} ,
		{"trigger": "comm.ConstellationDiagram\tComm method", "contents": "comm.ConstellationDiagram(${1:args})"} ,
		{"trigger": "comm.ConvolutionalDeinterleaver\tComm method", "contents": "comm.ConvolutionalDeinterleaver(${1:args})"} ,
		{"trigger": "comm.ConvolutionalEncoder\tComm method", "contents": "comm.ConvolutionalEncoder(${1:args})"} ,
		{"trigger": "comm.ConvolutionalInterleaver\tComm method", "contents": "comm.ConvolutionalInterleaver(${1:args})"} ,
		{"trigger": "comm.DBPSKDemodulator\tComm method", "contents": "comm.DBPSKDemodulator(${1:args})"} ,
		{"trigger": "comm.DBPSKModulator\tComm method", "contents": "comm.DBPSKModulator(${1:args})"} ,
		{"trigger": "comm.DPSKDemodulator\tComm method", "contents": "comm.DPSKDemodulator(${1:args})"} ,
		{"trigger": "comm.DPSKModulator\tComm method", "contents": "comm.DPSKModulator(${1:args})"} ,
		{"trigger": "comm.DQPSKDemodulator\tComm method", "contents": "comm.DQPSKDemodulator(${1:args})"} ,
		{"trigger": "comm.DQPSKModulator\tComm method", "contents": "comm.DQPSKModulator(${1:args})"} ,
		{"trigger": "comm.Descrambler\tComm method", "contents": "comm.Descrambler(${1:args})"} ,
		{"trigger": "comm.DifferentialDecoder\tComm method", "contents": "comm.DifferentialDecoder(${1:args})"} ,
		{"trigger": "comm.DifferentialEncoder\tComm method", "contents": "comm.DifferentialEncoder(${1:args})"} ,
		{"trigger": "comm.DiscreteTimeVCO\tComm method", "contents": "comm.DiscreteTimeVCO(${1:args})"} ,
		{"trigger": "comm.EVM\tComm method", "contents": "comm.EVM(${1:args})"} ,
		{"trigger": "comm.ErrorRate\tComm method", "contents": "comm.ErrorRate(${1:args})"} ,
		{"trigger": "comm.FMBroadcastDemodulator\tComm method", "contents": "comm.FMBroadcastDemodulator(${1:args})"} ,
		{"trigger": "comm.FMBroadcastModulator\tComm method", "contents": "comm.FMBroadcastModulator(${1:args})"} ,
		{"trigger": "comm.FMDemodulator\tComm method", "contents": "comm.FMDemodulator(${1:args})"} ,
		{"trigger": "comm.FMModulator\tComm method", "contents": "comm.FMModulator(${1:args})"} ,
		{"trigger": "comm.FSKDemodulator\tComm method", "contents": "comm.FSKDemodulator(${1:args})"} ,
		{"trigger": "comm.FSKModulator\tComm method", "contents": "comm.FSKModulator(${1:args})"} ,
		{"trigger": "comm.FrameSynchronizer\tComm method", "contents": "comm.FrameSynchronizer(${1:args})"} ,
		{"trigger": "comm.GMSKDemodulator\tComm method", "contents": "comm.GMSKDemodulator(${1:args})"} ,
		{"trigger": "comm.GMSKModulator\tComm method", "contents": "comm.GMSKModulator(${1:args})"} ,
		{"trigger": "comm.GMSKTimingSynchronizer\tComm method", "contents": "comm.GMSKTimingSynchronizer(${1:args})"} ,
		{"trigger": "comm.GeneralQAMDemodulator\tComm method", "contents": "comm.GeneralQAMDemodulator(${1:args})"} ,
		{"trigger": "comm.GeneralQAMModulator\tComm method", "contents": "comm.GeneralQAMModulator(${1:args})"} ,
		{"trigger": "comm.GeneralQAMTCMDemodulator\tComm method", "contents": "comm.GeneralQAMTCMDemodulator(${1:args})"} ,
		{"trigger": "comm.GeneralQAMTCMModulator\tComm method", "contents": "comm.GeneralQAMTCMModulator(${1:args})"} ,
		{"trigger": "comm.GoldSequence\tComm method", "contents": "comm.GoldSequence(${1:args})"} ,
		{"trigger": "comm.HDLCRCDetector\tComm method", "contents": "comm.HDLCRCDetector(${1:args})"} ,
		{"trigger": "comm.HDLCRCGenerator\tComm method", "contents": "comm.HDLCRCGenerator(${1:args})"} ,
		{"trigger": "comm.HDLRSDecoder\tComm method", "contents": "comm.HDLRSDecoder(${1:args})"} ,
		{"trigger": "comm.HDLRSEncoder\tComm method", "contents": "comm.HDLRSEncoder(${1:args})"} ,
		{"trigger": "comm.HadamardCode\tComm method", "contents": "comm.HadamardCode(${1:args})"} ,
		{"trigger": "comm.HelicalDeinterleaver\tComm method", "contents": "comm.HelicalDeinterleaver(${1:args})"} ,
		{"trigger": "comm.HelicalInterleaver\tComm method", "contents": "comm.HelicalInterleaver(${1:args})"} ,
		{"trigger": "comm.IQImbalanceCompensator\tComm method", "contents": "comm.IQImbalanceCompensator(${1:args})"} ,
		{"trigger": "comm.IntegrateAndDumpFilter\tComm method", "contents": "comm.IntegrateAndDumpFilter(${1:args})"} ,
		{"trigger": "comm.KasamiSequence\tComm method", "contents": "comm.KasamiSequence(${1:args})"} ,
		{"trigger": "comm.LDPCDecoder\tComm method", "contents": "comm.LDPCDecoder(${1:args})"} ,
		{"trigger": "comm.LDPCEncoder\tComm method", "contents": "comm.LDPCEncoder(${1:args})"} ,
		{"trigger": "comm.LTEMIMOChannel\tComm method", "contents": "comm.LTEMIMOChannel(${1:args})"} ,
		{"trigger": "comm.MER\tComm method", "contents": "comm.MER(${1:args})"} ,
		{"trigger": "comm.MIMOChannel\tComm method", "contents": "comm.MIMOChannel(${1:args})"} ,
		{"trigger": "comm.MLSEEqualizer\tComm method", "contents": "comm.MLSEEqualizer(${1:args})"} ,
		{"trigger": "comm.MSKDemodulator\tComm method", "contents": "comm.MSKDemodulator(${1:args})"} ,
		{"trigger": "comm.MSKModulator\tComm method", "contents": "comm.MSKModulator(${1:args})"} ,
		{"trigger": "comm.MSKTimingSynchronizer\tComm method", "contents": "comm.MSKTimingSynchronizer(${1:args})"} ,
		{"trigger": "comm.MatrixDeinterleaver\tComm method", "contents": "comm.MatrixDeinterleaver(${1:args})"} ,
		{"trigger": "comm.MatrixHelicalScanDeinterleaver\tComm method", "contents": "comm.MatrixHelicalScanDeinterleaver(${1:args})"} ,
		{"trigger": "comm.MatrixHelicalScanInterleaver\tComm method", "contents": "comm.MatrixHelicalScanInterleaver(${1:args})"} ,
		{"trigger": "comm.MatrixInterleaver\tComm method", "contents": "comm.MatrixInterleaver(${1:args})"} ,
		{"trigger": "comm.MemorylessNonlinearity\tComm method", "contents": "comm.MemorylessNonlinearity(${1:args})"} ,
		{"trigger": "comm.MultiplexedDeinterleaver\tComm method", "contents": "comm.MultiplexedDeinterleaver(${1:args})"} ,
		{"trigger": "comm.MultiplexedInterleaver\tComm method", "contents": "comm.MultiplexedInterleaver(${1:args})"} ,
		{"trigger": "comm.OFDMDemodulator\tComm method", "contents": "comm.OFDMDemodulator(${1:args})"} ,
		{"trigger": "comm.OFDMModulator\tComm method", "contents": "comm.OFDMModulator(${1:args})"} ,
		{"trigger": "comm.OQPSKDemodulator\tComm method", "contents": "comm.OQPSKDemodulator(${1:args})"} ,
		{"trigger": "comm.OQPSKModulator\tComm method", "contents": "comm.OQPSKModulator(${1:args})"} ,
		{"trigger": "comm.OSTBCCombiner\tComm method", "contents": "comm.OSTBCCombiner(${1:args})"} ,
		{"trigger": "comm.OSTBCEncoder\tComm method", "contents": "comm.OSTBCEncoder(${1:args})"} ,
		{"trigger": "comm.PAMDemodulator\tComm method", "contents": "comm.PAMDemodulator(${1:args})"} ,
		{"trigger": "comm.PAMModulator\tComm method", "contents": "comm.PAMModulator(${1:args})"} ,
		{"trigger": "comm.PNSequence\tComm method", "contents": "comm.PNSequence(${1:args})"} ,
		{"trigger": "comm.PSKCoarseFrequencyEstimator\tComm method", "contents": "comm.PSKCoarseFrequencyEstimator(${1:args})"} ,
		{"trigger": "comm.PSKDemodulator\tComm method", "contents": "comm.PSKDemodulator(${1:args})"} ,
		{"trigger": "comm.PSKModulator\tComm method", "contents": "comm.PSKModulator(${1:args})"} ,
		{"trigger": "comm.PSKTCMDemodulator\tComm method", "contents": "comm.PSKTCMDemodulator(${1:args})"} ,
		{"trigger": "comm.PSKTCMModulator\tComm method", "contents": "comm.PSKTCMModulator(${1:args})"} ,
		{"trigger": "comm.PhaseFrequencyOffset\tComm method", "contents": "comm.PhaseFrequencyOffset(${1:args})"} ,
		{"trigger": "comm.PhaseNoise\tComm method", "contents": "comm.PhaseNoise(${1:args})"} ,
		{"trigger": "comm.QAMCoarseFrequencyEstimator\tComm method", "contents": "comm.QAMCoarseFrequencyEstimator(${1:args})"} ,
		{"trigger": "comm.QPSKDemodulator\tComm method", "contents": "comm.QPSKDemodulator(${1:args})"} ,
		{"trigger": "comm.QPSKModulator\tComm method", "contents": "comm.QPSKModulator(${1:args})"} ,
		{"trigger": "comm.RSDecoder\tComm method", "contents": "comm.RSDecoder(${1:args})"} ,
		{"trigger": "comm.RSEncoder\tComm method", "contents": "comm.RSEncoder(${1:args})"} ,
		{"trigger": "comm.RaisedCosineReceiveFilter\tComm method", "contents": "comm.RaisedCosineReceiveFilter(${1:args})"} ,
		{"trigger": "comm.RaisedCosineTransmitFilter\tComm method", "contents": "comm.RaisedCosineTransmitFilter(${1:args})"} ,
		{"trigger": "comm.RayleighChannel\tComm method", "contents": "comm.RayleighChannel(${1:args})"} ,
		{"trigger": "comm.RectangularQAMDemodulator\tComm method", "contents": "comm.RectangularQAMDemodulator(${1:args})"} ,
		{"trigger": "comm.RectangularQAMModulator\tComm method", "contents": "comm.RectangularQAMModulator(${1:args})"} ,
		{"trigger": "comm.RectangularQAMTCMDemodulator\tComm method", "contents": "comm.RectangularQAMTCMDemodulator(${1:args})"} ,
		{"trigger": "comm.RectangularQAMTCMModulator\tComm method", "contents": "comm.RectangularQAMTCMModulator(${1:args})"} ,
		{"trigger": "comm.RicianChannel\tComm method", "contents": "comm.RicianChannel(${1:args})"} ,
		{"trigger": "comm.Scrambler\tComm method", "contents": "comm.Scrambler(${1:args})"} ,
		{"trigger": "comm.SphereDecoder\tComm method", "contents": "comm.SphereDecoder(${1:args})"} ,
		{"trigger": "comm.SymbolSynchronizer\tComm method", "contents": "comm.SymbolSynchronizer(${1:args})"} ,
		{"trigger": "comm.ThermalNoise\tComm method", "contents": "comm.ThermalNoise(${1:args})"} ,
		{"trigger": "comm.TurboDecoder\tComm method", "contents": "comm.TurboDecoder(${1:args})"} ,
		{"trigger": "comm.TurboEncoder\tComm method", "contents": "comm.TurboEncoder(${1:args})"} ,
		{"trigger": "comm.ViterbiDecoder\tComm method", "contents": "comm.ViterbiDecoder(${1:args})"} ,
		{"trigger": "comm.WalshCode\tComm method", "contents": "comm.WalshCode(${1:args})"} ,
		{"trigger": "comm.gpu.AWGNChannel\tComm method", "contents": "comm.gpu.AWGNChannel(${1:args})"} ,
		{"trigger": "comm.gpu.BlockDeinterleaver\tComm method", "contents": "comm.gpu.BlockDeinterleaver(${1:args})"} ,
		{"trigger": "comm.gpu.BlockInterleaver\tComm method", "contents": "comm.gpu.BlockInterleaver(${1:args})"} ,
		{"trigger": "comm.gpu.ConvolutionalDeinterleaver\tComm method", "contents": "comm.gpu.ConvolutionalDeinterleaver(${1:args})"} ,
		{"trigger": "comm.gpu.ConvolutionalEncoder\tComm method", "contents": "comm.gpu.ConvolutionalEncoder(${1:args})"} ,
		{"trigger": "comm.gpu.ConvolutionalInterleaver\tComm method", "contents": "comm.gpu.ConvolutionalInterleaver(${1:args})"} ,
		{"trigger": "comm.gpu.LDPCDecoder\tComm method", "contents": "comm.gpu.LDPCDecoder(${1:args})"} ,
		{"trigger": "comm.gpu.PSKDemodulator\tComm method", "contents": "comm.gpu.PSKDemodulator(${1:args})"} ,
		{"trigger": "comm.gpu.PSKModulator\tComm method", "contents": "comm.gpu.PSKModulator(${1:args})"} ,
		{"trigger": "comm.gpu.TurboDecoder\tComm method", "contents": "comm.gpu.TurboDecoder(${1:args})"} ,
		{"trigger": "comm.gpu.ViterbiDecoder\tComm method", "contents": "comm.gpu.ViterbiDecoder(${1:args})"} ,
		{"trigger": "commscope\tComm method", "contents": "commscope(${1:args})"} ,
		{"trigger": "commscope.ScatterPlot\tComm method", "contents": "commscope.ScatterPlot(${1:args})"} ,
		{"trigger": "commscope.eyediagram\tComm method", "contents": "commscope.eyediagram(${1:args})"} ,
		{"trigger": "commsrc.combinedjitter\tComm method", "contents": "commsrc.combinedjitter(${1:args})"} ,
		{"trigger": "commsrc.pattern\tComm method", "contents": "commsrc.pattern(${1:args})"} ,
		{"trigger": "commsrc.pn\tComm method", "contents": "commsrc.pn(${1:args})"} ,
		{"trigger": "commtest.ErrorRate\tComm method", "contents": "commtest.ErrorRate(${1:args})"} ,
		{"trigger": "compand\tComm method", "contents": "compand(${1:args})"} ,
		{"trigger": "convdeintrlv\tComm method", "contents": "convdeintrlv(${1:args})"} ,
		{"trigger": "convenc\tComm method", "contents": "convenc(${1:args})"} ,
		{"trigger": "convintrlv\tComm method", "contents": "convintrlv(${1:args})"} ,
		{"trigger": "convmtx\tComm method", "contents": "convmtx(${1:args})"} ,
		{"trigger": "cosets\tComm method", "contents": "cosets(${1:args})"} ,
		{"trigger": "cyclgen\tComm method", "contents": "cyclgen(${1:args})"} ,
		{"trigger": "cyclpoly\tComm method", "contents": "cyclpoly(${1:args})"} ,
		{"trigger": "de2bi\tComm method", "contents": "de2bi(${1:args})"} ,
		{"trigger": "decode\tComm method", "contents": "decode(${1:args})"} ,
		{"trigger": "deintrlv\tComm method", "contents": "deintrlv(${1:args})"} ,
		{"trigger": "dfe\tComm method", "contents": "dfe(${1:args})"} ,
		{"trigger": "dftmtx\tComm method", "contents": "dftmtx(${1:args})"} ,
		{"trigger": "distspec\tComm method", "contents": "distspec(${1:args})"} ,
		{"trigger": "doppler\tComm method", "contents": "doppler(${1:args})"} ,
		{"trigger": "doppler.ajakes\tComm method", "contents": "doppler.ajakes(${1:args})"} ,
		{"trigger": "doppler.bell\tComm method", "contents": "doppler.bell(${1:args})"} ,
		{"trigger": "doppler.bigaussian\tComm method", "contents": "doppler.bigaussian(${1:args})"} ,
		{"trigger": "doppler.flat\tComm method", "contents": "doppler.flat(${1:args})"} ,
		{"trigger": "doppler.gaussian\tComm method", "contents": "doppler.gaussian(${1:args})"} ,
		{"trigger": "doppler.jakes\tComm method", "contents": "doppler.jakes(${1:args})"} ,
		{"trigger": "doppler.rjakes\tComm method", "contents": "doppler.rjakes(${1:args})"} ,
		{"trigger": "doppler.rounded\tComm method", "contents": "doppler.rounded(${1:args})"} ,
		{"trigger": "dpcmdeco\tComm method", "contents": "dpcmdeco(${1:args})"} ,
		{"trigger": "dpcmenco\tComm method", "contents": "dpcmenco(${1:args})"} ,
		{"trigger": "dpcmopt\tComm method", "contents": "dpcmopt(${1:args})"} ,
		{"trigger": "dpskdemod\tComm method", "contents": "dpskdemod(${1:args})"} ,
		{"trigger": "dpskmod\tComm method", "contents": "dpskmod(${1:args})"} ,
		{"trigger": "dsp.ArrayPlot\tComm method", "contents": "dsp.ArrayPlot(${1:args})"} ,
		{"trigger": "dsp.SpectrumAnalyzer\tComm method", "contents": "dsp.SpectrumAnalyzer(${1:args})"} ,
		{"trigger": "dsp.TimeScope\tComm method", "contents": "dsp.TimeScope(${1:args})"} ,
		{"trigger": "dvbs2ldpc\tComm method", "contents": "dvbs2ldpc(${1:args})"} ,
		{"trigger": "encode\tComm method", "contents": "encode(${1:args})"} ,
		{"trigger": "equalize\tComm method", "contents": "equalize(${1:args})"} ,
		{"trigger": "evdoForwardReferenceChannels\tComm method", "contents": "evdoForwardReferenceChannels(${1:args})"} ,
		{"trigger": "evdoForwardWaveformGenerator\tComm method", "contents": "evdoForwardWaveformGenerator(${1:args})"} ,
		{"trigger": "evdoReverseReferenceChannels\tComm method", "contents": "evdoReverseReferenceChannels(${1:args})"} ,
		{"trigger": "evdoReverseWaveformGenerator\tComm method", "contents": "evdoReverseWaveformGenerator(${1:args})"} ,
		{"trigger": "eyediagram\tComm method", "contents": "eyediagram(${1:args})"} ,
		{"trigger": "filter\tComm method", "contents": "filter(${1:args})"} ,
		{"trigger": "finddelay\tComm method", "contents": "finddelay(${1:args})"} ,
		{"trigger": "fmdemod\tComm method", "contents": "fmdemod(${1:args})"} ,
		{"trigger": "fmmod\tComm method", "contents": "fmmod(${1:args})"} ,
		{"trigger": "fskdemod\tComm method", "contents": "fskdemod(${1:args})"} ,
		{"trigger": "fskmod\tComm method", "contents": "fskmod(${1:args})"} ,
		{"trigger": "gaussdesign\tComm method", "contents": "gaussdesign(${1:args})"} ,
		{"trigger": "gen2par\tComm method", "contents": "gen2par(${1:args})"} ,
		{"trigger": "genqamdemod\tComm method", "contents": "genqamdemod(${1:args})"} ,
		{"trigger": "genqammod\tComm method", "contents": "genqammod(${1:args})"} ,
		{"trigger": "gf\tComm method", "contents": "gf(${1:args})"} ,
		{"trigger": "gfadd\tComm method", "contents": "gfadd(${1:args})"} ,
		{"trigger": "gfconv\tComm method", "contents": "gfconv(${1:args})"} ,
		{"trigger": "gfcosets\tComm method", "contents": "gfcosets(${1:args})"} ,
		{"trigger": "gfdeconv\tComm method", "contents": "gfdeconv(${1:args})"} ,
		{"trigger": "gfdiv\tComm method", "contents": "gfdiv(${1:args})"} ,
		{"trigger": "gffilter\tComm method", "contents": "gffilter(${1:args})"} ,
		{"trigger": "gflineq\tComm method", "contents": "gflineq(${1:args})"} ,
		{"trigger": "gfminpol\tComm method", "contents": "gfminpol(${1:args})"} ,
		{"trigger": "gfmul\tComm method", "contents": "gfmul(${1:args})"} ,
		{"trigger": "gfpretty\tComm method", "contents": "gfpretty(${1:args})"} ,
		{"trigger": "gfprimck\tComm method", "contents": "gfprimck(${1:args})"} ,
		{"trigger": "gfprimdf\tComm method", "contents": "gfprimdf(${1:args})"} ,
		{"trigger": "gfprimfd\tComm method", "contents": "gfprimfd(${1:args})"} ,
		{"trigger": "gfrank\tComm method", "contents": "gfrank(${1:args})"} ,
		{"trigger": "gfrepcov\tComm method", "contents": "gfrepcov(${1:args})"} ,
		{"trigger": "gfroots\tComm method", "contents": "gfroots(${1:args})"} ,
		{"trigger": "gfsub\tComm method", "contents": "gfsub(${1:args})"} ,
		{"trigger": "gftable\tComm method", "contents": "gftable(${1:args})"} ,
		{"trigger": "gftrunc\tComm method", "contents": "gftrunc(${1:args})"} ,
		{"trigger": "gftuple\tComm method", "contents": "gftuple(${1:args})"} ,
		{"trigger": "gfweight\tComm method", "contents": "gfweight(${1:args})"} ,
		{"trigger": "gray2bin\tComm method", "contents": "gray2bin(${1:args})"} ,
		{"trigger": "hammgen\tComm method", "contents": "hammgen(${1:args})"} ,
		{"trigger": "heldeintrlv\tComm method", "contents": "heldeintrlv(${1:args})"} ,
		{"trigger": "helintrlv\tComm method", "contents": "helintrlv(${1:args})"} ,
		{"trigger": "helscandeintrlv\tComm method", "contents": "helscandeintrlv(${1:args})"} ,
		{"trigger": "helscanintrlv\tComm method", "contents": "helscanintrlv(${1:args})"} ,
		{"trigger": "hex2poly\tComm method", "contents": "hex2poly(${1:args})"} ,
		{"trigger": "huffmandeco\tComm method", "contents": "huffmandeco(${1:args})"} ,
		{"trigger": "huffmandict\tComm method", "contents": "huffmandict(${1:args})"} ,
		{"trigger": "huffmanenco\tComm method", "contents": "huffmanenco(${1:args})"} ,
		{"trigger": "intdump\tComm method", "contents": "intdump(${1:args})"} ,
		{"trigger": "intrlv\tComm method", "contents": "intrlv(${1:args})"} ,
		{"trigger": "iqcoef2imbal\tComm method", "contents": "iqcoef2imbal(${1:args})"} ,
		{"trigger": "iqimbal2coef\tComm method", "contents": "iqimbal2coef(${1:args})"} ,
		{"trigger": "iscatastrophic\tComm method", "contents": "iscatastrophic(${1:args})"} ,
		{"trigger": "isprimitive\tComm method", "contents": "isprimitive(${1:args})"} ,
		{"trigger": "istrellis\tComm method", "contents": "istrellis(${1:args})"} ,
		{"trigger": "legacychannelsim\tComm method", "contents": "legacychannelsim(${1:args})"} ,
		{"trigger": "lineareq\tComm method", "contents": "lineareq(${1:args})"} ,
		{"trigger": "lloyds\tComm method", "contents": "lloyds(${1:args})"} ,
		{"trigger": "lms\tComm method", "contents": "lms(${1:args})"} ,
		{"trigger": "lteZadoffChuSeq\tComm method", "contents": "lteZadoffChuSeq(${1:args})"} ,
		{"trigger": "marcumq\tComm method", "contents": "marcumq(${1:args})"} ,
		{"trigger": "mask2shift\tComm method", "contents": "mask2shift(${1:args})"} ,
		{"trigger": "matdeintrlv\tComm method", "contents": "matdeintrlv(${1:args})"} ,
		{"trigger": "matintrlv\tComm method", "contents": "matintrlv(${1:args})"} ,
		{"trigger": "minpol\tComm method", "contents": "minpol(${1:args})"} ,
		{"trigger": "mlseeq\tComm method", "contents": "mlseeq(${1:args})"} ,
		{"trigger": "modnorm\tComm method", "contents": "modnorm(${1:args})"} ,
		{"trigger": "muxdeintrlv\tComm method", "contents": "muxdeintrlv(${1:args})"} ,
		{"trigger": "muxintrlv\tComm method", "contents": "muxintrlv(${1:args})"} ,
		{"trigger": "noisebw\tComm method", "contents": "noisebw(${1:args})"} ,
		{"trigger": "normlms\tComm method", "contents": "normlms(${1:args})"} ,
		{"trigger": "oct2dec\tComm method", "contents": "oct2dec(${1:args})"} ,
		{"trigger": "oct2poly\tComm method", "contents": "oct2poly(${1:args})"} ,
		{"trigger": "oqpskdemod\tComm method", "contents": "oqpskdemod(${1:args})"} ,
		{"trigger": "oqpskmod\tComm method", "contents": "oqpskmod(${1:args})"} ,
		{"trigger": "pamdemod\tComm method", "contents": "pamdemod(${1:args})"} ,
		{"trigger": "pammod\tComm method", "contents": "pammod(${1:args})"} ,
		{"trigger": "plot\tComm method", "contents": "plot(${1:args})"} ,
		{"trigger": "plotPhaseNoiseFilter\tComm method", "contents": "plotPhaseNoiseFilter(${1:args})"} ,
		{"trigger": "pmdemod\tComm method", "contents": "pmdemod(${1:args})"} ,
		{"trigger": "pmmod\tComm method", "contents": "pmmod(${1:args})"} ,
		{"trigger": "poly2trellis\tComm method", "contents": "poly2trellis(${1:args})"} ,
		{"trigger": "primpoly\tComm method", "contents": "primpoly(${1:args})"} ,
		{"trigger": "pskdemod\tComm method", "contents": "pskdemod(${1:args})"} ,
		{"trigger": "pskmod\tComm method", "contents": "pskmod(${1:args})"} ,
		{"trigger": "qamdemod\tComm method", "contents": "qamdemod(${1:args})"} ,
		{"trigger": "qammod\tComm method", "contents": "qammod(${1:args})"} ,
		{"trigger": "qfunc\tComm method", "contents": "qfunc(${1:args})"} ,
		{"trigger": "qfuncinv\tComm method", "contents": "qfuncinv(${1:args})"} ,
		{"trigger": "quantiz\tComm method", "contents": "quantiz(${1:args})"} ,
		{"trigger": "randdeintrlv\tComm method", "contents": "randdeintrlv(${1:args})"} ,
		{"trigger": "randerr\tComm method", "contents": "randerr(${1:args})"} ,
		{"trigger": "randintrlv\tComm method", "contents": "randintrlv(${1:args})"} ,
		{"trigger": "randsrc\tComm method", "contents": "randsrc(${1:args})"} ,
		{"trigger": "rayleighchan\tComm method", "contents": "rayleighchan(${1:args})"} ,
		{"trigger": "rcosdesign\tComm method", "contents": "rcosdesign(${1:args})"} ,
		{"trigger": "rectpulse\tComm method", "contents": "rectpulse(${1:args})"} ,
		{"trigger": "reset\tComm method", "contents": "reset(${1:args})"} ,
		{"trigger": "ricianchan\tComm method", "contents": "ricianchan(${1:args})"} ,
		{"trigger": "rls\tComm method", "contents": "rls(${1:args})"} ,
		{"trigger": "rsdec\tComm method", "contents": "rsdec(${1:args})"} ,
		{"trigger": "rsenc\tComm method", "contents": "rsenc(${1:args})"} ,
		{"trigger": "rsgenpoly\tComm method", "contents": "rsgenpoly(${1:args})"} ,
		{"trigger": "rsgenpolycoeffs\tComm method", "contents": "rsgenpolycoeffs(${1:args})"} ,
		{"trigger": "scatterplot\tComm method", "contents": "scatterplot(${1:args})"} ,
		{"trigger": "semianalytic\tComm method", "contents": "semianalytic(${1:args})"} ,
		{"trigger": "shift2mask\tComm method", "contents": "shift2mask(${1:args})"} ,
		{"trigger": "signlms\tComm method", "contents": "signlms(${1:args})"} ,
		{"trigger": "ssbdemod\tComm method", "contents": "ssbdemod(${1:args})"} ,
		{"trigger": "ssbmod\tComm method", "contents": "ssbmod(${1:args})"} ,
		{"trigger": "stdchan\tComm method", "contents": "stdchan(${1:args})"} ,
		{"trigger": "symerr\tComm method", "contents": "symerr(${1:args})"} ,
		{"trigger": "syndtable\tComm method", "contents": "syndtable(${1:args})"} ,
		{"trigger": "varlms\tComm method", "contents": "varlms(${1:args})"} ,
		{"trigger": "vec2mat\tComm method", "contents": "vec2mat(${1:args})"} ,
		{"trigger": "vitdec\tComm method", "contents": "vitdec(${1:args})"} ,
		{"trigger": "wgn\tComm method", "contents": "wgn(${1:args})"} ,

	]
}
{
	"scope": "source.matlab, source.m",
	"completions":
	[
		{"trigger": "BioIndexedFile\tBioinfo method", "contents": "BioIndexedFile(${1:args})"} ,
		{"trigger": "BioMap\tBioinfo method", "contents": "BioMap(${1:args})"} ,
		{"trigger": "BioRead\tBioinfo method", "contents": "BioRead(${1:args})"} ,
		{"trigger": "BioReadQualityStatistics\tBioinfo method", "contents": "BioReadQualityStatistics(${1:args})"} ,
		{"trigger": "DataMatrix\tBioinfo method", "contents": "DataMatrix(${1:args})"} ,
		{"trigger": "GFFAnnotation\tBioinfo method", "contents": "GFFAnnotation(${1:args})"} ,
		{"trigger": "GTFAnnotation\tBioinfo method", "contents": "GTFAnnotation(${1:args})"} ,
		{"trigger": "HeatMap\tBioinfo method", "contents": "HeatMap(${1:args})"} ,
		{"trigger": "aa2int\tBioinfo method", "contents": "aa2int(${1:args})"} ,
		{"trigger": "aa2nt\tBioinfo method", "contents": "aa2nt(${1:args})"} ,
		{"trigger": "aacount\tBioinfo method", "contents": "aacount(${1:args})"} ,
		{"trigger": "affygcrma\tBioinfo method", "contents": "affygcrma(${1:args})"} ,
		{"trigger": "affyinvarsetnorm\tBioinfo method", "contents": "affyinvarsetnorm(${1:args})"} ,
		{"trigger": "affyprobeaffinities\tBioinfo method", "contents": "affyprobeaffinities(${1:args})"} ,
		{"trigger": "affyprobeseqread\tBioinfo method", "contents": "affyprobeseqread(${1:args})"} ,
		{"trigger": "affyread\tBioinfo method", "contents": "affyread(${1:args})"} ,
		{"trigger": "affyrma\tBioinfo method", "contents": "affyrma(${1:args})"} ,
		{"trigger": "affysnpannotread\tBioinfo method", "contents": "affysnpannotread(${1:args})"} ,
		{"trigger": "affysnpintensitysplit\tBioinfo method", "contents": "affysnpintensitysplit(${1:args})"} ,
		{"trigger": "affysnpquartets\tBioinfo method", "contents": "affysnpquartets(${1:args})"} ,
		{"trigger": "agferead\tBioinfo method", "contents": "agferead(${1:args})"} ,
		{"trigger": "align2cigar\tBioinfo method", "contents": "align2cigar(${1:args})"} ,
		{"trigger": "aminolookup\tBioinfo method", "contents": "aminolookup(${1:args})"} ,
		{"trigger": "atomiccomp\tBioinfo method", "contents": "atomiccomp(${1:args})"} ,
		{"trigger": "bamindexread\tBioinfo method", "contents": "bamindexread(${1:args})"} ,
		{"trigger": "baminfo\tBioinfo method", "contents": "baminfo(${1:args})"} ,
		{"trigger": "bamread\tBioinfo method", "contents": "bamread(${1:args})"} ,
		{"trigger": "basecount\tBioinfo method", "contents": "basecount(${1:args})"} ,
		{"trigger": "baselookup\tBioinfo method", "contents": "baselookup(${1:args})"} ,
		{"trigger": "biograph\tBioinfo method", "contents": "biograph(${1:args})"} ,
		{"trigger": "bioma.ExpressionSet\tBioinfo method", "contents": "bioma.ExpressionSet(${1:args})"} ,
		{"trigger": "bioma.data.ExptData\tBioinfo method", "contents": "bioma.data.ExptData(${1:args})"} ,
		{"trigger": "bioma.data.MIAME\tBioinfo method", "contents": "bioma.data.MIAME(${1:args})"} ,
		{"trigger": "bioma.data.MetaData\tBioinfo method", "contents": "bioma.data.MetaData(${1:args})"} ,
		{"trigger": "blastformat\tBioinfo method", "contents": "blastformat(${1:args})"} ,
		{"trigger": "blastlocal\tBioinfo method", "contents": "blastlocal(${1:args})"} ,
		{"trigger": "blastncbi\tBioinfo method", "contents": "blastncbi(${1:args})"} ,
		{"trigger": "blastread\tBioinfo method", "contents": "blastread(${1:args})"} ,
		{"trigger": "blastreadlocal\tBioinfo method", "contents": "blastreadlocal(${1:args})"} ,
		{"trigger": "blosum\tBioinfo method", "contents": "blosum(${1:args})"} ,
		{"trigger": "bowtie\tBioinfo method", "contents": "bowtie(${1:args})"} ,
		{"trigger": "bowtiebuild\tBioinfo method", "contents": "bowtiebuild(${1:args})"} ,
		{"trigger": "celintensityread\tBioinfo method", "contents": "celintensityread(${1:args})"} ,
		{"trigger": "cghcbs\tBioinfo method", "contents": "cghcbs(${1:args})"} ,
		{"trigger": "cghfreqplot\tBioinfo method", "contents": "cghfreqplot(${1:args})"} ,
		{"trigger": "chromosomeplot\tBioinfo method", "contents": "chromosomeplot(${1:args})"} ,
		{"trigger": "cigar2align\tBioinfo method", "contents": "cigar2align(${1:args})"} ,
		{"trigger": "classperf\tBioinfo method", "contents": "classperf(${1:args})"} ,
		{"trigger": "cleave\tBioinfo method", "contents": "cleave(${1:args})"} ,
		{"trigger": "cleavelookup\tBioinfo method", "contents": "cleavelookup(${1:args})"} ,
		{"trigger": "clustergram\tBioinfo method", "contents": "clustergram(${1:args})"} ,
		{"trigger": "codonbias\tBioinfo method", "contents": "codonbias(${1:args})"} ,
		{"trigger": "codoncount\tBioinfo method", "contents": "codoncount(${1:args})"} ,
		{"trigger": "cpgisland\tBioinfo method", "contents": "cpgisland(${1:args})"} ,
		{"trigger": "crossvalind\tBioinfo method", "contents": "crossvalind(${1:args})"} ,
		{"trigger": "cytobandread\tBioinfo method", "contents": "cytobandread(${1:args})"} ,
		{"trigger": "dayhoff\tBioinfo method", "contents": "dayhoff(${1:args})"} ,
		{"trigger": "dimercount\tBioinfo method", "contents": "dimercount(${1:args})"} ,
		{"trigger": "dna2rna\tBioinfo method", "contents": "dna2rna(${1:args})"} ,
		{"trigger": "dnds\tBioinfo method", "contents": "dnds(${1:args})"} ,
		{"trigger": "dndsml\tBioinfo method", "contents": "dndsml(${1:args})"} ,
		{"trigger": "emblread\tBioinfo method", "contents": "emblread(${1:args})"} ,
		{"trigger": "evalrasmolscript\tBioinfo method", "contents": "evalrasmolscript(${1:args})"} ,
		{"trigger": "exprprofrange\tBioinfo method", "contents": "exprprofrange(${1:args})"} ,
		{"trigger": "exprprofvar\tBioinfo method", "contents": "exprprofvar(${1:args})"} ,
		{"trigger": "fastainfo\tBioinfo method", "contents": "fastainfo(${1:args})"} ,
		{"trigger": "fastaread\tBioinfo method", "contents": "fastaread(${1:args})"} ,
		{"trigger": "fastawrite\tBioinfo method", "contents": "fastawrite(${1:args})"} ,
		{"trigger": "fastqinfo\tBioinfo method", "contents": "fastqinfo(${1:args})"} ,
		{"trigger": "fastqread\tBioinfo method", "contents": "fastqread(${1:args})"} ,
		{"trigger": "fastqwrite\tBioinfo method", "contents": "fastqwrite(${1:args})"} ,
		{"trigger": "featuresmap\tBioinfo method", "contents": "featuresmap(${1:args})"} ,
		{"trigger": "featuresparse\tBioinfo method", "contents": "featuresparse(${1:args})"} ,
		{"trigger": "fitcknn\tBioinfo method", "contents": "fitcknn(${1:args})"} ,
		{"trigger": "galread\tBioinfo method", "contents": "galread(${1:args})"} ,
		{"trigger": "gcrma\tBioinfo method", "contents": "gcrma(${1:args})"} ,
		{"trigger": "gcrmabackadj\tBioinfo method", "contents": "gcrmabackadj(${1:args})"} ,
		{"trigger": "genbankread\tBioinfo method", "contents": "genbankread(${1:args})"} ,
		{"trigger": "geneentropyfilter\tBioinfo method", "contents": "geneentropyfilter(${1:args})"} ,
		{"trigger": "genelowvalfilter\tBioinfo method", "contents": "genelowvalfilter(${1:args})"} ,
		{"trigger": "geneont\tBioinfo method", "contents": "geneont(${1:args})"} ,
		{"trigger": "generangefilter\tBioinfo method", "contents": "generangefilter(${1:args})"} ,
		{"trigger": "geneticcode\tBioinfo method", "contents": "geneticcode(${1:args})"} ,
		{"trigger": "genevarfilter\tBioinfo method", "contents": "genevarfilter(${1:args})"} ,
		{"trigger": "genpeptread\tBioinfo method", "contents": "genpeptread(${1:args})"} ,
		{"trigger": "geoseriesread\tBioinfo method", "contents": "geoseriesread(${1:args})"} ,
		{"trigger": "geosoftread\tBioinfo method", "contents": "geosoftread(${1:args})"} ,
		{"trigger": "getblast\tBioinfo method", "contents": "getblast(${1:args})"} ,
		{"trigger": "getembl\tBioinfo method", "contents": "getembl(${1:args})"} ,
		{"trigger": "getgenbank\tBioinfo method", "contents": "getgenbank(${1:args})"} ,
		{"trigger": "getgenpept\tBioinfo method", "contents": "getgenpept(${1:args})"} ,
		{"trigger": "getgeodata\tBioinfo method", "contents": "getgeodata(${1:args})"} ,
		{"trigger": "gethmmalignment\tBioinfo method", "contents": "gethmmalignment(${1:args})"} ,
		{"trigger": "gethmmprof\tBioinfo method", "contents": "gethmmprof(${1:args})"} ,
		{"trigger": "gethmmtree\tBioinfo method", "contents": "gethmmtree(${1:args})"} ,
		{"trigger": "getpdb\tBioinfo method", "contents": "getpdb(${1:args})"} ,
		{"trigger": "goannotread\tBioinfo method", "contents": "goannotread(${1:args})"} ,
		{"trigger": "gonnet\tBioinfo method", "contents": "gonnet(${1:args})"} ,
		{"trigger": "gprread\tBioinfo method", "contents": "gprread(${1:args})"} ,
		{"trigger": "graphallshortestpaths\tBioinfo method", "contents": "graphallshortestpaths(${1:args})"} ,
		{"trigger": "graphconncomp\tBioinfo method", "contents": "graphconncomp(${1:args})"} ,
		{"trigger": "graphisdag\tBioinfo method", "contents": "graphisdag(${1:args})"} ,
		{"trigger": "graphisomorphism\tBioinfo method", "contents": "graphisomorphism(${1:args})"} ,
		{"trigger": "graphisspantree\tBioinfo method", "contents": "graphisspantree(${1:args})"} ,
		{"trigger": "graphmaxflow\tBioinfo method", "contents": "graphmaxflow(${1:args})"} ,
		{"trigger": "graphminspantree\tBioinfo method", "contents": "graphminspantree(${1:args})"} ,
		{"trigger": "graphpred2path\tBioinfo method", "contents": "graphpred2path(${1:args})"} ,
		{"trigger": "graphshortestpath\tBioinfo method", "contents": "graphshortestpath(${1:args})"} ,
		{"trigger": "graphtopoorder\tBioinfo method", "contents": "graphtopoorder(${1:args})"} ,
		{"trigger": "graphtraverse\tBioinfo method", "contents": "graphtraverse(${1:args})"} ,
		{"trigger": "hmmprofalign\tBioinfo method", "contents": "hmmprofalign(${1:args})"} ,
		{"trigger": "hmmprofestimate\tBioinfo method", "contents": "hmmprofestimate(${1:args})"} ,
		{"trigger": "hmmprofgenerate\tBioinfo method", "contents": "hmmprofgenerate(${1:args})"} ,
		{"trigger": "hmmprofmerge\tBioinfo method", "contents": "hmmprofmerge(${1:args})"} ,
		{"trigger": "hmmprofstruct\tBioinfo method", "contents": "hmmprofstruct(${1:args})"} ,
		{"trigger": "ilmnbslookup\tBioinfo method", "contents": "ilmnbslookup(${1:args})"} ,
		{"trigger": "ilmnbsread\tBioinfo method", "contents": "ilmnbsread(${1:args})"} ,
		{"trigger": "imageneread\tBioinfo method", "contents": "imageneread(${1:args})"} ,
		{"trigger": "int2aa\tBioinfo method", "contents": "int2aa(${1:args})"} ,
		{"trigger": "int2nt\tBioinfo method", "contents": "int2nt(${1:args})"} ,
		{"trigger": "isoelectric\tBioinfo method", "contents": "isoelectric(${1:args})"} ,
		{"trigger": "isotopicdist\tBioinfo method", "contents": "isotopicdist(${1:args})"} ,
		{"trigger": "jcampread\tBioinfo method", "contents": "jcampread(${1:args})"} ,
		{"trigger": "joinseq\tBioinfo method", "contents": "joinseq(${1:args})"} ,
		{"trigger": "knnimpute\tBioinfo method", "contents": "knnimpute(${1:args})"} ,
		{"trigger": "localalign\tBioinfo method", "contents": "localalign(${1:args})"} ,
		{"trigger": "maboxplot\tBioinfo method", "contents": "maboxplot(${1:args})"} ,
		{"trigger": "mafdr\tBioinfo method", "contents": "mafdr(${1:args})"} ,
		{"trigger": "magetfield\tBioinfo method", "contents": "magetfield(${1:args})"} ,
		{"trigger": "maimage\tBioinfo method", "contents": "maimage(${1:args})"} ,
		{"trigger": "mainvarsetnorm\tBioinfo method", "contents": "mainvarsetnorm(${1:args})"} ,
		{"trigger": "mairplot\tBioinfo method", "contents": "mairplot(${1:args})"} ,
		{"trigger": "maloglog\tBioinfo method", "contents": "maloglog(${1:args})"} ,
		{"trigger": "malowess\tBioinfo method", "contents": "malowess(${1:args})"} ,
		{"trigger": "manorm\tBioinfo method", "contents": "manorm(${1:args})"} ,
		{"trigger": "mapcaplot\tBioinfo method", "contents": "mapcaplot(${1:args})"} ,
		{"trigger": "mattest\tBioinfo method", "contents": "mattest(${1:args})"} ,
		{"trigger": "mavolcanoplot\tBioinfo method", "contents": "mavolcanoplot(${1:args})"} ,
		{"trigger": "metafeatures\tBioinfo method", "contents": "metafeatures(${1:args})"} ,
		{"trigger": "microplateplot\tBioinfo method", "contents": "microplateplot(${1:args})"} ,
		{"trigger": "mle\tBioinfo method", "contents": "mle(${1:args})"} ,
		{"trigger": "molviewer\tBioinfo method", "contents": "molviewer(${1:args})"} ,
		{"trigger": "molweight\tBioinfo method", "contents": "molweight(${1:args})"} ,
		{"trigger": "msalign\tBioinfo method", "contents": "msalign(${1:args})"} ,
		{"trigger": "msbackadj\tBioinfo method", "contents": "msbackadj(${1:args})"} ,
		{"trigger": "msdotplot\tBioinfo method", "contents": "msdotplot(${1:args})"} ,
		{"trigger": "msheatmap\tBioinfo method", "contents": "msheatmap(${1:args})"} ,
		{"trigger": "mslowess\tBioinfo method", "contents": "mslowess(${1:args})"} ,
		{"trigger": "msnorm\tBioinfo method", "contents": "msnorm(${1:args})"} ,
		{"trigger": "mspalign\tBioinfo method", "contents": "mspalign(${1:args})"} ,
		{"trigger": "mspeaks\tBioinfo method", "contents": "mspeaks(${1:args})"} ,
		{"trigger": "msppresample\tBioinfo method", "contents": "msppresample(${1:args})"} ,
		{"trigger": "msresample\tBioinfo method", "contents": "msresample(${1:args})"} ,
		{"trigger": "mssgolay\tBioinfo method", "contents": "mssgolay(${1:args})"} ,
		{"trigger": "msviewer\tBioinfo method", "contents": "msviewer(${1:args})"} ,
		{"trigger": "multialign\tBioinfo method", "contents": "multialign(${1:args})"} ,
		{"trigger": "multialignread\tBioinfo method", "contents": "multialignread(${1:args})"} ,
		{"trigger": "multialignwrite\tBioinfo method", "contents": "multialignwrite(${1:args})"} ,
		{"trigger": "mzcdf2peaks\tBioinfo method", "contents": "mzcdf2peaks(${1:args})"} ,
		{"trigger": "mzcdfinfo\tBioinfo method", "contents": "mzcdfinfo(${1:args})"} ,
		{"trigger": "mzcdfread\tBioinfo method", "contents": "mzcdfread(${1:args})"} ,
		{"trigger": "mzxml2peaks\tBioinfo method", "contents": "mzxml2peaks(${1:args})"} ,
		{"trigger": "mzxmlinfo\tBioinfo method", "contents": "mzxmlinfo(${1:args})"} ,
		{"trigger": "mzxmlread\tBioinfo method", "contents": "mzxmlread(${1:args})"} ,
		{"trigger": "nbinpdf\tBioinfo method", "contents": "nbinpdf(${1:args})"} ,
		{"trigger": "nbintest\tBioinfo method", "contents": "nbintest(${1:args})"} ,
		{"trigger": "ngsbrowser\tBioinfo method", "contents": "ngsbrowser(${1:args})"} ,
		{"trigger": "nmercount\tBioinfo method", "contents": "nmercount(${1:args})"} ,
		{"trigger": "nt2aa\tBioinfo method", "contents": "nt2aa(${1:args})"} ,
		{"trigger": "nt2int\tBioinfo method", "contents": "nt2int(${1:args})"} ,
		{"trigger": "ntdensity\tBioinfo method", "contents": "ntdensity(${1:args})"} ,
		{"trigger": "nuc44\tBioinfo method", "contents": "nuc44(${1:args})"} ,
		{"trigger": "num2goid\tBioinfo method", "contents": "num2goid(${1:args})"} ,
		{"trigger": "nwalign\tBioinfo method", "contents": "nwalign(${1:args})"} ,
		{"trigger": "oligoprop\tBioinfo method", "contents": "oligoprop(${1:args})"} ,
		{"trigger": "palindromes\tBioinfo method", "contents": "palindromes(${1:args})"} ,
		{"trigger": "pam\tBioinfo method", "contents": "pam(${1:args})"} ,
		{"trigger": "pdbdistplot\tBioinfo method", "contents": "pdbdistplot(${1:args})"} ,
		{"trigger": "pdbread\tBioinfo method", "contents": "pdbread(${1:args})"} ,
		{"trigger": "pdbsuperpose\tBioinfo method", "contents": "pdbsuperpose(${1:args})"} ,
		{"trigger": "pdbtransform\tBioinfo method", "contents": "pdbtransform(${1:args})"} ,
		{"trigger": "pdbwrite\tBioinfo method", "contents": "pdbwrite(${1:args})"} ,
		{"trigger": "pfamhmmread\tBioinfo method", "contents": "pfamhmmread(${1:args})"} ,
		{"trigger": "phytree\tBioinfo method", "contents": "phytree(${1:args})"} ,
		{"trigger": "phytreeread\tBioinfo method", "contents": "phytreeread(${1:args})"} ,
		{"trigger": "phytreeviewer\tBioinfo method", "contents": "phytreeviewer(${1:args})"} ,
		{"trigger": "phytreewrite\tBioinfo method", "contents": "phytreewrite(${1:args})"} ,
		{"trigger": "probelibraryinfo\tBioinfo method", "contents": "probelibraryinfo(${1:args})"} ,
		{"trigger": "probesetlink\tBioinfo method", "contents": "probesetlink(${1:args})"} ,
		{"trigger": "probesetlookup\tBioinfo method", "contents": "probesetlookup(${1:args})"} ,
		{"trigger": "probesetplot\tBioinfo method", "contents": "probesetplot(${1:args})"} ,
		{"trigger": "probesetvalues\tBioinfo method", "contents": "probesetvalues(${1:args})"} ,
		{"trigger": "profalign\tBioinfo method", "contents": "profalign(${1:args})"} ,
		{"trigger": "proteinplot\tBioinfo method", "contents": "proteinplot(${1:args})"} ,
		{"trigger": "proteinpropplot\tBioinfo method", "contents": "proteinpropplot(${1:args})"} ,
		{"trigger": "quantilenorm\tBioinfo method", "contents": "quantilenorm(${1:args})"} ,
		{"trigger": "ramachandran\tBioinfo method", "contents": "ramachandran(${1:args})"} ,
		{"trigger": "randfeatures\tBioinfo method", "contents": "randfeatures(${1:args})"} ,
		{"trigger": "randseq\tBioinfo method", "contents": "randseq(${1:args})"} ,
		{"trigger": "rankfeatures\tBioinfo method", "contents": "rankfeatures(${1:args})"} ,
		{"trigger": "rebasecuts\tBioinfo method", "contents": "rebasecuts(${1:args})"} ,
		{"trigger": "redbluecmap\tBioinfo method", "contents": "redbluecmap(${1:args})"} ,
		{"trigger": "redgreencmap\tBioinfo method", "contents": "redgreencmap(${1:args})"} ,
		{"trigger": "restrict\tBioinfo method", "contents": "restrict(${1:args})"} ,
		{"trigger": "revgeneticcode\tBioinfo method", "contents": "revgeneticcode(${1:args})"} ,
		{"trigger": "rmabackadj\tBioinfo method", "contents": "rmabackadj(${1:args})"} ,
		{"trigger": "rmasummary\tBioinfo method", "contents": "rmasummary(${1:args})"} ,
		{"trigger": "rna2dna\tBioinfo method", "contents": "rna2dna(${1:args})"} ,
		{"trigger": "rnaconvert\tBioinfo method", "contents": "rnaconvert(${1:args})"} ,
		{"trigger": "rnafold\tBioinfo method", "contents": "rnafold(${1:args})"} ,
		{"trigger": "rnaplot\tBioinfo method", "contents": "rnaplot(${1:args})"} ,
		{"trigger": "saminfo\tBioinfo method", "contents": "saminfo(${1:args})"} ,
		{"trigger": "samplealign\tBioinfo method", "contents": "samplealign(${1:args})"} ,
		{"trigger": "samread\tBioinfo method", "contents": "samread(${1:args})"} ,
		{"trigger": "scfread\tBioinfo method", "contents": "scfread(${1:args})"} ,
		{"trigger": "seq2regexp\tBioinfo method", "contents": "seq2regexp(${1:args})"} ,
		{"trigger": "seqalignviewer\tBioinfo method", "contents": "seqalignviewer(${1:args})"} ,
		{"trigger": "seqcomplement\tBioinfo method", "contents": "seqcomplement(${1:args})"} ,
		{"trigger": "seqconsensus\tBioinfo method", "contents": "seqconsensus(${1:args})"} ,
		{"trigger": "seqdisp\tBioinfo method", "contents": "seqdisp(${1:args})"} ,
		{"trigger": "seqdotplot\tBioinfo method", "contents": "seqdotplot(${1:args})"} ,
		{"trigger": "seqinsertgaps\tBioinfo method", "contents": "seqinsertgaps(${1:args})"} ,
		{"trigger": "seqlinkage\tBioinfo method", "contents": "seqlinkage(${1:args})"} ,
		{"trigger": "seqlogo\tBioinfo method", "contents": "seqlogo(${1:args})"} ,
		{"trigger": "seqmatch\tBioinfo method", "contents": "seqmatch(${1:args})"} ,
		{"trigger": "seqneighjoin\tBioinfo method", "contents": "seqneighjoin(${1:args})"} ,
		{"trigger": "seqpdist\tBioinfo method", "contents": "seqpdist(${1:args})"} ,
		{"trigger": "seqprofile\tBioinfo method", "contents": "seqprofile(${1:args})"} ,
		{"trigger": "seqrcomplement\tBioinfo method", "contents": "seqrcomplement(${1:args})"} ,
		{"trigger": "seqreverse\tBioinfo method", "contents": "seqreverse(${1:args})"} ,
		{"trigger": "seqshoworfs\tBioinfo method", "contents": "seqshoworfs(${1:args})"} ,
		{"trigger": "seqshowwords\tBioinfo method", "contents": "seqshowwords(${1:args})"} ,
		{"trigger": "seqviewer\tBioinfo method", "contents": "seqviewer(${1:args})"} ,
		{"trigger": "seqwordcount\tBioinfo method", "contents": "seqwordcount(${1:args})"} ,
		{"trigger": "sffinfo\tBioinfo method", "contents": "sffinfo(${1:args})"} ,
		{"trigger": "sffread\tBioinfo method", "contents": "sffread(${1:args})"} ,
		{"trigger": "showalignment\tBioinfo method", "contents": "showalignment(${1:args})"} ,
		{"trigger": "showhmmprof\tBioinfo method", "contents": "showhmmprof(${1:args})"} ,
		{"trigger": "soapread\tBioinfo method", "contents": "soapread(${1:args})"} ,
		{"trigger": "sptread\tBioinfo method", "contents": "sptread(${1:args})"} ,
		{"trigger": "swalign\tBioinfo method", "contents": "swalign(${1:args})"} ,
		{"trigger": "tgspcinfo\tBioinfo method", "contents": "tgspcinfo(${1:args})"} ,
		{"trigger": "tgspcread\tBioinfo method", "contents": "tgspcread(${1:args})"} ,
		{"trigger": "traceplot\tBioinfo method", "contents": "traceplot(${1:args})"} ,
		{"trigger": "zonebackadj\tBioinfo method", "contents": "zonebackadj(${1:args})"} ,

	]
}
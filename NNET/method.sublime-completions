{
	"scope": "source.matlab, source.m",
	"completions":
	[
		{"trigger": "Autoencoder\tNNET method", "contents": "Autoencoder(${1:args})"} ,
		{"trigger": "adapt\tNNET method", "contents": "adapt(${1:args})"} ,
		{"trigger": "adaptwb\tNNET method", "contents": "adaptwb(${1:args})"} ,
		{"trigger": "adddelay\tNNET method", "contents": "adddelay(${1:args})"} ,
		{"trigger": "boxdist\tNNET method", "contents": "boxdist(${1:args})"} ,
		{"trigger": "cascadeforwardnet\tNNET method", "contents": "cascadeforwardnet(${1:args})"} ,
		{"trigger": "catelements\tNNET method", "contents": "catelements(${1:args})"} ,
		{"trigger": "catsamples\tNNET method", "contents": "catsamples(${1:args})"} ,
		{"trigger": "catsignals\tNNET method", "contents": "catsignals(${1:args})"} ,
		{"trigger": "cattimesteps\tNNET method", "contents": "cattimesteps(${1:args})"} ,
		{"trigger": "closeloop\tNNET method", "contents": "closeloop(${1:args})"} ,
		{"trigger": "combvec\tNNET method", "contents": "combvec(${1:args})"} ,
		{"trigger": "compet\tNNET method", "contents": "compet(${1:args})"} ,
		{"trigger": "competlayer\tNNET method", "contents": "competlayer(${1:args})"} ,
		{"trigger": "con2seq\tNNET method", "contents": "con2seq(${1:args})"} ,
		{"trigger": "configure\tNNET method", "contents": "configure(${1:args})"} ,
		{"trigger": "confusion\tNNET method", "contents": "confusion(${1:args})"} ,
		{"trigger": "convwf\tNNET method", "contents": "convwf(${1:args})"} ,
		{"trigger": "crossentropy\tNNET method", "contents": "crossentropy(${1:args})"} ,
		{"trigger": "dist\tNNET method", "contents": "dist(${1:args})"} ,
		{"trigger": "distdelaynet\tNNET method", "contents": "distdelaynet(${1:args})"} ,
		{"trigger": "divideblock\tNNET method", "contents": "divideblock(${1:args})"} ,
		{"trigger": "divideind\tNNET method", "contents": "divideind(${1:args})"} ,
		{"trigger": "divideint\tNNET method", "contents": "divideint(${1:args})"} ,
		{"trigger": "dividerand\tNNET method", "contents": "dividerand(${1:args})"} ,
		{"trigger": "dividetrain\tNNET method", "contents": "dividetrain(${1:args})"} ,
		{"trigger": "dotprod\tNNET method", "contents": "dotprod(${1:args})"} ,
		{"trigger": "elliot2sig\tNNET method", "contents": "elliot2sig(${1:args})"} ,
		{"trigger": "elliotsig\tNNET method", "contents": "elliotsig(${1:args})"} ,
		{"trigger": "elmannet\tNNET method", "contents": "elmannet(${1:args})"} ,
		{"trigger": "errsurf\tNNET method", "contents": "errsurf(${1:args})"} ,
		{"trigger": "extendts\tNNET method", "contents": "extendts(${1:args})"} ,
		{"trigger": "feedforwardnet\tNNET method", "contents": "feedforwardnet(${1:args})"} ,
		{"trigger": "fitnet\tNNET method", "contents": "fitnet(${1:args})"} ,
		{"trigger": "fixunknowns\tNNET method", "contents": "fixunknowns(${1:args})"} ,
		{"trigger": "formwb\tNNET method", "contents": "formwb(${1:args})"} ,
		{"trigger": "fromnndata\tNNET method", "contents": "fromnndata(${1:args})"} ,
		{"trigger": "gadd\tNNET method", "contents": "gadd(${1:args})"} ,
		{"trigger": "gdivide\tNNET method", "contents": "gdivide(${1:args})"} ,
		{"trigger": "genFunction\tNNET method", "contents": "genFunction(${1:args})"} ,
		{"trigger": "gensim\tNNET method", "contents": "gensim(${1:args})"} ,
		{"trigger": "getelements\tNNET method", "contents": "getelements(${1:args})"} ,
		{"trigger": "getsignals\tNNET method", "contents": "getsignals(${1:args})"} ,
		{"trigger": "getsiminit\tNNET method", "contents": "getsiminit(${1:args})"} ,
		{"trigger": "gettimesteps\tNNET method", "contents": "gettimesteps(${1:args})"} ,
		{"trigger": "getwb\tNNET method", "contents": "getwb(${1:args})"} ,
		{"trigger": "gmultiply\tNNET method", "contents": "gmultiply(${1:args})"} ,
		{"trigger": "gnegate\tNNET method", "contents": "gnegate(${1:args})"} ,
		{"trigger": "gridtop\tNNET method", "contents": "gridtop(${1:args})"} ,
		{"trigger": "gsqrt\tNNET method", "contents": "gsqrt(${1:args})"} ,
		{"trigger": "gsubtract\tNNET method", "contents": "gsubtract(${1:args})"} ,
		{"trigger": "hardlim\tNNET method", "contents": "hardlim(${1:args})"} ,
		{"trigger": "hardlims\tNNET method", "contents": "hardlims(${1:args})"} ,
		{"trigger": "hextop\tNNET method", "contents": "hextop(${1:args})"} ,
		{"trigger": "ind2vec\tNNET method", "contents": "ind2vec(${1:args})"} ,
		{"trigger": "init\tNNET method", "contents": "init(${1:args})"} ,
		{"trigger": "initcon\tNNET method", "contents": "initcon(${1:args})"} ,
		{"trigger": "initlay\tNNET method", "contents": "initlay(${1:args})"} ,
		{"trigger": "initlvq\tNNET method", "contents": "initlvq(${1:args})"} ,
		{"trigger": "initnw\tNNET method", "contents": "initnw(${1:args})"} ,
		{"trigger": "initwb\tNNET method", "contents": "initwb(${1:args})"} ,
		{"trigger": "initzero\tNNET method", "contents": "initzero(${1:args})"} ,
		{"trigger": "isconfigured\tNNET method", "contents": "isconfigured(${1:args})"} ,
		{"trigger": "layrecnet\tNNET method", "contents": "layrecnet(${1:args})"} ,
		{"trigger": "learncon\tNNET method", "contents": "learncon(${1:args})"} ,
		{"trigger": "learngd\tNNET method", "contents": "learngd(${1:args})"} ,
		{"trigger": "learngdm\tNNET method", "contents": "learngdm(${1:args})"} ,
		{"trigger": "learnh\tNNET method", "contents": "learnh(${1:args})"} ,
		{"trigger": "learnhd\tNNET method", "contents": "learnhd(${1:args})"} ,
		{"trigger": "learnis\tNNET method", "contents": "learnis(${1:args})"} ,
		{"trigger": "learnk\tNNET method", "contents": "learnk(${1:args})"} ,
		{"trigger": "learnlv1\tNNET method", "contents": "learnlv1(${1:args})"} ,
		{"trigger": "learnlv2\tNNET method", "contents": "learnlv2(${1:args})"} ,
		{"trigger": "learnos\tNNET method", "contents": "learnos(${1:args})"} ,
		{"trigger": "learnp\tNNET method", "contents": "learnp(${1:args})"} ,
		{"trigger": "learnpn\tNNET method", "contents": "learnpn(${1:args})"} ,
		{"trigger": "learnsom\tNNET method", "contents": "learnsom(${1:args})"} ,
		{"trigger": "learnsomb\tNNET method", "contents": "learnsomb(${1:args})"} ,
		{"trigger": "learnwh\tNNET method", "contents": "learnwh(${1:args})"} ,
		{"trigger": "linearlayer\tNNET method", "contents": "linearlayer(${1:args})"} ,
		{"trigger": "linkdist\tNNET method", "contents": "linkdist(${1:args})"} ,
		{"trigger": "logsig\tNNET method", "contents": "logsig(${1:args})"} ,
		{"trigger": "lvqnet\tNNET method", "contents": "lvqnet(${1:args})"} ,
		{"trigger": "lvqoutputs\tNNET method", "contents": "lvqoutputs(${1:args})"} ,
		{"trigger": "mae\tNNET method", "contents": "mae(${1:args})"} ,
		{"trigger": "mandist\tNNET method", "contents": "mandist(${1:args})"} ,
		{"trigger": "mapminmax\tNNET method", "contents": "mapminmax(${1:args})"} ,
		{"trigger": "mapstd\tNNET method", "contents": "mapstd(${1:args})"} ,
		{"trigger": "maxlinlr\tNNET method", "contents": "maxlinlr(${1:args})"} ,
		{"trigger": "meanabs\tNNET method", "contents": "meanabs(${1:args})"} ,
		{"trigger": "meansqr\tNNET method", "contents": "meansqr(${1:args})"} ,
		{"trigger": "midpoint\tNNET method", "contents": "midpoint(${1:args})"} ,
		{"trigger": "minmax\tNNET method", "contents": "minmax(${1:args})"} ,
		{"trigger": "mse\tNNET method", "contents": "mse(${1:args})"} ,
		{"trigger": "narnet\tNNET method", "contents": "narnet(${1:args})"} ,
		{"trigger": "narxnet\tNNET method", "contents": "narxnet(${1:args})"} ,
		{"trigger": "nctool\tNNET method", "contents": "nctool(${1:args})"} ,
		{"trigger": "negdist\tNNET method", "contents": "negdist(${1:args})"} ,
		{"trigger": "netinv\tNNET method", "contents": "netinv(${1:args})"} ,
		{"trigger": "netprod\tNNET method", "contents": "netprod(${1:args})"} ,
		{"trigger": "netsum\tNNET method", "contents": "netsum(${1:args})"} ,
		{"trigger": "network\tNNET method", "contents": "network(${1:args})"} ,
		{"trigger": "newgrnn\tNNET method", "contents": "newgrnn(${1:args})"} ,
		{"trigger": "newlind\tNNET method", "contents": "newlind(${1:args})"} ,
		{"trigger": "newpnn\tNNET method", "contents": "newpnn(${1:args})"} ,
		{"trigger": "newrb\tNNET method", "contents": "newrb(${1:args})"} ,
		{"trigger": "newrbe\tNNET method", "contents": "newrbe(${1:args})"} ,
		{"trigger": "nftool\tNNET method", "contents": "nftool(${1:args})"} ,
		{"trigger": "nncell2mat\tNNET method", "contents": "nncell2mat(${1:args})"} ,
		{"trigger": "nncorr\tNNET method", "contents": "nncorr(${1:args})"} ,
		{"trigger": "nndata\tNNET method", "contents": "nndata(${1:args})"} ,
		{"trigger": "nndata2sim\tNNET method", "contents": "nndata2sim(${1:args})"} ,
		{"trigger": "nnsize\tNNET method", "contents": "nnsize(${1:args})"} ,
		{"trigger": "nnstart\tNNET method", "contents": "nnstart(${1:args})"} ,
		{"trigger": "nntraintool\tNNET method", "contents": "nntraintool(${1:args})"} ,
		{"trigger": "normc\tNNET method", "contents": "normc(${1:args})"} ,
		{"trigger": "normprod\tNNET method", "contents": "normprod(${1:args})"} ,
		{"trigger": "normr\tNNET method", "contents": "normr(${1:args})"} ,
		{"trigger": "nprtool\tNNET method", "contents": "nprtool(${1:args})"} ,
		{"trigger": "ntstool\tNNET method", "contents": "ntstool(${1:args})"} ,
		{"trigger": "numelements\tNNET method", "contents": "numelements(${1:args})"} ,
		{"trigger": "numfinite\tNNET method", "contents": "numfinite(${1:args})"} ,
		{"trigger": "numnan\tNNET method", "contents": "numnan(${1:args})"} ,
		{"trigger": "numsamples\tNNET method", "contents": "numsamples(${1:args})"} ,
		{"trigger": "numsignals\tNNET method", "contents": "numsignals(${1:args})"} ,
		{"trigger": "numtimesteps\tNNET method", "contents": "numtimesteps(${1:args})"} ,
		{"trigger": "openloop\tNNET method", "contents": "openloop(${1:args})"} ,
		{"trigger": "patternnet\tNNET method", "contents": "patternnet(${1:args})"} ,
		{"trigger": "perceptron\tNNET method", "contents": "perceptron(${1:args})"} ,
		{"trigger": "perform\tNNET method", "contents": "perform(${1:args})"} ,
		{"trigger": "plotconfusion\tNNET method", "contents": "plotconfusion(${1:args})"} ,
		{"trigger": "plotep\tNNET method", "contents": "plotep(${1:args})"} ,
		{"trigger": "ploterrcorr\tNNET method", "contents": "ploterrcorr(${1:args})"} ,
		{"trigger": "ploterrhist\tNNET method", "contents": "ploterrhist(${1:args})"} ,
		{"trigger": "plotes\tNNET method", "contents": "plotes(${1:args})"} ,
		{"trigger": "plotfit\tNNET method", "contents": "plotfit(${1:args})"} ,
		{"trigger": "plotinerrcorr\tNNET method", "contents": "plotinerrcorr(${1:args})"} ,
		{"trigger": "plotpc\tNNET method", "contents": "plotpc(${1:args})"} ,
		{"trigger": "plotperform\tNNET method", "contents": "plotperform(${1:args})"} ,
		{"trigger": "plotpv\tNNET method", "contents": "plotpv(${1:args})"} ,
		{"trigger": "plotregression\tNNET method", "contents": "plotregression(${1:args})"} ,
		{"trigger": "plotresponse\tNNET method", "contents": "plotresponse(${1:args})"} ,
		{"trigger": "plotroc\tNNET method", "contents": "plotroc(${1:args})"} ,
		{"trigger": "plotsomhits\tNNET method", "contents": "plotsomhits(${1:args})"} ,
		{"trigger": "plotsomnc\tNNET method", "contents": "plotsomnc(${1:args})"} ,
		{"trigger": "plotsomnd\tNNET method", "contents": "plotsomnd(${1:args})"} ,
		{"trigger": "plotsomplanes\tNNET method", "contents": "plotsomplanes(${1:args})"} ,
		{"trigger": "plotsompos\tNNET method", "contents": "plotsompos(${1:args})"} ,
		{"trigger": "plotsomtop\tNNET method", "contents": "plotsomtop(${1:args})"} ,
		{"trigger": "plottrainstate\tNNET method", "contents": "plottrainstate(${1:args})"} ,
		{"trigger": "plotv\tNNET method", "contents": "plotv(${1:args})"} ,
		{"trigger": "plotvec\tNNET method", "contents": "plotvec(${1:args})"} ,
		{"trigger": "plotwb\tNNET method", "contents": "plotwb(${1:args})"} ,
		{"trigger": "pnormc\tNNET method", "contents": "pnormc(${1:args})"} ,
		{"trigger": "poslin\tNNET method", "contents": "poslin(${1:args})"} ,
		{"trigger": "predict\tNNET method", "contents": "predict(${1:args})"} ,
		{"trigger": "preparets\tNNET method", "contents": "preparets(${1:args})"} ,
		{"trigger": "processpca\tNNET method", "contents": "processpca(${1:args})"} ,
		{"trigger": "prune\tNNET method", "contents": "prune(${1:args})"} ,
		{"trigger": "prunedata\tNNET method", "contents": "prunedata(${1:args})"} ,
		{"trigger": "purelin\tNNET method", "contents": "purelin(${1:args})"} ,
		{"trigger": "quant\tNNET method", "contents": "quant(${1:args})"} ,
		{"trigger": "radbas\tNNET method", "contents": "radbas(${1:args})"} ,
		{"trigger": "radbasn\tNNET method", "contents": "radbasn(${1:args})"} ,
		{"trigger": "randnc\tNNET method", "contents": "randnc(${1:args})"} ,
		{"trigger": "randnr\tNNET method", "contents": "randnr(${1:args})"} ,
		{"trigger": "rands\tNNET method", "contents": "rands(${1:args})"} ,
		{"trigger": "randsmall\tNNET method", "contents": "randsmall(${1:args})"} ,
		{"trigger": "randtop\tNNET method", "contents": "randtop(${1:args})"} ,
		{"trigger": "regression\tNNET method", "contents": "regression(${1:args})"} ,
		{"trigger": "removeconstantrows\tNNET method", "contents": "removeconstantrows(${1:args})"} ,
		{"trigger": "removedelay\tNNET method", "contents": "removedelay(${1:args})"} ,
		{"trigger": "removerows\tNNET method", "contents": "removerows(${1:args})"} ,
		{"trigger": "roc\tNNET method", "contents": "roc(${1:args})"} ,
		{"trigger": "sae\tNNET method", "contents": "sae(${1:args})"} ,
		{"trigger": "satlin\tNNET method", "contents": "satlin(${1:args})"} ,
		{"trigger": "satlins\tNNET method", "contents": "satlins(${1:args})"} ,
		{"trigger": "scalprod\tNNET method", "contents": "scalprod(${1:args})"} ,
		{"trigger": "selforgmap\tNNET method", "contents": "selforgmap(${1:args})"} ,
		{"trigger": "separatewb\tNNET method", "contents": "separatewb(${1:args})"} ,
		{"trigger": "seq2con\tNNET method", "contents": "seq2con(${1:args})"} ,
		{"trigger": "setelements\tNNET method", "contents": "setelements(${1:args})"} ,
		{"trigger": "setsamples\tNNET method", "contents": "setsamples(${1:args})"} ,
		{"trigger": "setsignals\tNNET method", "contents": "setsignals(${1:args})"} ,
		{"trigger": "setsiminit\tNNET method", "contents": "setsiminit(${1:args})"} ,
		{"trigger": "settimesteps\tNNET method", "contents": "settimesteps(${1:args})"} ,
		{"trigger": "setwb\tNNET method", "contents": "setwb(${1:args})"} ,
		{"trigger": "sim2nndata\tNNET method", "contents": "sim2nndata(${1:args})"} ,
		{"trigger": "softmax\tNNET method", "contents": "softmax(${1:args})"} ,
		{"trigger": "srchbac\tNNET method", "contents": "srchbac(${1:args})"} ,
		{"trigger": "srchbre\tNNET method", "contents": "srchbre(${1:args})"} ,
		{"trigger": "srchcha\tNNET method", "contents": "srchcha(${1:args})"} ,
		{"trigger": "srchgol\tNNET method", "contents": "srchgol(${1:args})"} ,
		{"trigger": "srchhyb\tNNET method", "contents": "srchhyb(${1:args})"} ,
		{"trigger": "sse\tNNET method", "contents": "sse(${1:args})"} ,
		{"trigger": "sumabs\tNNET method", "contents": "sumabs(${1:args})"} ,
		{"trigger": "sumsqr\tNNET method", "contents": "sumsqr(${1:args})"} ,
		{"trigger": "tansig\tNNET method", "contents": "tansig(${1:args})"} ,
		{"trigger": "tapdelay\tNNET method", "contents": "tapdelay(${1:args})"} ,
		{"trigger": "timedelaynet\tNNET method", "contents": "timedelaynet(${1:args})"} ,
		{"trigger": "tonndata\tNNET method", "contents": "tonndata(${1:args})"} ,
		{"trigger": "train\tNNET method", "contents": "train(${1:args})"} ,
		{"trigger": "trainAutoencoder\tNNET method", "contents": "trainAutoencoder(${1:args})"} ,
		{"trigger": "trainSoftmaxLayer\tNNET method", "contents": "trainSoftmaxLayer(${1:args})"} ,
		{"trigger": "trainb\tNNET method", "contents": "trainb(${1:args})"} ,
		{"trigger": "trainbfg\tNNET method", "contents": "trainbfg(${1:args})"} ,
		{"trigger": "trainbr\tNNET method", "contents": "trainbr(${1:args})"} ,
		{"trigger": "trainbu\tNNET method", "contents": "trainbu(${1:args})"} ,
		{"trigger": "trainc\tNNET method", "contents": "trainc(${1:args})"} ,
		{"trigger": "traincgb\tNNET method", "contents": "traincgb(${1:args})"} ,
		{"trigger": "traincgf\tNNET method", "contents": "traincgf(${1:args})"} ,
		{"trigger": "traincgp\tNNET method", "contents": "traincgp(${1:args})"} ,
		{"trigger": "traingd\tNNET method", "contents": "traingd(${1:args})"} ,
		{"trigger": "traingda\tNNET method", "contents": "traingda(${1:args})"} ,
		{"trigger": "traingdm\tNNET method", "contents": "traingdm(${1:args})"} ,
		{"trigger": "traingdx\tNNET method", "contents": "traingdx(${1:args})"} ,
		{"trigger": "trainlm\tNNET method", "contents": "trainlm(${1:args})"} ,
		{"trigger": "trainoss\tNNET method", "contents": "trainoss(${1:args})"} ,
		{"trigger": "trainr\tNNET method", "contents": "trainr(${1:args})"} ,
		{"trigger": "trainrp\tNNET method", "contents": "trainrp(${1:args})"} ,
		{"trigger": "trainru\tNNET method", "contents": "trainru(${1:args})"} ,
		{"trigger": "trains\tNNET method", "contents": "trains(${1:args})"} ,
		{"trigger": "trainscg\tNNET method", "contents": "trainscg(${1:args})"} ,
		{"trigger": "tribas\tNNET method", "contents": "tribas(${1:args})"} ,
		{"trigger": "tritop\tNNET method", "contents": "tritop(${1:args})"} ,
		{"trigger": "unconfigure\tNNET method", "contents": "unconfigure(${1:args})"} ,
		{"trigger": "vec2ind\tNNET method", "contents": "vec2ind(${1:args})"} ,

	]
}
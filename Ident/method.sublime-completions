{
	"scope": "source.matlab, source.m",
	"completions":
	[
		{"trigger": "TrendInfo\tIdent method", "contents": "TrendInfo(${1:args})"} ,
		{"trigger": "addreg\tIdent method", "contents": "addreg(${1:args})"} ,
		{"trigger": "advice\tIdent method", "contents": "advice(${1:args})"} ,
		{"trigger": "aic\tIdent method", "contents": "aic(${1:args})"} ,
		{"trigger": "ar\tIdent method", "contents": "ar(${1:args})"} ,
		{"trigger": "arOptions\tIdent method", "contents": "arOptions(${1:args})"} ,
		{"trigger": "armax\tIdent method", "contents": "armax(${1:args})"} ,
		{"trigger": "armaxOptions\tIdent method", "contents": "armaxOptions(${1:args})"} ,
		{"trigger": "arx\tIdent method", "contents": "arx(${1:args})"} ,
		{"trigger": "arxOptions\tIdent method", "contents": "arxOptions(${1:args})"} ,
		{"trigger": "arxRegul\tIdent method", "contents": "arxRegul(${1:args})"} ,
		{"trigger": "arxRegulOptions\tIdent method", "contents": "arxRegulOptions(${1:args})"} ,
		{"trigger": "arxstruc\tIdent method", "contents": "arxstruc(${1:args})"} ,
		{"trigger": "bj\tIdent method", "contents": "bj(${1:args})"} ,
		{"trigger": "bjOptions\tIdent method", "contents": "bjOptions(${1:args})"} ,
		{"trigger": "compareOptions\tIdent method", "contents": "compareOptions(${1:args})"} ,
		{"trigger": "cra\tIdent method", "contents": "cra(${1:args})"} ,
		{"trigger": "customnet\tIdent method", "contents": "customnet(${1:args})"} ,
		{"trigger": "customreg\tIdent method", "contents": "customreg(${1:args})"} ,
		{"trigger": "data2state(idnlarx)\tIdent method", "contents": "data2state(idnlarx)(${1:args})"} ,
		{"trigger": "deadzone\tIdent method", "contents": "deadzone(${1:args})"} ,
		{"trigger": "delayest\tIdent method", "contents": "delayest(${1:args})"} ,
		{"trigger": "etfe\tIdent method", "contents": "etfe(${1:args})"} ,
		{"trigger": "findstates\tIdent method", "contents": "findstates(${1:args})"} ,
		{"trigger": "findstatesOptions\tIdent method", "contents": "findstatesOptions(${1:args})"} ,
		{"trigger": "forecastOptions\tIdent method", "contents": "forecastOptions(${1:args})"} ,
		{"trigger": "fpe\tIdent method", "contents": "fpe(${1:args})"} ,
		{"trigger": "getDelayInfo\tIdent method", "contents": "getDelayInfo(${1:args})"} ,
		{"trigger": "getTrend\tIdent method", "contents": "getTrend(${1:args})"} ,
		{"trigger": "getcov\tIdent method", "contents": "getcov(${1:args})"} ,
		{"trigger": "getexp\tIdent method", "contents": "getexp(${1:args})"} ,
		{"trigger": "getinit\tIdent method", "contents": "getinit(${1:args})"} ,
		{"trigger": "getpar\tIdent method", "contents": "getpar(${1:args})"} ,
		{"trigger": "getpvec\tIdent method", "contents": "getpvec(${1:args})"} ,
		{"trigger": "getreg\tIdent method", "contents": "getreg(${1:args})"} ,
		{"trigger": "goodnessOfFit\tIdent method", "contents": "goodnessOfFit(${1:args})"} ,
		{"trigger": "greyest\tIdent method", "contents": "greyest(${1:args})"} ,
		{"trigger": "greyestOptions\tIdent method", "contents": "greyestOptions(${1:args})"} ,
		{"trigger": "iddata\tIdent method", "contents": "iddata(${1:args})"} ,
		{"trigger": "iddataPlotOptions\tIdent method", "contents": "iddataPlotOptions(${1:args})"} ,
		{"trigger": "identpref\tIdent method", "contents": "identpref(${1:args})"} ,
		{"trigger": "idfilt\tIdent method", "contents": "idfilt(${1:args})"} ,
		{"trigger": "idfrd\tIdent method", "contents": "idfrd(${1:args})"} ,
		{"trigger": "idgrey\tIdent method", "contents": "idgrey(${1:args})"} ,
		{"trigger": "idinput\tIdent method", "contents": "idinput(${1:args})"} ,
		{"trigger": "idnlarx\tIdent method", "contents": "idnlarx(${1:args})"} ,
		{"trigger": "idnlgrey\tIdent method", "contents": "idnlgrey(${1:args})"} ,
		{"trigger": "idnlhw\tIdent method", "contents": "idnlhw(${1:args})"} ,
		{"trigger": "idpar\tIdent method", "contents": "idpar(${1:args})"} ,
		{"trigger": "idpoly\tIdent method", "contents": "idpoly(${1:args})"} ,
		{"trigger": "idproc\tIdent method", "contents": "idproc(${1:args})"} ,
		{"trigger": "idresamp\tIdent method", "contents": "idresamp(${1:args})"} ,
		{"trigger": "idss\tIdent method", "contents": "idss(${1:args})"} ,
		{"trigger": "idssdata\tIdent method", "contents": "idssdata(${1:args})"} ,
		{"trigger": "idtf\tIdent method", "contents": "idtf(${1:args})"} ,
		{"trigger": "impulseest\tIdent method", "contents": "impulseest(${1:args})"} ,
		{"trigger": "impulseestOptions\tIdent method", "contents": "impulseestOptions(${1:args})"} ,
		{"trigger": "isLocked\tIdent method", "contents": "isLocked(${1:args})"} ,
		{"trigger": "isnlarx\tIdent method", "contents": "isnlarx(${1:args})"} ,
		{"trigger": "iv4\tIdent method", "contents": "iv4(${1:args})"} ,
		{"trigger": "iv4Options\tIdent method", "contents": "iv4Options(${1:args})"} ,
		{"trigger": "ivar\tIdent method", "contents": "ivar(${1:args})"} ,
		{"trigger": "ivstruc\tIdent method", "contents": "ivstruc(${1:args})"} ,
		{"trigger": "ivx\tIdent method", "contents": "ivx(${1:args})"} ,
		{"trigger": "linapp\tIdent method", "contents": "linapp(${1:args})"} ,
		{"trigger": "linear\tIdent method", "contents": "linear(${1:args})"} ,
		{"trigger": "merge\tIdent method", "contents": "merge(${1:args})"} ,
		{"trigger": "midprefs\tIdent method", "contents": "midprefs(${1:args})"} ,
		{"trigger": "misdata\tIdent method", "contents": "misdata(${1:args})"} ,
		{"trigger": "n4sid\tIdent method", "contents": "n4sid(${1:args})"} ,
		{"trigger": "n4sidOptions\tIdent method", "contents": "n4sidOptions(${1:args})"} ,
		{"trigger": "neuralnet\tIdent method", "contents": "neuralnet(${1:args})"} ,
		{"trigger": "nkshift\tIdent method", "contents": "nkshift(${1:args})"} ,
		{"trigger": "nlarx\tIdent method", "contents": "nlarx(${1:args})"} ,
		{"trigger": "nlarxOptions\tIdent method", "contents": "nlarxOptions(${1:args})"} ,
		{"trigger": "nlgreyest\tIdent method", "contents": "nlgreyest(${1:args})"} ,
		{"trigger": "nlgreyestOptions\tIdent method", "contents": "nlgreyestOptions(${1:args})"} ,
		{"trigger": "nlhw\tIdent method", "contents": "nlhw(${1:args})"} ,
		{"trigger": "nlhwOptions\tIdent method", "contents": "nlhwOptions(${1:args})"} ,
		{"trigger": "noise2meas\tIdent method", "contents": "noise2meas(${1:args})"} ,
		{"trigger": "noisecnv\tIdent method", "contents": "noisecnv(${1:args})"} ,
		{"trigger": "nparams\tIdent method", "contents": "nparams(${1:args})"} ,
		{"trigger": "oe\tIdent method", "contents": "oe(${1:args})"} ,
		{"trigger": "oeOptions\tIdent method", "contents": "oeOptions(${1:args})"} ,
		{"trigger": "pe\tIdent method", "contents": "pe(${1:args})"} ,
		{"trigger": "peOptions\tIdent method", "contents": "peOptions(${1:args})"} ,
		{"trigger": "pem\tIdent method", "contents": "pem(${1:args})"} ,
		{"trigger": "pexcit\tIdent method", "contents": "pexcit(${1:args})"} ,
		{"trigger": "poly1d\tIdent method", "contents": "poly1d(${1:args})"} ,
		{"trigger": "polydata\tIdent method", "contents": "polydata(${1:args})"} ,
		{"trigger": "polyest\tIdent method", "contents": "polyest(${1:args})"} ,
		{"trigger": "polyestOptions\tIdent method", "contents": "polyestOptions(${1:args})"} ,
		{"trigger": "polyreg\tIdent method", "contents": "polyreg(${1:args})"} ,
		{"trigger": "predictOptions\tIdent method", "contents": "predictOptions(${1:args})"} ,
		{"trigger": "present\tIdent method", "contents": "present(${1:args})"} ,
		{"trigger": "procest\tIdent method", "contents": "procest(${1:args})"} ,
		{"trigger": "procestOptions\tIdent method", "contents": "procestOptions(${1:args})"} ,
		{"trigger": "pwlinear\tIdent method", "contents": "pwlinear(${1:args})"} ,
		{"trigger": "rarmax\tIdent method", "contents": "rarmax(${1:args})"} ,
		{"trigger": "rarx\tIdent method", "contents": "rarx(${1:args})"} ,
		{"trigger": "rbj\tIdent method", "contents": "rbj(${1:args})"} ,
		{"trigger": "realdata\tIdent method", "contents": "realdata(${1:args})"} ,
		{"trigger": "recursiveAR\tIdent method", "contents": "recursiveAR(${1:args})"} ,
		{"trigger": "recursiveARMA\tIdent method", "contents": "recursiveARMA(${1:args})"} ,
		{"trigger": "recursiveARMAX\tIdent method", "contents": "recursiveARMAX(${1:args})"} ,
		{"trigger": "recursiveARX\tIdent method", "contents": "recursiveARX(${1:args})"} ,
		{"trigger": "recursiveBJ\tIdent method", "contents": "recursiveBJ(${1:args})"} ,
		{"trigger": "recursiveLS\tIdent method", "contents": "recursiveLS(${1:args})"} ,
		{"trigger": "recursiveOE\tIdent method", "contents": "recursiveOE(${1:args})"} ,
		{"trigger": "resid\tIdent method", "contents": "resid(${1:args})"} ,
		{"trigger": "retrend\tIdent method", "contents": "retrend(${1:args})"} ,
		{"trigger": "roe\tIdent method", "contents": "roe(${1:args})"} ,
		{"trigger": "rpem\tIdent method", "contents": "rpem(${1:args})"} ,
		{"trigger": "rplr\tIdent method", "contents": "rplr(${1:args})"} ,
		{"trigger": "rsample\tIdent method", "contents": "rsample(${1:args})"} ,
		{"trigger": "saturation\tIdent method", "contents": "saturation(${1:args})"} ,
		{"trigger": "segment\tIdent method", "contents": "segment(${1:args})"} ,
		{"trigger": "selstruc\tIdent method", "contents": "selstruc(${1:args})"} ,
		{"trigger": "setPolyFormat\tIdent method", "contents": "setPolyFormat(${1:args})"} ,
		{"trigger": "setcov\tIdent method", "contents": "setcov(${1:args})"} ,
		{"trigger": "setinit\tIdent method", "contents": "setinit(${1:args})"} ,
		{"trigger": "setpar\tIdent method", "contents": "setpar(${1:args})"} ,
		{"trigger": "setpvec\tIdent method", "contents": "setpvec(${1:args})"} ,
		{"trigger": "showConfidence\tIdent method", "contents": "showConfidence(${1:args})"} ,
		{"trigger": "sigmoidnet\tIdent method", "contents": "sigmoidnet(${1:args})"} ,
		{"trigger": "simOptions\tIdent method", "contents": "simOptions(${1:args})"} ,
		{"trigger": "simsd\tIdent method", "contents": "simsd(${1:args})"} ,
		{"trigger": "simsdOptions\tIdent method", "contents": "simsdOptions(${1:args})"} ,
		{"trigger": "spa\tIdent method", "contents": "spa(${1:args})"} ,
		{"trigger": "spafdr\tIdent method", "contents": "spafdr(${1:args})"} ,
		{"trigger": "spectrum\tIdent method", "contents": "spectrum(${1:args})"} ,
		{"trigger": "spectrumoptions\tIdent method", "contents": "spectrumoptions(${1:args})"} ,
		{"trigger": "spectrumplot\tIdent method", "contents": "spectrumplot(${1:args})"} ,
		{"trigger": "ssest\tIdent method", "contents": "ssest(${1:args})"} ,
		{"trigger": "ssestOptions\tIdent method", "contents": "ssestOptions(${1:args})"} ,
		{"trigger": "ssform\tIdent method", "contents": "ssform(${1:args})"} ,
		{"trigger": "ssregest\tIdent method", "contents": "ssregest(${1:args})"} ,
		{"trigger": "ssregestOptions\tIdent method", "contents": "ssregestOptions(${1:args})"} ,
		{"trigger": "struc\tIdent method", "contents": "struc(${1:args})"} ,
		{"trigger": "systemIdentification\tIdent method", "contents": "systemIdentification(${1:args})"} ,
		{"trigger": "tfest\tIdent method", "contents": "tfest(${1:args})"} ,
		{"trigger": "tfestOptions\tIdent method", "contents": "tfestOptions(${1:args})"} ,
		{"trigger": "translatecov\tIdent method", "contents": "translatecov(${1:args})"} ,
		{"trigger": "treepartition\tIdent method", "contents": "treepartition(${1:args})"} ,
		{"trigger": "unitgain\tIdent method", "contents": "unitgain(${1:args})"} ,
		{"trigger": "wavenet\tIdent method", "contents": "wavenet(${1:args})"} ,

	]
}
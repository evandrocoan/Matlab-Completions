{
	"scope": "source.matlab, source.m",
	"completions":
	[
		{"trigger": "aictest\tPhased method", "contents": "aictest(${1:args})"} ,
		{"trigger": "albersheim\tPhased method", "contents": "albersheim(${1:args})"} ,
		{"trigger": "ambgfun\tPhased method", "contents": "ambgfun(${1:args})"} ,
		{"trigger": "aperture2gain\tPhased method", "contents": "aperture2gain(${1:args})"} ,
		{"trigger": "az2broadside\tPhased method", "contents": "az2broadside(${1:args})"} ,
		{"trigger": "azel2phitheta\tPhased method", "contents": "azel2phitheta(${1:args})"} ,
		{"trigger": "azel2phithetapat\tPhased method", "contents": "azel2phithetapat(${1:args})"} ,
		{"trigger": "azel2uv\tPhased method", "contents": "azel2uv(${1:args})"} ,
		{"trigger": "azel2uvpat\tPhased method", "contents": "azel2uvpat(${1:args})"} ,
		{"trigger": "azelaxes\tPhased method", "contents": "azelaxes(${1:args})"} ,
		{"trigger": "beat2range\tPhased method", "contents": "beat2range(${1:args})"} ,
		{"trigger": "billingsleyicm\tPhased method", "contents": "billingsleyicm(${1:args})"} ,
		{"trigger": "blakechart\tPhased method", "contents": "blakechart(${1:args})"} ,
		{"trigger": "broadside2az\tPhased method", "contents": "broadside2az(${1:args})"} ,
		{"trigger": "cart2sphvec\tPhased method", "contents": "cart2sphvec(${1:args})"} ,
		{"trigger": "cbfweights\tPhased method", "contents": "cbfweights(${1:args})"} ,
		{"trigger": "circpol2pol\tPhased method", "contents": "circpol2pol(${1:args})"} ,
		{"trigger": "dechirp\tPhased method", "contents": "dechirp(${1:args})"} ,
		{"trigger": "delayseq\tPhased method", "contents": "delayseq(${1:args})"} ,
		{"trigger": "depressionang\tPhased method", "contents": "depressionang(${1:args})"} ,
		{"trigger": "dop2speed\tPhased method", "contents": "dop2speed(${1:args})"} ,
		{"trigger": "dopsteeringvec\tPhased method", "contents": "dopsteeringvec(${1:args})"} ,
		{"trigger": "effearthradius\tPhased method", "contents": "effearthradius(${1:args})"} ,
		{"trigger": "espritdoa\tPhased method", "contents": "espritdoa(${1:args})"} ,
		{"trigger": "fspl\tPhased method", "contents": "fspl(${1:args})"} ,
		{"trigger": "gain2aperture\tPhased method", "contents": "gain2aperture(${1:args})"} ,
		{"trigger": "gccphat\tPhased method", "contents": "gccphat(${1:args})"} ,
		{"trigger": "global2localcoord\tPhased method", "contents": "global2localcoord(${1:args})"} ,
		{"trigger": "grazingang\tPhased method", "contents": "grazingang(${1:args})"} ,
		{"trigger": "horizonrange\tPhased method", "contents": "horizonrange(${1:args})"} ,
		{"trigger": "lcmvweights\tPhased method", "contents": "lcmvweights(${1:args})"} ,
		{"trigger": "local2globalcoord\tPhased method", "contents": "local2globalcoord(${1:args})"} ,
		{"trigger": "mdltest\tPhased method", "contents": "mdltest(${1:args})"} ,
		{"trigger": "mvdrweights\tPhased method", "contents": "mvdrweights(${1:args})"} ,
		{"trigger": "noisepow\tPhased method", "contents": "noisepow(${1:args})"} ,
		{"trigger": "npwgnthresh\tPhased method", "contents": "npwgnthresh(${1:args})"} ,
		{"trigger": "phased.ADPCACanceller\tPhased method", "contents": "phased.ADPCACanceller(${1:args})"} ,
		{"trigger": "phased.AngleDopplerResponse\tPhased method", "contents": "phased.AngleDopplerResponse(${1:args})"} ,
		{"trigger": "phased.ArrayGain\tPhased method", "contents": "phased.ArrayGain(${1:args})"} ,
		{"trigger": "phased.ArrayResponse\tPhased method", "contents": "phased.ArrayResponse(${1:args})"} ,
		{"trigger": "phased.BarrageJammer\tPhased method", "contents": "phased.BarrageJammer(${1:args})"} ,
		{"trigger": "phased.BeamscanEstimator\tPhased method", "contents": "phased.BeamscanEstimator(${1:args})"} ,
		{"trigger": "phased.BeamscanEstimator2D\tPhased method", "contents": "phased.BeamscanEstimator2D(${1:args})"} ,
		{"trigger": "phased.BeamspaceESPRITEstimator\tPhased method", "contents": "phased.BeamspaceESPRITEstimator(${1:args})"} ,
		{"trigger": "phased.CFARDetector\tPhased method", "contents": "phased.CFARDetector(${1:args})"} ,
		{"trigger": "phased.Collector\tPhased method", "contents": "phased.Collector(${1:args})"} ,
		{"trigger": "phased.ConformalArray\tPhased method", "contents": "phased.ConformalArray(${1:args})"} ,
		{"trigger": "phased.ConstantGammaClutter\tPhased method", "contents": "phased.ConstantGammaClutter(${1:args})"} ,
		{"trigger": "phased.CosineAntennaElement\tPhased method", "contents": "phased.CosineAntennaElement(${1:args})"} ,
		{"trigger": "phased.CrossedDipoleAntennaElement\tPhased method", "contents": "phased.CrossedDipoleAntennaElement(${1:args})"} ,
		{"trigger": "phased.CustomAntennaElement\tPhased method", "contents": "phased.CustomAntennaElement(${1:args})"} ,
		{"trigger": "phased.CustomMicrophoneElement\tPhased method", "contents": "phased.CustomMicrophoneElement(${1:args})"} ,
		{"trigger": "phased.DPCACanceller\tPhased method", "contents": "phased.DPCACanceller(${1:args})"} ,
		{"trigger": "phased.ESPRITEstimator\tPhased method", "contents": "phased.ESPRITEstimator(${1:args})"} ,
		{"trigger": "phased.ElementDelay\tPhased method", "contents": "phased.ElementDelay(${1:args})"} ,
		{"trigger": "phased.FMCWWaveform\tPhased method", "contents": "phased.FMCWWaveform(${1:args})"} ,
		{"trigger": "phased.FreeSpace\tPhased method", "contents": "phased.FreeSpace(${1:args})"} ,
		{"trigger": "phased.FrostBeamformer\tPhased method", "contents": "phased.FrostBeamformer(${1:args})"} ,
		{"trigger": "phased.GCCEstimator\tPhased method", "contents": "phased.GCCEstimator(${1:args})"} ,
		{"trigger": "phased.HeterogeneousConformalArray\tPhased method", "contents": "phased.HeterogeneousConformalArray(${1:args})"} ,
		{"trigger": "phased.HeterogeneousULA\tPhased method", "contents": "phased.HeterogeneousULA(${1:args})"} ,
		{"trigger": "phased.HeterogeneousURA\tPhased method", "contents": "phased.HeterogeneousURA(${1:args})"} ,
		{"trigger": "phased.IsotropicAntennaElement\tPhased method", "contents": "phased.IsotropicAntennaElement(${1:args})"} ,
		{"trigger": "phased.LCMVBeamformer\tPhased method", "contents": "phased.LCMVBeamformer(${1:args})"} ,
		{"trigger": "phased.LinearFMWaveform\tPhased method", "contents": "phased.LinearFMWaveform(${1:args})"} ,
		{"trigger": "phased.MFSKWaveform\tPhased method", "contents": "phased.MFSKWaveform(${1:args})"} ,
		{"trigger": "phased.MVDRBeamformer\tPhased method", "contents": "phased.MVDRBeamformer(${1:args})"} ,
		{"trigger": "phased.MVDREstimator\tPhased method", "contents": "phased.MVDREstimator(${1:args})"} ,
		{"trigger": "phased.MVDREstimator2D\tPhased method", "contents": "phased.MVDREstimator2D(${1:args})"} ,
		{"trigger": "phased.MatchedFilter\tPhased method", "contents": "phased.MatchedFilter(${1:args})"} ,
		{"trigger": "phased.OmnidirectionalMicrophoneElement\tPhased method", "contents": "phased.OmnidirectionalMicrophoneElement(${1:args})"} ,
		{"trigger": "phased.PartitionedArray\tPhased method", "contents": "phased.PartitionedArray(${1:args})"} ,
		{"trigger": "phased.PhaseCodedWaveform\tPhased method", "contents": "phased.PhaseCodedWaveform(${1:args})"} ,
		{"trigger": "phased.PhaseShiftBeamformer\tPhased method", "contents": "phased.PhaseShiftBeamformer(${1:args})"} ,
		{"trigger": "phased.Platform\tPhased method", "contents": "phased.Platform(${1:args})"} ,
		{"trigger": "phased.RadarTarget\tPhased method", "contents": "phased.RadarTarget(${1:args})"} ,
		{"trigger": "phased.Radiator\tPhased method", "contents": "phased.Radiator(${1:args})"} ,
		{"trigger": "phased.RangeDopplerResponse\tPhased method", "contents": "phased.RangeDopplerResponse(${1:args})"} ,
		{"trigger": "phased.ReceiverPreamp\tPhased method", "contents": "phased.ReceiverPreamp(${1:args})"} ,
		{"trigger": "phased.RectangularWaveform\tPhased method", "contents": "phased.RectangularWaveform(${1:args})"} ,
		{"trigger": "phased.ReplicatedSubarray\tPhased method", "contents": "phased.ReplicatedSubarray(${1:args})"} ,
		{"trigger": "phased.RootMUSICEstimator\tPhased method", "contents": "phased.RootMUSICEstimator(${1:args})"} ,
		{"trigger": "phased.RootWSFEstimator\tPhased method", "contents": "phased.RootWSFEstimator(${1:args})"} ,
		{"trigger": "phased.STAPSMIBeamformer\tPhased method", "contents": "phased.STAPSMIBeamformer(${1:args})"} ,
		{"trigger": "phased.ShortDipoleAntennaElement\tPhased method", "contents": "phased.ShortDipoleAntennaElement(${1:args})"} ,
		{"trigger": "phased.SteeringVector\tPhased method", "contents": "phased.SteeringVector(${1:args})"} ,
		{"trigger": "phased.SteppedFMWaveform\tPhased method", "contents": "phased.SteppedFMWaveform(${1:args})"} ,
		{"trigger": "phased.StretchProcessor\tPhased method", "contents": "phased.StretchProcessor(${1:args})"} ,
		{"trigger": "phased.SubbandMVDRBeamformer\tPhased method", "contents": "phased.SubbandMVDRBeamformer(${1:args})"} ,
		{"trigger": "phased.SubbandPhaseShiftBeamformer\tPhased method", "contents": "phased.SubbandPhaseShiftBeamformer(${1:args})"} ,
		{"trigger": "phased.SumDifferenceMonopulseTracker\tPhased method", "contents": "phased.SumDifferenceMonopulseTracker(${1:args})"} ,
		{"trigger": "phased.SumDifferenceMonopulseTracker2D\tPhased method", "contents": "phased.SumDifferenceMonopulseTracker2D(${1:args})"} ,
		{"trigger": "phased.TimeDelayBeamformer\tPhased method", "contents": "phased.TimeDelayBeamformer(${1:args})"} ,
		{"trigger": "phased.TimeDelayLCMVBeamformer\tPhased method", "contents": "phased.TimeDelayLCMVBeamformer(${1:args})"} ,
		{"trigger": "phased.TimeVaryingGain\tPhased method", "contents": "phased.TimeVaryingGain(${1:args})"} ,
		{"trigger": "phased.Transmitter\tPhased method", "contents": "phased.Transmitter(${1:args})"} ,
		{"trigger": "phased.TwoRayChannel\tPhased method", "contents": "phased.TwoRayChannel(${1:args})"} ,
		{"trigger": "phased.UCA\tPhased method", "contents": "phased.UCA(${1:args})"} ,
		{"trigger": "phased.ULA\tPhased method", "contents": "phased.ULA(${1:args})"} ,
		{"trigger": "phased.URA\tPhased method", "contents": "phased.URA(${1:args})"} ,
		{"trigger": "phased.WidebandCollector\tPhased method", "contents": "phased.WidebandCollector(${1:args})"} ,
		{"trigger": "phased.WidebandFreeSpace\tPhased method", "contents": "phased.WidebandFreeSpace(${1:args})"} ,
		{"trigger": "phased.WidebandRadiator\tPhased method", "contents": "phased.WidebandRadiator(${1:args})"} ,
		{"trigger": "phased.gpu.ConstantGammaClutter\tPhased method", "contents": "phased.gpu.ConstantGammaClutter(${1:args})"} ,
		{"trigger": "phitheta2azel\tPhased method", "contents": "phitheta2azel(${1:args})"} ,
		{"trigger": "phitheta2azelpat\tPhased method", "contents": "phitheta2azelpat(${1:args})"} ,
		{"trigger": "phitheta2uv\tPhased method", "contents": "phitheta2uv(${1:args})"} ,
		{"trigger": "phitheta2uvpat\tPhased method", "contents": "phitheta2uvpat(${1:args})"} ,
		{"trigger": "physconst\tPhased method", "contents": "physconst(${1:args})"} ,
		{"trigger": "pilotcalib\tPhased method", "contents": "pilotcalib(${1:args})"} ,
		{"trigger": "pol2circpol\tPhased method", "contents": "pol2circpol(${1:args})"} ,
		{"trigger": "polellip\tPhased method", "contents": "polellip(${1:args})"} ,
		{"trigger": "polloss\tPhased method", "contents": "polloss(${1:args})"} ,
		{"trigger": "polratio\tPhased method", "contents": "polratio(${1:args})"} ,
		{"trigger": "polsignature\tPhased method", "contents": "polsignature(${1:args})"} ,
		{"trigger": "pulsint\tPhased method", "contents": "pulsint(${1:args})"} ,
		{"trigger": "radareqpow\tPhased method", "contents": "radareqpow(${1:args})"} ,
		{"trigger": "radareqrng\tPhased method", "contents": "radareqrng(${1:args})"} ,
		{"trigger": "radareqsnr\tPhased method", "contents": "radareqsnr(${1:args})"} ,
		{"trigger": "radarvcd\tPhased method", "contents": "radarvcd(${1:args})"} ,
		{"trigger": "radialspeed\tPhased method", "contents": "radialspeed(${1:args})"} ,
		{"trigger": "range2beat\tPhased method", "contents": "range2beat(${1:args})"} ,
		{"trigger": "range2bw\tPhased method", "contents": "range2bw(${1:args})"} ,
		{"trigger": "range2time\tPhased method", "contents": "range2time(${1:args})"} ,
		{"trigger": "rangeangle\tPhased method", "contents": "rangeangle(${1:args})"} ,
		{"trigger": "rdcoupling\tPhased method", "contents": "rdcoupling(${1:args})"} ,
		{"trigger": "rocpfa\tPhased method", "contents": "rocpfa(${1:args})"} ,
		{"trigger": "rocsnr\tPhased method", "contents": "rocsnr(${1:args})"} ,
		{"trigger": "rootmusicdoa\tPhased method", "contents": "rootmusicdoa(${1:args})"} ,
		{"trigger": "rotx\tPhased method", "contents": "rotx(${1:args})"} ,
		{"trigger": "roty\tPhased method", "contents": "roty(${1:args})"} ,
		{"trigger": "rotz\tPhased method", "contents": "rotz(${1:args})"} ,
		{"trigger": "sensorcov\tPhased method", "contents": "sensorcov(${1:args})"} ,
		{"trigger": "sensorsig\tPhased method", "contents": "sensorsig(${1:args})"} ,
		{"trigger": "shnidman\tPhased method", "contents": "shnidman(${1:args})"} ,
		{"trigger": "spectrogram\tPhased method", "contents": "spectrogram(${1:args})"} ,
		{"trigger": "speed2dop\tPhased method", "contents": "speed2dop(${1:args})"} ,
		{"trigger": "sph2cartvec\tPhased method", "contents": "sph2cartvec(${1:args})"} ,
		{"trigger": "spsmooth\tPhased method", "contents": "spsmooth(${1:args})"} ,
		{"trigger": "steervec\tPhased method", "contents": "steervec(${1:args})"} ,
		{"trigger": "stokes\tPhased method", "contents": "stokes(${1:args})"} ,
		{"trigger": "stretchfreq2rng\tPhased method", "contents": "stretchfreq2rng(${1:args})"} ,
		{"trigger": "surfacegamma\tPhased method", "contents": "surfacegamma(${1:args})"} ,
		{"trigger": "surfclutterrcs\tPhased method", "contents": "surfclutterrcs(${1:args})"} ,
		{"trigger": "systemp\tPhased method", "contents": "systemp(${1:args})"} ,
		{"trigger": "time2range\tPhased method", "contents": "time2range(${1:args})"} ,
		{"trigger": "unigrid\tPhased method", "contents": "unigrid(${1:args})"} ,
		{"trigger": "uv2azel\tPhased method", "contents": "uv2azel(${1:args})"} ,
		{"trigger": "uv2azelpat\tPhased method", "contents": "uv2azelpat(${1:args})"} ,
		{"trigger": "uv2phitheta\tPhased method", "contents": "uv2phitheta(${1:args})"} ,
		{"trigger": "uv2phithetapat\tPhased method", "contents": "uv2phithetapat(${1:args})"} ,
		{"trigger": "val2ind\tPhased method", "contents": "val2ind(${1:args})"} ,

	]
}
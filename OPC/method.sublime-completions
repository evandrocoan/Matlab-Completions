{
	"scope": "source.matlab, source.m",
	"completions":
	[
		{"trigger": "addgroup\tOPC method", "contents": "addgroup(${1:args})"} ,
		{"trigger": "additem\tOPC method", "contents": "additem(${1:args})"} ,
		{"trigger": "arrayHasSameTimeStamp\tOPC method", "contents": "arrayHasSameTimeStamp(${1:args})"} ,
		{"trigger": "browsenamespace\tOPC method", "contents": "browsenamespace(${1:args})"} ,
		{"trigger": "cancelasync\tOPC method", "contents": "cancelasync(${1:args})"} ,
		{"trigger": "cleareventlog\tOPC method", "contents": "cleareventlog(${1:args})"} ,
		{"trigger": "clonegroup\tOPC method", "contents": "clonegroup(${1:args})"} ,
		{"trigger": "connect\tOPC method", "contents": "connect(${1:args})"} ,
		{"trigger": "disconnect\tOPC method", "contents": "disconnect(${1:args})"} ,
		{"trigger": "findNodeById\tOPC method", "contents": "findNodeById(${1:args})"} ,
		{"trigger": "flatnamespace\tOPC method", "contents": "flatnamespace(${1:args})"} ,
		{"trigger": "genslread\tOPC method", "contents": "genslread(${1:args})"} ,
		{"trigger": "genslwrite\tOPC method", "contents": "genslwrite(${1:args})"} ,
		{"trigger": "getDescription\tOPC method", "contents": "getDescription(${1:args})"} ,
		{"trigger": "getIDFromname\tOPC method", "contents": "getIDFromname(${1:args})"} ,
		{"trigger": "getIDList\tOPC method", "contents": "getIDList(${1:args})"} ,
		{"trigger": "getIndexFromID\tOPC method", "contents": "getIndexFromID(${1:args})"} ,
		{"trigger": "getNameList\tOPC method", "contents": "getNameList(${1:args})"} ,
		{"trigger": "getNameSpace\tOPC method", "contents": "getNameSpace(${1:args})"} ,
		{"trigger": "getNamespace\tOPC method", "contents": "getNamespace(${1:args})"} ,
		{"trigger": "getnamespace\tOPC method", "contents": "getnamespace(${1:args})"} ,
		{"trigger": "isConnected\tOPC method", "contents": "isConnected(${1:args})"} ,
		{"trigger": "isObjectType\tOPC method", "contents": "isObjectType(${1:args})"} ,
		{"trigger": "makepublic\tOPC method", "contents": "makepublic(${1:args})"} ,
		{"trigger": "opc.daQualityString\tOPC method", "contents": "opc.daQualityString(${1:args})"} ,
		{"trigger": "opc.daSupport\tOPC method", "contents": "opc.daSupport(${1:args})"} ,
		{"trigger": "opc.getDateDisplayFormat\tOPC method", "contents": "opc.getDateDisplayFormat(${1:args})"} ,
		{"trigger": "opc.hda.Client\tOPC method", "contents": "opc.hda.Client(${1:args})"} ,
		{"trigger": "opc.hda.getServerInfo\tOPC method", "contents": "opc.hda.getServerInfo(${1:args})"} ,
		{"trigger": "opc.hda.reset\tOPC method", "contents": "opc.hda.reset(${1:args})"} ,
		{"trigger": "opc.hdaQualityString\tOPC method", "contents": "opc.hdaQualityString(${1:args})"} ,
		{"trigger": "opc.hdaSupport\tOPC method", "contents": "opc.hdaSupport(${1:args})"} ,
		{"trigger": "opc.setDateDisplayFormat\tOPC method", "contents": "opc.setDateDisplayFormat(${1:args})"} ,
		{"trigger": "opcDataAccessExplorer\tOPC method", "contents": "opcDataAccessExplorer(${1:args})"} ,
		{"trigger": "opccallback\tOPC method", "contents": "opccallback(${1:args})"} ,
		{"trigger": "opcda\tOPC method", "contents": "opcda(${1:args})"} ,
		{"trigger": "opcfind\tOPC method", "contents": "opcfind(${1:args})"} ,
		{"trigger": "opchda\tOPC method", "contents": "opchda(${1:args})"} ,
		{"trigger": "opchdaserverinfo\tOPC method", "contents": "opchdaserverinfo(${1:args})"} ,
		{"trigger": "opchelp\tOPC method", "contents": "opchelp(${1:args})"} ,
		{"trigger": "opcqid\tOPC method", "contents": "opcqid(${1:args})"} ,
		{"trigger": "opcqparts\tOPC method", "contents": "opcqparts(${1:args})"} ,
		{"trigger": "opcqstr\tOPC method", "contents": "opcqstr(${1:args})"} ,
		{"trigger": "opcread\tOPC method", "contents": "opcread(${1:args})"} ,
		{"trigger": "opcregister\tOPC method", "contents": "opcregister(${1:args})"} ,
		{"trigger": "opcreset\tOPC method", "contents": "opcreset(${1:args})"} ,
		{"trigger": "opcserverinfo\tOPC method", "contents": "opcserverinfo(${1:args})"} ,
		{"trigger": "opcstruct2array\tOPC method", "contents": "opcstruct2array(${1:args})"} ,
		{"trigger": "opcstruct2timeseries\tOPC method", "contents": "opcstruct2timeseries(${1:args})"} ,
		{"trigger": "opcsupport\tOPC method", "contents": "opcsupport(${1:args})"} ,
		{"trigger": "opcua\tOPC method", "contents": "opcua(${1:args})"} ,
		{"trigger": "opcuanode\tOPC method", "contents": "opcuanode(${1:args})"} ,
		{"trigger": "openosf\tOPC method", "contents": "openosf(${1:args})"} ,
		{"trigger": "readAtTime\tOPC method", "contents": "readAtTime(${1:args})"} ,
		{"trigger": "readHistory\tOPC method", "contents": "readHistory(${1:args})"} ,
		{"trigger": "readItemAttributes\tOPC method", "contents": "readItemAttributes(${1:args})"} ,
		{"trigger": "readModified\tOPC method", "contents": "readModified(${1:args})"} ,
		{"trigger": "readProcessed\tOPC method", "contents": "readProcessed(${1:args})"} ,
		{"trigger": "readRaw\tOPC method", "contents": "readRaw(${1:args})"} ,
		{"trigger": "readValue\tOPC method", "contents": "readValue(${1:args})"} ,
		{"trigger": "removepublicgroup\tOPC method", "contents": "removepublicgroup(${1:args})"} ,
		{"trigger": "serveritemprops\tOPC method", "contents": "serveritemprops(${1:args})"} ,
		{"trigger": "serveritems\tOPC method", "contents": "serveritems(${1:args})"} ,
		{"trigger": "showValues\tOPC method", "contents": "showValues(${1:args})"} ,
		{"trigger": "showopcevents\tOPC method", "contents": "showopcevents(${1:args})"} ,
		{"trigger": "trend\tOPC method", "contents": "trend(${1:args})"} ,
		{"trigger": "tsintersect\tOPC method", "contents": "tsintersect(${1:args})"} ,
		{"trigger": "tsunion\tOPC method", "contents": "tsunion(${1:args})"} ,
		{"trigger": "writeValue\tOPC method", "contents": "writeValue(${1:args})"} ,
		{"trigger": "writeasync\tOPC method", "contents": "writeasync(${1:args})"} ,

	]
}
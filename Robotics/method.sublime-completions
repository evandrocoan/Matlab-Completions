{
	"scope": "source.matlab, source.m",
	"completions":
	[
		{"trigger": "Using\tRobotics method", "contents": "Using(${1:args})"} ,
		{"trigger": "angdiff\tRobotics method", "contents": "angdiff(${1:args})"} ,
		{"trigger": "apply\tRobotics method", "contents": "apply(${1:args})"} ,
		{"trigger": "axang2quat\tRobotics method", "contents": "axang2quat(${1:args})"} ,
		{"trigger": "axang2rotm\tRobotics method", "contents": "axang2rotm(${1:args})"} ,
		{"trigger": "axang2tform\tRobotics method", "contents": "axang2tform(${1:args})"} ,
		{"trigger": "call\tRobotics method", "contents": "call(${1:args})"} ,
		{"trigger": "cart2hom\tRobotics method", "contents": "cart2hom(${1:args})"} ,
		{"trigger": "definition\tRobotics method", "contents": "definition(${1:args})"} ,
		{"trigger": "del\tRobotics method", "contents": "del(${1:args})"} ,
		{"trigger": "eul2quat\tRobotics method", "contents": "eul2quat(${1:args})"} ,
		{"trigger": "eul2rotm\tRobotics method", "contents": "eul2rotm(${1:args})"} ,
		{"trigger": "eul2tform\tRobotics method", "contents": "eul2tform(${1:args})"} ,
		{"trigger": "getTransform\tRobotics method", "contents": "getTransform(${1:args})"} ,
		{"trigger": "has\tRobotics method", "contents": "has(${1:args})"} ,
		{"trigger": "hom2cart\tRobotics method", "contents": "hom2cart(${1:args})"} ,
		{"trigger": "quat2axang\tRobotics method", "contents": "quat2axang(${1:args})"} ,
		{"trigger": "quat2eul\tRobotics method", "contents": "quat2eul(${1:args})"} ,
		{"trigger": "quat2rotm\tRobotics method", "contents": "quat2rotm(${1:args})"} ,
		{"trigger": "quat2tform\tRobotics method", "contents": "quat2tform(${1:args})"} ,
		{"trigger": "readAllFieldNames\tRobotics method", "contents": "readAllFieldNames(${1:args})"} ,
		{"trigger": "readBinaryOccupancyGrid\tRobotics method", "contents": "readBinaryOccupancyGrid(${1:args})"} ,
		{"trigger": "readCartesian\tRobotics method", "contents": "readCartesian(${1:args})"} ,
		{"trigger": "readField\tRobotics method", "contents": "readField(${1:args})"} ,
		{"trigger": "readImage\tRobotics method", "contents": "readImage(${1:args})"} ,
		{"trigger": "readMessages\tRobotics method", "contents": "readMessages(${1:args})"} ,
		{"trigger": "readRGB\tRobotics method", "contents": "readRGB(${1:args})"} ,
		{"trigger": "readScanAngles\tRobotics method", "contents": "readScanAngles(${1:args})"} ,
		{"trigger": "readXYZ\tRobotics method", "contents": "readXYZ(${1:args})"} ,
		{"trigger": "receive\tRobotics method", "contents": "receive(${1:args})"} ,
		{"trigger": "roboticsSupportPackages\tRobotics method", "contents": "roboticsSupportPackages(${1:args})"} ,
		{"trigger": "rosbag\tRobotics method", "contents": "rosbag(${1:args})"} ,
		{"trigger": "rosgenmsg\tRobotics method", "contents": "rosgenmsg(${1:args})"} ,
		{"trigger": "rosinit\tRobotics method", "contents": "rosinit(${1:args})"} ,
		{"trigger": "rosmessage\tRobotics method", "contents": "rosmessage(${1:args})"} ,
		{"trigger": "rosmsg\tRobotics method", "contents": "rosmsg(${1:args})"} ,
		{"trigger": "rosnode\tRobotics method", "contents": "rosnode(${1:args})"} ,
		{"trigger": "rosparam\tRobotics method", "contents": "rosparam(${1:args})"} ,
		{"trigger": "rospublisher\tRobotics method", "contents": "rospublisher(${1:args})"} ,
		{"trigger": "rosservice\tRobotics method", "contents": "rosservice(${1:args})"} ,
		{"trigger": "rosshutdown\tRobotics method", "contents": "rosshutdown(${1:args})"} ,
		{"trigger": "rossubscriber\tRobotics method", "contents": "rossubscriber(${1:args})"} ,
		{"trigger": "rossvcclient\tRobotics method", "contents": "rossvcclient(${1:args})"} ,
		{"trigger": "rossvcserver\tRobotics method", "contents": "rossvcserver(${1:args})"} ,
		{"trigger": "rostf\tRobotics method", "contents": "rostf(${1:args})"} ,
		{"trigger": "rostime\tRobotics method", "contents": "rostime(${1:args})"} ,
		{"trigger": "rostopic\tRobotics method", "contents": "rostopic(${1:args})"} ,
		{"trigger": "rostype\tRobotics method", "contents": "rostype(${1:args})"} ,
		{"trigger": "rotm2axang\tRobotics method", "contents": "rotm2axang(${1:args})"} ,
		{"trigger": "rotm2eul\tRobotics method", "contents": "rotm2eul(${1:args})"} ,
		{"trigger": "rotm2quat\tRobotics method", "contents": "rotm2quat(${1:args})"} ,
		{"trigger": "rotm2tform\tRobotics method", "contents": "rotm2tform(${1:args})"} ,
		{"trigger": "search\tRobotics method", "contents": "search(${1:args})"} ,
		{"trigger": "select\tRobotics method", "contents": "select(${1:args})"} ,
		{"trigger": "send\tRobotics method", "contents": "send(${1:args})"} ,
		{"trigger": "sendTransform\tRobotics method", "contents": "sendTransform(${1:args})"} ,
		{"trigger": "showdetails\tRobotics method", "contents": "showdetails(${1:args})"} ,
		{"trigger": "tform2axang\tRobotics method", "contents": "tform2axang(${1:args})"} ,
		{"trigger": "tform2eul\tRobotics method", "contents": "tform2eul(${1:args})"} ,
		{"trigger": "tform2quat\tRobotics method", "contents": "tform2quat(${1:args})"} ,
		{"trigger": "tform2rotm\tRobotics method", "contents": "tform2rotm(${1:args})"} ,
		{"trigger": "tform2trvec\tRobotics method", "contents": "tform2trvec(${1:args})"} ,
		{"trigger": "transform\tRobotics method", "contents": "transform(${1:args})"} ,
		{"trigger": "trvec2tform\tRobotics method", "contents": "trvec2tform(${1:args})"} ,
		{"trigger": "waitForTransform\tRobotics method", "contents": "waitForTransform(${1:args})"} ,
		{"trigger": "writeBinaryOccupancyGrid\tRobotics method", "contents": "writeBinaryOccupancyGrid(${1:args})"} ,
		{"trigger": "writeImage\tRobotics method", "contents": "writeImage(${1:args})"} ,

	]
}
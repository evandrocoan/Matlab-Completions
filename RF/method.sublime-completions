{
	"scope": "source.matlab, source.m",
	"completions":
	[
		{"trigger": "OpenIF\tRF method", "contents": "OpenIF(${1:args})"} ,
		{"trigger": "abcd2h\tRF method", "contents": "abcd2h(${1:args})"} ,
		{"trigger": "abcd2s\tRF method", "contents": "abcd2s(${1:args})"} ,
		{"trigger": "abcd2y\tRF method", "contents": "abcd2y(${1:args})"} ,
		{"trigger": "abcd2z\tRF method", "contents": "abcd2z(${1:args})"} ,
		{"trigger": "abcdparameters\tRF method", "contents": "abcdparameters(${1:args})"} ,
		{"trigger": "addMixer\tRF method", "contents": "addMixer(${1:args})"} ,
		{"trigger": "analyze\tRF method", "contents": "analyze(${1:args})"} ,
		{"trigger": "calculate\tRF method", "contents": "calculate(${1:args})"} ,
		{"trigger": "capacitor\tRF method", "contents": "capacitor(${1:args})"} ,
		{"trigger": "cascadesparams\tRF method", "contents": "cascadesparams(${1:args})"} ,
		{"trigger": "circle\tRF method", "contents": "circle(${1:args})"} ,
		{"trigger": "circuit\tRF method", "contents": "circuit(${1:args})"} ,
		{"trigger": "clone\tRF method", "contents": "clone(${1:args})"} ,
		{"trigger": "copy\tRF method", "contents": "copy(${1:args})"} ,
		{"trigger": "deembedsparams\tRF method", "contents": "deembedsparams(${1:args})"} ,
		{"trigger": "extract\tRF method", "contents": "extract(${1:args})"} ,
		{"trigger": "g2h\tRF method", "contents": "g2h(${1:args})"} ,
		{"trigger": "gamma2z\tRF method", "contents": "gamma2z(${1:args})"} ,
		{"trigger": "gammain\tRF method", "contents": "gammain(${1:args})"} ,
		{"trigger": "gammaml\tRF method", "contents": "gammaml(${1:args})"} ,
		{"trigger": "gammams\tRF method", "contents": "gammams(${1:args})"} ,
		{"trigger": "gammaout\tRF method", "contents": "gammaout(${1:args})"} ,
		{"trigger": "getSpurData\tRF method", "contents": "getSpurData(${1:args})"} ,
		{"trigger": "getSpurFreeZoneData\tRF method", "contents": "getSpurFreeZoneData(${1:args})"} ,
		{"trigger": "getop\tRF method", "contents": "getop(${1:args})"} ,
		{"trigger": "getz0\tRF method", "contents": "getz0(${1:args})"} ,
		{"trigger": "gparameters\tRF method", "contents": "gparameters(${1:args})"} ,
		{"trigger": "groupdelay\tRF method", "contents": "groupdelay(${1:args})"} ,
		{"trigger": "h2abcd\tRF method", "contents": "h2abcd(${1:args})"} ,
		{"trigger": "h2g\tRF method", "contents": "h2g(${1:args})"} ,
		{"trigger": "h2s\tRF method", "contents": "h2s(${1:args})"} ,
		{"trigger": "h2y\tRF method", "contents": "h2y(${1:args})"} ,
		{"trigger": "h2z\tRF method", "contents": "h2z(${1:args})"} ,
		{"trigger": "hparameters\tRF method", "contents": "hparameters(${1:args})"} ,
		{"trigger": "inductor\tRF method", "contents": "inductor(${1:args})"} ,
		{"trigger": "ispassive\tRF method", "contents": "ispassive(${1:args})"} ,
		{"trigger": "lcladder\tRF method", "contents": "lcladder(${1:args})"} ,
		{"trigger": "listformat\tRF method", "contents": "listformat(${1:args})"} ,
		{"trigger": "listparam\tRF method", "contents": "listparam(${1:args})"} ,
		{"trigger": "makepassive\tRF method", "contents": "makepassive(${1:args})"} ,
		{"trigger": "newref\tRF method", "contents": "newref(${1:args})"} ,
		{"trigger": "nport\tRF method", "contents": "nport(${1:args})"} ,
		{"trigger": "powergain\tRF method", "contents": "powergain(${1:args})"} ,
		{"trigger": "rationalfit\tRF method", "contents": "rationalfit(${1:args})"} ,
		{"trigger": "resistor\tRF method", "contents": "resistor(${1:args})"} ,
		{"trigger": "restore\tRF method", "contents": "restore(${1:args})"} ,
		{"trigger": "rfchain\tRF method", "contents": "rfchain(${1:args})"} ,
		{"trigger": "rfckt.amplifier\tRF method", "contents": "rfckt.amplifier(${1:args})"} ,
		{"trigger": "rfckt.cascade\tRF method", "contents": "rfckt.cascade(${1:args})"} ,
		{"trigger": "rfckt.coaxial\tRF method", "contents": "rfckt.coaxial(${1:args})"} ,
		{"trigger": "rfckt.cpw\tRF method", "contents": "rfckt.cpw(${1:args})"} ,
		{"trigger": "rfckt.datafile\tRF method", "contents": "rfckt.datafile(${1:args})"} ,
		{"trigger": "rfckt.delay\tRF method", "contents": "rfckt.delay(${1:args})"} ,
		{"trigger": "rfckt.hybrid\tRF method", "contents": "rfckt.hybrid(${1:args})"} ,
		{"trigger": "rfckt.hybridg\tRF method", "contents": "rfckt.hybridg(${1:args})"} ,
		{"trigger": "rfckt.lcbandpasspi\tRF method", "contents": "rfckt.lcbandpasspi(${1:args})"} ,
		{"trigger": "rfckt.lcbandpasstee\tRF method", "contents": "rfckt.lcbandpasstee(${1:args})"} ,
		{"trigger": "rfckt.lcbandstoppi\tRF method", "contents": "rfckt.lcbandstoppi(${1:args})"} ,
		{"trigger": "rfckt.lcbandstoptee\tRF method", "contents": "rfckt.lcbandstoptee(${1:args})"} ,
		{"trigger": "rfckt.lchighpasspi\tRF method", "contents": "rfckt.lchighpasspi(${1:args})"} ,
		{"trigger": "rfckt.lchighpasstee\tRF method", "contents": "rfckt.lchighpasstee(${1:args})"} ,
		{"trigger": "rfckt.lclowpasspi\tRF method", "contents": "rfckt.lclowpasspi(${1:args})"} ,
		{"trigger": "rfckt.lclowpasstee\tRF method", "contents": "rfckt.lclowpasstee(${1:args})"} ,
		{"trigger": "rfckt.microstrip\tRF method", "contents": "rfckt.microstrip(${1:args})"} ,
		{"trigger": "rfckt.mixer\tRF method", "contents": "rfckt.mixer(${1:args})"} ,
		{"trigger": "rfckt.parallel\tRF method", "contents": "rfckt.parallel(${1:args})"} ,
		{"trigger": "rfckt.parallelplate\tRF method", "contents": "rfckt.parallelplate(${1:args})"} ,
		{"trigger": "rfckt.passive\tRF method", "contents": "rfckt.passive(${1:args})"} ,
		{"trigger": "rfckt.rlcgline\tRF method", "contents": "rfckt.rlcgline(${1:args})"} ,
		{"trigger": "rfckt.series\tRF method", "contents": "rfckt.series(${1:args})"} ,
		{"trigger": "rfckt.seriesrlc\tRF method", "contents": "rfckt.seriesrlc(${1:args})"} ,
		{"trigger": "rfckt.shuntrlc\tRF method", "contents": "rfckt.shuntrlc(${1:args})"} ,
		{"trigger": "rfckt.twowire\tRF method", "contents": "rfckt.twowire(${1:args})"} ,
		{"trigger": "rfckt.txline\tRF method", "contents": "rfckt.txline(${1:args})"} ,
		{"trigger": "rfdata.data\tRF method", "contents": "rfdata.data(${1:args})"} ,
		{"trigger": "rfdata.ip3\tRF method", "contents": "rfdata.ip3(${1:args})"} ,
		{"trigger": "rfdata.mixerspur\tRF method", "contents": "rfdata.mixerspur(${1:args})"} ,
		{"trigger": "rfdata.network\tRF method", "contents": "rfdata.network(${1:args})"} ,
		{"trigger": "rfdata.nf\tRF method", "contents": "rfdata.nf(${1:args})"} ,
		{"trigger": "rfdata.noise\tRF method", "contents": "rfdata.noise(${1:args})"} ,
		{"trigger": "rfdata.power\tRF method", "contents": "rfdata.power(${1:args})"} ,
		{"trigger": "rfinterp1\tRF method", "contents": "rfinterp1(${1:args})"} ,
		{"trigger": "rfmodel.rational\tRF method", "contents": "rfmodel.rational(${1:args})"} ,
		{"trigger": "rfmodel.rational.ispassive\tRF method", "contents": "rfmodel.rational.ispassive(${1:args})"} ,
		{"trigger": "rfparam\tRF method", "contents": "rfparam(${1:args})"} ,
		{"trigger": "rfplot\tRF method", "contents": "rfplot(${1:args})"} ,
		{"trigger": "rftool\tRF method", "contents": "rftool(${1:args})"} ,
		{"trigger": "rfwrite\tRF method", "contents": "rfwrite(${1:args})"} ,
		{"trigger": "rlgc2s\tRF method", "contents": "rlgc2s(${1:args})"} ,
		{"trigger": "s2abcd\tRF method", "contents": "s2abcd(${1:args})"} ,
		{"trigger": "s2h\tRF method", "contents": "s2h(${1:args})"} ,
		{"trigger": "s2rlgc\tRF method", "contents": "s2rlgc(${1:args})"} ,
		{"trigger": "s2s\tRF method", "contents": "s2s(${1:args})"} ,
		{"trigger": "s2scc\tRF method", "contents": "s2scc(${1:args})"} ,
		{"trigger": "s2scd\tRF method", "contents": "s2scd(${1:args})"} ,
		{"trigger": "s2sdc\tRF method", "contents": "s2sdc(${1:args})"} ,
		{"trigger": "s2sdd\tRF method", "contents": "s2sdd(${1:args})"} ,
		{"trigger": "s2smm\tRF method", "contents": "s2smm(${1:args})"} ,
		{"trigger": "s2t\tRF method", "contents": "s2t(${1:args})"} ,
		{"trigger": "s2tf\tRF method", "contents": "s2tf(${1:args})"} ,
		{"trigger": "s2y\tRF method", "contents": "s2y(${1:args})"} ,
		{"trigger": "s2z\tRF method", "contents": "s2z(${1:args})"} ,
		{"trigger": "setop\tRF method", "contents": "setop(${1:args})"} ,
		{"trigger": "setports\tRF method", "contents": "setports(${1:args})"} ,
		{"trigger": "setterminals\tRF method", "contents": "setterminals(${1:args})"} ,
		{"trigger": "smith\tRF method", "contents": "smith(${1:args})"} ,
		{"trigger": "smithchart\tRF method", "contents": "smithchart(${1:args})"} ,
		{"trigger": "smm2s\tRF method", "contents": "smm2s(${1:args})"} ,
		{"trigger": "snp2smp\tRF method", "contents": "snp2smp(${1:args})"} ,
		{"trigger": "stabilityk\tRF method", "contents": "stabilityk(${1:args})"} ,
		{"trigger": "stabilitymu\tRF method", "contents": "stabilitymu(${1:args})"} ,
		{"trigger": "stepresp\tRF method", "contents": "stepresp(${1:args})"} ,
		{"trigger": "t2s\tRF method", "contents": "t2s(${1:args})"} ,
		{"trigger": "timeresp\tRF method", "contents": "timeresp(${1:args})"} ,
		{"trigger": "tparameters\tRF method", "contents": "tparameters(${1:args})"} ,
		{"trigger": "writeva\tRF method", "contents": "writeva(${1:args})"} ,
		{"trigger": "y2abcd\tRF method", "contents": "y2abcd(${1:args})"} ,
		{"trigger": "y2h\tRF method", "contents": "y2h(${1:args})"} ,
		{"trigger": "y2s\tRF method", "contents": "y2s(${1:args})"} ,
		{"trigger": "y2z\tRF method", "contents": "y2z(${1:args})"} ,
		{"trigger": "yparameters\tRF method", "contents": "yparameters(${1:args})"} ,
		{"trigger": "z2abcd\tRF method", "contents": "z2abcd(${1:args})"} ,
		{"trigger": "z2gamma\tRF method", "contents": "z2gamma(${1:args})"} ,
		{"trigger": "z2h\tRF method", "contents": "z2h(${1:args})"} ,
		{"trigger": "z2s\tRF method", "contents": "z2s(${1:args})"} ,
		{"trigger": "z2y\tRF method", "contents": "z2y(${1:args})"} ,
		{"trigger": "zparameters\tRF method", "contents": "zparameters(${1:args})"} ,

	]
}
{
	"scope": "source.matlab, source.m",
	"completions":
	[
		{"trigger": "BRISKPoints\tVision method", "contents": "BRISKPoints(${1:args})"} ,
		{"trigger": "MSERRegions\tVision method", "contents": "MSERRegions(${1:args})"} ,
		{"trigger": "SURFPoints\tVision method", "contents": "SURFPoints(${1:args})"} ,
		{"trigger": "affine2d\tVision method", "contents": "affine2d(${1:args})"} ,
		{"trigger": "affine3d\tVision method", "contents": "affine3d(${1:args})"} ,
		{"trigger": "alignColorToDepth\tVision method", "contents": "alignColorToDepth(${1:args})"} ,
		{"trigger": "assignDetectionsToTracks\tVision method", "contents": "assignDetectionsToTracks(${1:args})"} ,
		{"trigger": "bagOfFeatures\tVision method", "contents": "bagOfFeatures(${1:args})"} ,
		{"trigger": "bbox2points\tVision method", "contents": "bbox2points(${1:args})"} ,
		{"trigger": "bboxOverlapRatio\tVision method", "contents": "bboxOverlapRatio(${1:args})"} ,
		{"trigger": "binaryFeatures\tVision method", "contents": "binaryFeatures(${1:args})"} ,
		{"trigger": "bwconncomp\tVision method", "contents": "bwconncomp(${1:args})"} ,
		{"trigger": "bwlabel\tVision method", "contents": "bwlabel(${1:args})"} ,
		{"trigger": "bwlabeln\tVision method", "contents": "bwlabeln(${1:args})"} ,
		{"trigger": "bwmorph\tVision method", "contents": "bwmorph(${1:args})"} ,
		{"trigger": "cameraCalibrationErrors\tVision method", "contents": "cameraCalibrationErrors(${1:args})"} ,
		{"trigger": "cameraMatrix\tVision method", "contents": "cameraMatrix(${1:args})"} ,
		{"trigger": "cameraParameters\tVision method", "contents": "cameraParameters(${1:args})"} ,
		{"trigger": "cameraPose\tVision method", "contents": "cameraPose(${1:args})"} ,
		{"trigger": "configureKalmanFilter\tVision method", "contents": "configureKalmanFilter(${1:args})"} ,
		{"trigger": "cornerPoints\tVision method", "contents": "cornerPoints(${1:args})"} ,
		{"trigger": "cylinderModel\tVision method", "contents": "cylinderModel(${1:args})"} ,
		{"trigger": "depthToPointCloud\tVision method", "contents": "depthToPointCloud(${1:args})"} ,
		{"trigger": "detectBRISKFeatures\tVision method", "contents": "detectBRISKFeatures(${1:args})"} ,
		{"trigger": "detectCheckerboardPoints\tVision method", "contents": "detectCheckerboardPoints(${1:args})"} ,
		{"trigger": "detectFASTFeatures\tVision method", "contents": "detectFASTFeatures(${1:args})"} ,
		{"trigger": "detectHarrisFeatures\tVision method", "contents": "detectHarrisFeatures(${1:args})"} ,
		{"trigger": "detectMSERFeatures\tVision method", "contents": "detectMSERFeatures(${1:args})"} ,
		{"trigger": "detectMinEigenFeatures\tVision method", "contents": "detectMinEigenFeatures(${1:args})"} ,
		{"trigger": "detectSURFFeatures\tVision method", "contents": "detectSURFFeatures(${1:args})"} ,
		{"trigger": "disparity\tVision method", "contents": "disparity(${1:args})"} ,
		{"trigger": "epipolarLine\tVision method", "contents": "epipolarLine(${1:args})"} ,
		{"trigger": "estimateCameraParameters\tVision method", "contents": "estimateCameraParameters(${1:args})"} ,
		{"trigger": "estimateFundamentalMatrix\tVision method", "contents": "estimateFundamentalMatrix(${1:args})"} ,
		{"trigger": "estimateGeometricTransform\tVision method", "contents": "estimateGeometricTransform(${1:args})"} ,
		{"trigger": "estimateUncalibratedRectification\tVision method", "contents": "estimateUncalibratedRectification(${1:args})"} ,
		{"trigger": "evaluateImageRetrieval\tVision method", "contents": "evaluateImageRetrieval(${1:args})"} ,
		{"trigger": "extractFeatures\tVision method", "contents": "extractFeatures(${1:args})"} ,
		{"trigger": "extractHOGFeatures\tVision method", "contents": "extractHOGFeatures(${1:args})"} ,
		{"trigger": "extractLBPFeatures\tVision method", "contents": "extractLBPFeatures(${1:args})"} ,
		{"trigger": "extrinsics\tVision method", "contents": "extrinsics(${1:args})"} ,
		{"trigger": "extrinsicsEstimationErrors\tVision method", "contents": "extrinsicsEstimationErrors(${1:args})"} ,
		{"trigger": "findNearestNeighbors\tVision method", "contents": "findNearestNeighbors(${1:args})"} ,
		{"trigger": "findNeighborsInRadius\tVision method", "contents": "findNeighborsInRadius(${1:args})"} ,
		{"trigger": "findPointsInROI\tVision method", "contents": "findPointsInROI(${1:args})"} ,
		{"trigger": "generateCheckerboardPoints\tVision method", "contents": "generateCheckerboardPoints(${1:args})"} ,
		{"trigger": "imageCategoryClassifier\tVision method", "contents": "imageCategoryClassifier(${1:args})"} ,
		{"trigger": "imageSet\tVision method", "contents": "imageSet(${1:args})"} ,
		{"trigger": "imbothat\tVision method", "contents": "imbothat(${1:args})"} ,
		{"trigger": "imclose\tVision method", "contents": "imclose(${1:args})"} ,
		{"trigger": "imdilate\tVision method", "contents": "imdilate(${1:args})"} ,
		{"trigger": "imerode\tVision method", "contents": "imerode(${1:args})"} ,
		{"trigger": "imopen\tVision method", "contents": "imopen(${1:args})"} ,
		{"trigger": "imreconstruct\tVision method", "contents": "imreconstruct(${1:args})"} ,
		{"trigger": "imtophat\tVision method", "contents": "imtophat(${1:args})"} ,
		{"trigger": "imwarp\tVision method", "contents": "imwarp(${1:args})"} ,
		{"trigger": "indexImages\tVision method", "contents": "indexImages(${1:args})"} ,
		{"trigger": "insertMarker\tVision method", "contents": "insertMarker(${1:args})"} ,
		{"trigger": "insertObjectAnnotation\tVision method", "contents": "insertObjectAnnotation(${1:args})"} ,
		{"trigger": "insertShape\tVision method", "contents": "insertShape(${1:args})"} ,
		{"trigger": "insertText\tVision method", "contents": "insertText(${1:args})"} ,
		{"trigger": "integralFilter\tVision method", "contents": "integralFilter(${1:args})"} ,
		{"trigger": "integralImage\tVision method", "contents": "integralImage(${1:args})"} ,
		{"trigger": "integralKernel\tVision method", "contents": "integralKernel(${1:args})"} ,
		{"trigger": "intrinsicsEstimationErrors\tVision method", "contents": "intrinsicsEstimationErrors(${1:args})"} ,
		{"trigger": "invertedImageIndex\tVision method", "contents": "invertedImageIndex(${1:args})"} ,
		{"trigger": "isEpipoleInImage\tVision method", "contents": "isEpipoleInImage(${1:args})"} ,
		{"trigger": "isfilterseparable\tVision method", "contents": "isfilterseparable(${1:args})"} ,
		{"trigger": "lineToBorderPoints\tVision method", "contents": "lineToBorderPoints(${1:args})"} ,
		{"trigger": "listTrueTypeFonts\tVision method", "contents": "listTrueTypeFonts(${1:args})"} ,
		{"trigger": "matchFeatures\tVision method", "contents": "matchFeatures(${1:args})"} ,
		{"trigger": "ocr\tVision method", "contents": "ocr(${1:args})"} ,
		{"trigger": "ocrText\tVision method", "contents": "ocrText(${1:args})"} ,
		{"trigger": "ocvCheckFeaturePointsStruct\tVision method", "contents": "ocvCheckFeaturePointsStruct(${1:args})"} ,
		{"trigger": "ocvCvBox2DToMxArray\tVision method", "contents": "ocvCvBox2DToMxArray(${1:args})"} ,
		{"trigger": "ocvCvRectToMxArray\tVision method", "contents": "ocvCvRectToMxArray(${1:args})"} ,
		{"trigger": "ocvKeyPointsToStruct\tVision method", "contents": "ocvKeyPointsToStruct(${1:args})"} ,
		{"trigger": "ocvMxArrayFromPoints2f\tVision method", "contents": "ocvMxArrayFromPoints2f(${1:args})"} ,
		{"trigger": "ocvMxArrayFromVector\tVision method", "contents": "ocvMxArrayFromVector(${1:args})"} ,
		{"trigger": "ocvMxArrayToCvRect\tVision method", "contents": "ocvMxArrayToCvRect(${1:args})"} ,
		{"trigger": "ocvMxArrayToSize\tVision method", "contents": "ocvMxArrayToSize(${1:args})"} ,
		{"trigger": "ocvStructToKeyPoints\tVision method", "contents": "ocvStructToKeyPoints(${1:args})"} ,
		{"trigger": "opticalFlow\tVision method", "contents": "opticalFlow(${1:args})"} ,
		{"trigger": "opticalFlowFarneback\tVision method", "contents": "opticalFlowFarneback(${1:args})"} ,
		{"trigger": "opticalFlowHS\tVision method", "contents": "opticalFlowHS(${1:args})"} ,
		{"trigger": "opticalFlowLK\tVision method", "contents": "opticalFlowLK(${1:args})"} ,
		{"trigger": "opticalFlowLKDoG\tVision method", "contents": "opticalFlowLKDoG(${1:args})"} ,
		{"trigger": "pcdenoise\tVision method", "contents": "pcdenoise(${1:args})"} ,
		{"trigger": "pcdownsample\tVision method", "contents": "pcdownsample(${1:args})"} ,
		{"trigger": "pcfitcylinder\tVision method", "contents": "pcfitcylinder(${1:args})"} ,
		{"trigger": "pcfitplane\tVision method", "contents": "pcfitplane(${1:args})"} ,
		{"trigger": "pcfitsphere\tVision method", "contents": "pcfitsphere(${1:args})"} ,
		{"trigger": "pcfromkinect\tVision method", "contents": "pcfromkinect(${1:args})"} ,
		{"trigger": "pcmerge\tVision method", "contents": "pcmerge(${1:args})"} ,
		{"trigger": "pcnormals\tVision method", "contents": "pcnormals(${1:args})"} ,
		{"trigger": "pcplayer\tVision method", "contents": "pcplayer(${1:args})"} ,
		{"trigger": "pcread\tVision method", "contents": "pcread(${1:args})"} ,
		{"trigger": "pcregrigid\tVision method", "contents": "pcregrigid(${1:args})"} ,
		{"trigger": "pcshow\tVision method", "contents": "pcshow(${1:args})"} ,
		{"trigger": "pcshowpair\tVision method", "contents": "pcshowpair(${1:args})"} ,
		{"trigger": "pctransform\tVision method", "contents": "pctransform(${1:args})"} ,
		{"trigger": "pcwrite\tVision method", "contents": "pcwrite(${1:args})"} ,
		{"trigger": "planeModel\tVision method", "contents": "planeModel(${1:args})"} ,
		{"trigger": "plotCamera\tVision method", "contents": "plotCamera(${1:args})"} ,
		{"trigger": "pointCloud\tVision method", "contents": "pointCloud(${1:args})"} ,
		{"trigger": "projective2d\tVision method", "contents": "projective2d(${1:args})"} ,
		{"trigger": "reconstructScene\tVision method", "contents": "reconstructScene(${1:args})"} ,
		{"trigger": "rectifyStereoImages\tVision method", "contents": "rectifyStereoImages(${1:args})"} ,
		{"trigger": "removeInvalidPoints\tVision method", "contents": "removeInvalidPoints(${1:args})"} ,
		{"trigger": "retrieveImages\tVision method", "contents": "retrieveImages(${1:args})"} ,
		{"trigger": "selectStrongestBbox\tVision method", "contents": "selectStrongestBbox(${1:args})"} ,
		{"trigger": "showExtrinsics\tVision method", "contents": "showExtrinsics(${1:args})"} ,
		{"trigger": "showMatchedFeatures\tVision method", "contents": "showMatchedFeatures(${1:args})"} ,
		{"trigger": "showReprojectionErrors\tVision method", "contents": "showReprojectionErrors(${1:args})"} ,
		{"trigger": "sphereModel\tVision method", "contents": "sphereModel(${1:args})"} ,
		{"trigger": "stereoAnaglyph\tVision method", "contents": "stereoAnaglyph(${1:args})"} ,
		{"trigger": "stereoCalibrationErrors\tVision method", "contents": "stereoCalibrationErrors(${1:args})"} ,
		{"trigger": "stereoParameters\tVision method", "contents": "stereoParameters(${1:args})"} ,
		{"trigger": "trainCascadeObjectDetector\tVision method", "contents": "trainCascadeObjectDetector(${1:args})"} ,
		{"trigger": "trainImageCategoryClassifier\tVision method", "contents": "trainImageCategoryClassifier(${1:args})"} ,
		{"trigger": "triangulate\tVision method", "contents": "triangulate(${1:args})"} ,
		{"trigger": "undistortImage\tVision method", "contents": "undistortImage(${1:args})"} ,
		{"trigger": "undistortPoints\tVision method", "contents": "undistortPoints(${1:args})"} ,
		{"trigger": "vision.AlphaBlender\tVision method", "contents": "vision.AlphaBlender(${1:args})"} ,
		{"trigger": "vision.Autocorrelator\tVision method", "contents": "vision.Autocorrelator(${1:args})"} ,
		{"trigger": "vision.Autothresholder\tVision method", "contents": "vision.Autothresholder(${1:args})"} ,
		{"trigger": "vision.BinaryFileReader\tVision method", "contents": "vision.BinaryFileReader(${1:args})"} ,
		{"trigger": "vision.BinaryFileWriter\tVision method", "contents": "vision.BinaryFileWriter(${1:args})"} ,
		{"trigger": "vision.BlobAnalysis\tVision method", "contents": "vision.BlobAnalysis(${1:args})"} ,
		{"trigger": "vision.BlockMatcher\tVision method", "contents": "vision.BlockMatcher(${1:args})"} ,
		{"trigger": "vision.BoundaryTracer\tVision method", "contents": "vision.BoundaryTracer(${1:args})"} ,
		{"trigger": "vision.CascadeObjectDetector\tVision method", "contents": "vision.CascadeObjectDetector(${1:args})"} ,
		{"trigger": "vision.ChromaResampler\tVision method", "contents": "vision.ChromaResampler(${1:args})"} ,
		{"trigger": "vision.ColorSpaceConverter\tVision method", "contents": "vision.ColorSpaceConverter(${1:args})"} ,
		{"trigger": "vision.ConnectedComponentLabeler\tVision method", "contents": "vision.ConnectedComponentLabeler(${1:args})"} ,
		{"trigger": "vision.ContrastAdjuster\tVision method", "contents": "vision.ContrastAdjuster(${1:args})"} ,
		{"trigger": "vision.Convolver\tVision method", "contents": "vision.Convolver(${1:args})"} ,
		{"trigger": "vision.Crosscorrelator\tVision method", "contents": "vision.Crosscorrelator(${1:args})"} ,
		{"trigger": "vision.DCT\tVision method", "contents": "vision.DCT(${1:args})"} ,
		{"trigger": "vision.Deinterlacer\tVision method", "contents": "vision.Deinterlacer(${1:args})"} ,
		{"trigger": "vision.DemosaicInterpolator\tVision method", "contents": "vision.DemosaicInterpolator(${1:args})"} ,
		{"trigger": "vision.DeployableVideoPlayer\tVision method", "contents": "vision.DeployableVideoPlayer(${1:args})"} ,
		{"trigger": "vision.EdgeDetector\tVision method", "contents": "vision.EdgeDetector(${1:args})"} ,
		{"trigger": "vision.FFT\tVision method", "contents": "vision.FFT(${1:args})"} ,
		{"trigger": "vision.ForegroundDetector\tVision method", "contents": "vision.ForegroundDetector(${1:args})"} ,
		{"trigger": "vision.GammaCorrector\tVision method", "contents": "vision.GammaCorrector(${1:args})"} ,
		{"trigger": "vision.GeometricRotator\tVision method", "contents": "vision.GeometricRotator(${1:args})"} ,
		{"trigger": "vision.GeometricScaler\tVision method", "contents": "vision.GeometricScaler(${1:args})"} ,
		{"trigger": "vision.GeometricShearer\tVision method", "contents": "vision.GeometricShearer(${1:args})"} ,
		{"trigger": "vision.GeometricTransformEstimator\tVision method", "contents": "vision.GeometricTransformEstimator(${1:args})"} ,
		{"trigger": "vision.GeometricTransformer\tVision method", "contents": "vision.GeometricTransformer(${1:args})"} ,
		{"trigger": "vision.GeometricTranslator\tVision method", "contents": "vision.GeometricTranslator(${1:args})"} ,
		{"trigger": "vision.Histogram\tVision method", "contents": "vision.Histogram(${1:args})"} ,
		{"trigger": "vision.HistogramBasedTracker\tVision method", "contents": "vision.HistogramBasedTracker(${1:args})"} ,
		{"trigger": "vision.HistogramEqualizer\tVision method", "contents": "vision.HistogramEqualizer(${1:args})"} ,
		{"trigger": "vision.HoughLines\tVision method", "contents": "vision.HoughLines(${1:args})"} ,
		{"trigger": "vision.HoughTransform\tVision method", "contents": "vision.HoughTransform(${1:args})"} ,
		{"trigger": "vision.IDCT\tVision method", "contents": "vision.IDCT(${1:args})"} ,
		{"trigger": "vision.IFFT\tVision method", "contents": "vision.IFFT(${1:args})"} ,
		{"trigger": "vision.ImageComplementer\tVision method", "contents": "vision.ImageComplementer(${1:args})"} ,
		{"trigger": "vision.ImageDataTypeConverter\tVision method", "contents": "vision.ImageDataTypeConverter(${1:args})"} ,
		{"trigger": "vision.ImageFilter\tVision method", "contents": "vision.ImageFilter(${1:args})"} ,
		{"trigger": "vision.ImagePadder\tVision method", "contents": "vision.ImagePadder(${1:args})"} ,
		{"trigger": "vision.KalmanFilter\tVision method", "contents": "vision.KalmanFilter(${1:args})"} ,
		{"trigger": "vision.LocalMaximaFinder\tVision method", "contents": "vision.LocalMaximaFinder(${1:args})"} ,
		{"trigger": "vision.MarkerInserter\tVision method", "contents": "vision.MarkerInserter(${1:args})"} ,
		{"trigger": "vision.Maximum\tVision method", "contents": "vision.Maximum(${1:args})"} ,
		{"trigger": "vision.Mean\tVision method", "contents": "vision.Mean(${1:args})"} ,
		{"trigger": "vision.Median\tVision method", "contents": "vision.Median(${1:args})"} ,
		{"trigger": "vision.MedianFilter\tVision method", "contents": "vision.MedianFilter(${1:args})"} ,
		{"trigger": "vision.Minimum\tVision method", "contents": "vision.Minimum(${1:args})"} ,
		{"trigger": "vision.MorphologicalBottomHat\tVision method", "contents": "vision.MorphologicalBottomHat(${1:args})"} ,
		{"trigger": "vision.MorphologicalClose\tVision method", "contents": "vision.MorphologicalClose(${1:args})"} ,
		{"trigger": "vision.MorphologicalDilate\tVision method", "contents": "vision.MorphologicalDilate(${1:args})"} ,
		{"trigger": "vision.MorphologicalErode\tVision method", "contents": "vision.MorphologicalErode(${1:args})"} ,
		{"trigger": "vision.MorphologicalOpen\tVision method", "contents": "vision.MorphologicalOpen(${1:args})"} ,
		{"trigger": "vision.MorphologicalTopHat\tVision method", "contents": "vision.MorphologicalTopHat(${1:args})"} ,
		{"trigger": "vision.OpticalFlow\tVision method", "contents": "vision.OpticalFlow(${1:args})"} ,
		{"trigger": "vision.PSNR\tVision method", "contents": "vision.PSNR(${1:args})"} ,
		{"trigger": "vision.PeopleDetector\tVision method", "contents": "vision.PeopleDetector(${1:args})"} ,
		{"trigger": "vision.PointTracker\tVision method", "contents": "vision.PointTracker(${1:args})"} ,
		{"trigger": "vision.Pyramid\tVision method", "contents": "vision.Pyramid(${1:args})"} ,
		{"trigger": "vision.ShapeInserter\tVision method", "contents": "vision.ShapeInserter(${1:args})"} ,
		{"trigger": "vision.StandardDeviation\tVision method", "contents": "vision.StandardDeviation(${1:args})"} ,
		{"trigger": "vision.TemplateMatcher\tVision method", "contents": "vision.TemplateMatcher(${1:args})"} ,
		{"trigger": "vision.TextInserter\tVision method", "contents": "vision.TextInserter(${1:args})"} ,
		{"trigger": "vision.Variance\tVision method", "contents": "vision.Variance(${1:args})"} ,
		{"trigger": "vision.VideoFileReader\tVision method", "contents": "vision.VideoFileReader(${1:args})"} ,
		{"trigger": "vision.VideoFileWriter\tVision method", "contents": "vision.VideoFileWriter(${1:args})"} ,
		{"trigger": "vision.VideoPlayer\tVision method", "contents": "vision.VideoPlayer(${1:args})"} ,
		{"trigger": "visionSupportPackages\tVision method", "contents": "visionSupportPackages(${1:args})"} ,

	]
}
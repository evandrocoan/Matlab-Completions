{
	"scope": "source.matlab, source.m",
	"completions":
	[
		{"trigger": "WMSCapabilities\tMap method", "contents": "WMSCapabilities(${1:args})"} ,
		{"trigger": "WMSLayer\tMap method", "contents": "WMSLayer(${1:args})"} ,
		{"trigger": "WMSMapRequest\tMap method", "contents": "WMSMapRequest(${1:args})"} ,
		{"trigger": "WebMapServer\tMap method", "contents": "WebMapServer(${1:args})"} ,
		{"trigger": "aer2ecef\tMap method", "contents": "aer2ecef(${1:args})"} ,
		{"trigger": "aer2enu\tMap method", "contents": "aer2enu(${1:args})"} ,
		{"trigger": "aer2geodetic\tMap method", "contents": "aer2geodetic(${1:args})"} ,
		{"trigger": "aer2ned\tMap method", "contents": "aer2ned(${1:args})"} ,
		{"trigger": "angl2str\tMap method", "contents": "angl2str(${1:args})"} ,
		{"trigger": "antipode\tMap method", "contents": "antipode(${1:args})"} ,
		{"trigger": "arcgridread\tMap method", "contents": "arcgridread(${1:args})"} ,
		{"trigger": "areaint\tMap method", "contents": "areaint(${1:args})"} ,
		{"trigger": "areamat\tMap method", "contents": "areamat(${1:args})"} ,
		{"trigger": "areaquad\tMap method", "contents": "areaquad(${1:args})"} ,
		{"trigger": "avhrrgoode\tMap method", "contents": "avhrrgoode(${1:args})"} ,
		{"trigger": "avhrrlambert\tMap method", "contents": "avhrrlambert(${1:args})"} ,
		{"trigger": "axes2ecc\tMap method", "contents": "axes2ecc(${1:args})"} ,
		{"trigger": "axesm\tMap method", "contents": "axesm(${1:args})"} ,
		{"trigger": "axesmui\tMap method", "contents": "axesmui(${1:args})"} ,
		{"trigger": "azimuth\tMap method", "contents": "azimuth(${1:args})"} ,
		{"trigger": "bufferm\tMap method", "contents": "bufferm(${1:args})"} ,
		{"trigger": "bufgeoquad\tMap method", "contents": "bufgeoquad(${1:args})"} ,
		{"trigger": "camposm\tMap method", "contents": "camposm(${1:args})"} ,
		{"trigger": "camtargm\tMap method", "contents": "camtargm(${1:args})"} ,
		{"trigger": "camupm\tMap method", "contents": "camupm(${1:args})"} ,
		{"trigger": "clabelm\tMap method", "contents": "clabelm(${1:args})"} ,
		{"trigger": "clegendm\tMap method", "contents": "clegendm(${1:args})"} ,
		{"trigger": "clipdata\tMap method", "contents": "clipdata(${1:args})"} ,
		{"trigger": "clma\tMap method", "contents": "clma(${1:args})"} ,
		{"trigger": "closePolygonParts\tMap method", "contents": "closePolygonParts(${1:args})"} ,
		{"trigger": "clrmenu\tMap method", "contents": "clrmenu(${1:args})"} ,
		{"trigger": "contour3m\tMap method", "contents": "contour3m(${1:args})"} ,
		{"trigger": "contourcbar\tMap method", "contents": "contourcbar(${1:args})"} ,
		{"trigger": "contourcmap\tMap method", "contents": "contourcmap(${1:args})"} ,
		{"trigger": "contourfm\tMap method", "contents": "contourfm(${1:args})"} ,
		{"trigger": "contourm\tMap method", "contents": "contourm(${1:args})"} ,
		{"trigger": "daspectm\tMap method", "contents": "daspectm(${1:args})"} ,
		{"trigger": "defaultm\tMap method", "contents": "defaultm(${1:args})"} ,
		{"trigger": "deg2km\tMap method", "contents": "deg2km(${1:args})"} ,
		{"trigger": "deg2nm\tMap method", "contents": "deg2nm(${1:args})"} ,
		{"trigger": "deg2sm\tMap method", "contents": "deg2sm(${1:args})"} ,
		{"trigger": "degrees2dm\tMap method", "contents": "degrees2dm(${1:args})"} ,
		{"trigger": "degrees2dms\tMap method", "contents": "degrees2dms(${1:args})"} ,
		{"trigger": "demcmap\tMap method", "contents": "demcmap(${1:args})"} ,
		{"trigger": "demdataui\tMap method", "contents": "demdataui(${1:args})"} ,
		{"trigger": "departure\tMap method", "contents": "departure(${1:args})"} ,
		{"trigger": "distance\tMap method", "contents": "distance(${1:args})"} ,
		{"trigger": "distortcalc\tMap method", "contents": "distortcalc(${1:args})"} ,
		{"trigger": "dm2degrees\tMap method", "contents": "dm2degrees(${1:args})"} ,
		{"trigger": "dms2degrees\tMap method", "contents": "dms2degrees(${1:args})"} ,
		{"trigger": "dted\tMap method", "contents": "dted(${1:args})"} ,
		{"trigger": "dteds\tMap method", "contents": "dteds(${1:args})"} ,
		{"trigger": "earthRadius\tMap method", "contents": "earthRadius(${1:args})"} ,
		{"trigger": "ecc2flat\tMap method", "contents": "ecc2flat(${1:args})"} ,
		{"trigger": "ecc2n\tMap method", "contents": "ecc2n(${1:args})"} ,
		{"trigger": "ecef2aer\tMap method", "contents": "ecef2aer(${1:args})"} ,
		{"trigger": "ecef2enu\tMap method", "contents": "ecef2enu(${1:args})"} ,
		{"trigger": "ecef2enuv\tMap method", "contents": "ecef2enuv(${1:args})"} ,
		{"trigger": "ecef2geodetic\tMap method", "contents": "ecef2geodetic(${1:args})"} ,
		{"trigger": "ecef2lv\tMap method", "contents": "ecef2lv(${1:args})"} ,
		{"trigger": "ecef2ned\tMap method", "contents": "ecef2ned(${1:args})"} ,
		{"trigger": "ecef2nedv\tMap method", "contents": "ecef2nedv(${1:args})"} ,
		{"trigger": "ecefOffset\tMap method", "contents": "ecefOffset(${1:args})"} ,
		{"trigger": "egm96geoid\tMap method", "contents": "egm96geoid(${1:args})"} ,
		{"trigger": "ellipse1\tMap method", "contents": "ellipse1(${1:args})"} ,
		{"trigger": "enu2aer\tMap method", "contents": "enu2aer(${1:args})"} ,
		{"trigger": "enu2ecef\tMap method", "contents": "enu2ecef(${1:args})"} ,
		{"trigger": "enu2ecefv\tMap method", "contents": "enu2ecefv(${1:args})"} ,
		{"trigger": "enu2geodetic\tMap method", "contents": "enu2geodetic(${1:args})"} ,
		{"trigger": "etopo\tMap method", "contents": "etopo(${1:args})"} ,
		{"trigger": "etopo5\tMap method", "contents": "etopo5(${1:args})"} ,
		{"trigger": "extractfield\tMap method", "contents": "extractfield(${1:args})"} ,
		{"trigger": "flat2ecc\tMap method", "contents": "flat2ecc(${1:args})"} ,
		{"trigger": "flatearthpoly\tMap method", "contents": "flatearthpoly(${1:args})"} ,
		{"trigger": "framem\tMap method", "contents": "framem(${1:args})"} ,
		{"trigger": "fromDegrees\tMap method", "contents": "fromDegrees(${1:args})"} ,
		{"trigger": "fromRadians\tMap method", "contents": "fromRadians(${1:args})"} ,
		{"trigger": "gc2sc\tMap method", "contents": "gc2sc(${1:args})"} ,
		{"trigger": "gcm\tMap method", "contents": "gcm(${1:args})"} ,
		{"trigger": "gcpmap\tMap method", "contents": "gcpmap(${1:args})"} ,
		{"trigger": "gcxgc\tMap method", "contents": "gcxgc(${1:args})"} ,
		{"trigger": "gcxsc\tMap method", "contents": "gcxsc(${1:args})"} ,
		{"trigger": "geocentricLatitude\tMap method", "contents": "geocentricLatitude(${1:args})"} ,
		{"trigger": "geodetic2aer\tMap method", "contents": "geodetic2aer(${1:args})"} ,
		{"trigger": "geodetic2ecef\tMap method", "contents": "geodetic2ecef(${1:args})"} ,
		{"trigger": "geodetic2enu\tMap method", "contents": "geodetic2enu(${1:args})"} ,
		{"trigger": "geodetic2ned\tMap method", "contents": "geodetic2ned(${1:args})"} ,
		{"trigger": "geodeticLatitudeFromGeocentric\tMap method", "contents": "geodeticLatitudeFromGeocentric(${1:args})"} ,
		{"trigger": "geodeticLatitudeFromParametric\tMap method", "contents": "geodeticLatitudeFromParametric(${1:args})"} ,
		{"trigger": "geoloc2grid\tMap method", "contents": "geoloc2grid(${1:args})"} ,
		{"trigger": "geopeaks\tMap method", "contents": "geopeaks(${1:args})"} ,
		{"trigger": "geopoint\tMap method", "contents": "geopoint(${1:args})"} ,
		{"trigger": "geoquadline\tMap method", "contents": "geoquadline(${1:args})"} ,
		{"trigger": "geoquadpt\tMap method", "contents": "geoquadpt(${1:args})"} ,
		{"trigger": "georasterref\tMap method", "contents": "georasterref(${1:args})"} ,
		{"trigger": "georefcells\tMap method", "contents": "georefcells(${1:args})"} ,
		{"trigger": "georefpostings\tMap method", "contents": "georefpostings(${1:args})"} ,
		{"trigger": "geoshape\tMap method", "contents": "geoshape(${1:args})"} ,
		{"trigger": "geoshow\tMap method", "contents": "geoshow(${1:args})"} ,
		{"trigger": "geotiff2mstruct\tMap method", "contents": "geotiff2mstruct(${1:args})"} ,
		{"trigger": "geotiffinfo\tMap method", "contents": "geotiffinfo(${1:args})"} ,
		{"trigger": "geotiffread\tMap method", "contents": "geotiffread(${1:args})"} ,
		{"trigger": "geotiffwrite\tMap method", "contents": "geotiffwrite(${1:args})"} ,
		{"trigger": "getm\tMap method", "contents": "getm(${1:args})"} ,
		{"trigger": "getworldfilename\tMap method", "contents": "getworldfilename(${1:args})"} ,
		{"trigger": "globedem\tMap method", "contents": "globedem(${1:args})"} ,
		{"trigger": "globedems\tMap method", "contents": "globedems(${1:args})"} ,
		{"trigger": "gpxread\tMap method", "contents": "gpxread(${1:args})"} ,
		{"trigger": "gradientm\tMap method", "contents": "gradientm(${1:args})"} ,
		{"trigger": "grid2image\tMap method", "contents": "grid2image(${1:args})"} ,
		{"trigger": "gridm\tMap method", "contents": "gridm(${1:args})"} ,
		{"trigger": "gshhs\tMap method", "contents": "gshhs(${1:args})"} ,
		{"trigger": "gtextm\tMap method", "contents": "gtextm(${1:args})"} ,
		{"trigger": "gtopo30\tMap method", "contents": "gtopo30(${1:args})"} ,
		{"trigger": "gtopo30s\tMap method", "contents": "gtopo30s(${1:args})"} ,
		{"trigger": "handlem\tMap method", "contents": "handlem(${1:args})"} ,
		{"trigger": "hista\tMap method", "contents": "hista(${1:args})"} ,
		{"trigger": "histr\tMap method", "contents": "histr(${1:args})"} ,
		{"trigger": "imbedm\tMap method", "contents": "imbedm(${1:args})"} ,
		{"trigger": "ingeoquad\tMap method", "contents": "ingeoquad(${1:args})"} ,
		{"trigger": "inputm\tMap method", "contents": "inputm(${1:args})"} ,
		{"trigger": "interpm\tMap method", "contents": "interpm(${1:args})"} ,
		{"trigger": "intersectgeoquad\tMap method", "contents": "intersectgeoquad(${1:args})"} ,
		{"trigger": "intrplat\tMap method", "contents": "intrplat(${1:args})"} ,
		{"trigger": "intrplon\tMap method", "contents": "intrplon(${1:args})"} ,
		{"trigger": "isShapeMultipart\tMap method", "contents": "isShapeMultipart(${1:args})"} ,
		{"trigger": "ismap\tMap method", "contents": "ismap(${1:args})"} ,
		{"trigger": "ispolycw\tMap method", "contents": "ispolycw(${1:args})"} ,
		{"trigger": "km2deg\tMap method", "contents": "km2deg(${1:args})"} ,
		{"trigger": "km2nm\tMap method", "contents": "km2nm(${1:args})"} ,
		{"trigger": "km2rad\tMap method", "contents": "km2rad(${1:args})"} ,
		{"trigger": "km2sm\tMap method", "contents": "km2sm(${1:args})"} ,
		{"trigger": "kmlwrite\tMap method", "contents": "kmlwrite(${1:args})"} ,
		{"trigger": "kmlwriteline\tMap method", "contents": "kmlwriteline(${1:args})"} ,
		{"trigger": "kmlwritepoint\tMap method", "contents": "kmlwritepoint(${1:args})"} ,
		{"trigger": "lightm\tMap method", "contents": "lightm(${1:args})"} ,
		{"trigger": "limitm\tMap method", "contents": "limitm(${1:args})"} ,
		{"trigger": "linecirc\tMap method", "contents": "linecirc(${1:args})"} ,
		{"trigger": "linem\tMap method", "contents": "linem(${1:args})"} ,
		{"trigger": "los2\tMap method", "contents": "los2(${1:args})"} ,
		{"trigger": "ltln2val\tMap method", "contents": "ltln2val(${1:args})"} ,
		{"trigger": "lv2ecef\tMap method", "contents": "lv2ecef(${1:args})"} ,
		{"trigger": "majaxis\tMap method", "contents": "majaxis(${1:args})"} ,
		{"trigger": "makeattribspec\tMap method", "contents": "makeattribspec(${1:args})"} ,
		{"trigger": "makedbfspec\tMap method", "contents": "makedbfspec(${1:args})"} ,
		{"trigger": "makerefmat\tMap method", "contents": "makerefmat(${1:args})"} ,
		{"trigger": "makesymbolspec\tMap method", "contents": "makesymbolspec(${1:args})"} ,
		{"trigger": "map.geodesy.AuthalicLatitudeConverter\tMap method", "contents": "map.geodesy.AuthalicLatitudeConverter(${1:args})"} ,
		{"trigger": "map.geodesy.ConformalLatitudeConverter\tMap method", "contents": "map.geodesy.ConformalLatitudeConverter(${1:args})"} ,
		{"trigger": "map.geodesy.IsometricLatitudeConverter\tMap method", "contents": "map.geodesy.IsometricLatitudeConverter(${1:args})"} ,
		{"trigger": "map.geodesy.RectifyingLatitudeConverter\tMap method", "contents": "map.geodesy.RectifyingLatitudeConverter(${1:args})"} ,
		{"trigger": "map.geodesy.isdegree\tMap method", "contents": "map.geodesy.isdegree(${1:args})"} ,
		{"trigger": "map.geotiff.RPCCoefficientTag\tMap method", "contents": "map.geotiff.RPCCoefficientTag(${1:args})"} ,
		{"trigger": "map.rasterref.GeographicCellsReference\tMap method", "contents": "map.rasterref.GeographicCellsReference(${1:args})"} ,
		{"trigger": "map.rasterref.GeographicPostingsReference\tMap method", "contents": "map.rasterref.GeographicPostingsReference(${1:args})"} ,
		{"trigger": "map.rasterref.MapCellsReference\tMap method", "contents": "map.rasterref.MapCellsReference(${1:args})"} ,
		{"trigger": "map.rasterref.MapPostingsReference\tMap method", "contents": "map.rasterref.MapPostingsReference(${1:args})"} ,
		{"trigger": "maplist\tMap method", "contents": "maplist(${1:args})"} ,
		{"trigger": "mapoutline\tMap method", "contents": "mapoutline(${1:args})"} ,
		{"trigger": "mappoint\tMap method", "contents": "mappoint(${1:args})"} ,
		{"trigger": "mapprofile\tMap method", "contents": "mapprofile(${1:args})"} ,
		{"trigger": "maprasterref\tMap method", "contents": "maprasterref(${1:args})"} ,
		{"trigger": "maprefcells\tMap method", "contents": "maprefcells(${1:args})"} ,
		{"trigger": "maprefpostings\tMap method", "contents": "maprefpostings(${1:args})"} ,
		{"trigger": "maps\tMap method", "contents": "maps(${1:args})"} ,
		{"trigger": "mapshape\tMap method", "contents": "mapshape(${1:args})"} ,
		{"trigger": "mapshow\tMap method", "contents": "mapshow(${1:args})"} ,
		{"trigger": "maptool\tMap method", "contents": "maptool(${1:args})"} ,
		{"trigger": "maptrim\tMap method", "contents": "maptrim(${1:args})"} ,
		{"trigger": "maptriml\tMap method", "contents": "maptriml(${1:args})"} ,
		{"trigger": "maptrimp\tMap method", "contents": "maptrimp(${1:args})"} ,
		{"trigger": "maptrims\tMap method", "contents": "maptrims(${1:args})"} ,
		{"trigger": "mapview\tMap method", "contents": "mapview(${1:args})"} ,
		{"trigger": "mdistort\tMap method", "contents": "mdistort(${1:args})"} ,
		{"trigger": "meridianarc\tMap method", "contents": "meridianarc(${1:args})"} ,
		{"trigger": "meridianfwd\tMap method", "contents": "meridianfwd(${1:args})"} ,
		{"trigger": "meshlsrm\tMap method", "contents": "meshlsrm(${1:args})"} ,
		{"trigger": "meshm\tMap method", "contents": "meshm(${1:args})"} ,
		{"trigger": "mfwdtran\tMap method", "contents": "mfwdtran(${1:args})"} ,
		{"trigger": "minaxis\tMap method", "contents": "minaxis(${1:args})"} ,
		{"trigger": "minvtran\tMap method", "contents": "minvtran(${1:args})"} ,
		{"trigger": "mlabel\tMap method", "contents": "mlabel(${1:args})"} ,
		{"trigger": "mlabelzero22pi\tMap method", "contents": "mlabelzero22pi(${1:args})"} ,
		{"trigger": "n2ecc\tMap method", "contents": "n2ecc(${1:args})"} ,
		{"trigger": "namem\tMap method", "contents": "namem(${1:args})"} ,
		{"trigger": "ned2aer\tMap method", "contents": "ned2aer(${1:args})"} ,
		{"trigger": "ned2ecef\tMap method", "contents": "ned2ecef(${1:args})"} ,
		{"trigger": "ned2ecefv\tMap method", "contents": "ned2ecefv(${1:args})"} ,
		{"trigger": "ned2geodetic\tMap method", "contents": "ned2geodetic(${1:args})"} ,
		{"trigger": "newpole\tMap method", "contents": "newpole(${1:args})"} ,
		{"trigger": "nm2deg\tMap method", "contents": "nm2deg(${1:args})"} ,
		{"trigger": "nm2km\tMap method", "contents": "nm2km(${1:args})"} ,
		{"trigger": "nm2rad\tMap method", "contents": "nm2rad(${1:args})"} ,
		{"trigger": "nm2sm\tMap method", "contents": "nm2sm(${1:args})"} ,
		{"trigger": "northarrow\tMap method", "contents": "northarrow(${1:args})"} ,
		{"trigger": "oblateSpheroid\tMap method", "contents": "oblateSpheroid(${1:args})"} ,
		{"trigger": "org2pol\tMap method", "contents": "org2pol(${1:args})"} ,
		{"trigger": "originui\tMap method", "contents": "originui(${1:args})"} ,
		{"trigger": "outlinegeoquad\tMap method", "contents": "outlinegeoquad(${1:args})"} ,
		{"trigger": "parallelui\tMap method", "contents": "parallelui(${1:args})"} ,
		{"trigger": "parametricLatitude\tMap method", "contents": "parametricLatitude(${1:args})"} ,
		{"trigger": "pcolorm\tMap method", "contents": "pcolorm(${1:args})"} ,
		{"trigger": "plabel\tMap method", "contents": "plabel(${1:args})"} ,
		{"trigger": "plot3m\tMap method", "contents": "plot3m(${1:args})"} ,
		{"trigger": "plotm\tMap method", "contents": "plotm(${1:args})"} ,
		{"trigger": "polcmap\tMap method", "contents": "polcmap(${1:args})"} ,
		{"trigger": "poly2ccw\tMap method", "contents": "poly2ccw(${1:args})"} ,
		{"trigger": "poly2cw\tMap method", "contents": "poly2cw(${1:args})"} ,
		{"trigger": "poly2fv\tMap method", "contents": "poly2fv(${1:args})"} ,
		{"trigger": "polybool\tMap method", "contents": "polybool(${1:args})"} ,
		{"trigger": "polyjoin\tMap method", "contents": "polyjoin(${1:args})"} ,
		{"trigger": "polymerge\tMap method", "contents": "polymerge(${1:args})"} ,
		{"trigger": "polysplit\tMap method", "contents": "polysplit(${1:args})"} ,
		{"trigger": "polyxpoly\tMap method", "contents": "polyxpoly(${1:args})"} ,
		{"trigger": "projfwd\tMap method", "contents": "projfwd(${1:args})"} ,
		{"trigger": "projinv\tMap method", "contents": "projinv(${1:args})"} ,
		{"trigger": "projlist\tMap method", "contents": "projlist(${1:args})"} ,
		{"trigger": "putpole\tMap method", "contents": "putpole(${1:args})"} ,
		{"trigger": "quiver3m\tMap method", "contents": "quiver3m(${1:args})"} ,
		{"trigger": "quiverm\tMap method", "contents": "quiverm(${1:args})"} ,
		{"trigger": "rad2km\tMap method", "contents": "rad2km(${1:args})"} ,
		{"trigger": "rad2nm\tMap method", "contents": "rad2nm(${1:args})"} ,
		{"trigger": "rad2sm\tMap method", "contents": "rad2sm(${1:args})"} ,
		{"trigger": "rcurve\tMap method", "contents": "rcurve(${1:args})"} ,
		{"trigger": "reckon\tMap method", "contents": "reckon(${1:args})"} ,
		{"trigger": "reducem\tMap method", "contents": "reducem(${1:args})"} ,
		{"trigger": "referenceEllipsoid\tMap method", "contents": "referenceEllipsoid(${1:args})"} ,
		{"trigger": "referenceSphere\tMap method", "contents": "referenceSphere(${1:args})"} ,
		{"trigger": "refmatToGeoRasterReference\tMap method", "contents": "refmatToGeoRasterReference(${1:args})"} ,
		{"trigger": "refmatToMapRasterReference\tMap method", "contents": "refmatToMapRasterReference(${1:args})"} ,
		{"trigger": "refmatToWorldFileMatrix\tMap method", "contents": "refmatToWorldFileMatrix(${1:args})"} ,
		{"trigger": "refvecToGeoRasterReference\tMap method", "contents": "refvecToGeoRasterReference(${1:args})"} ,
		{"trigger": "removeExtraNanSeparators\tMap method", "contents": "removeExtraNanSeparators(${1:args})"} ,
		{"trigger": "resizem\tMap method", "contents": "resizem(${1:args})"} ,
		{"trigger": "restack\tMap method", "contents": "restack(${1:args})"} ,
		{"trigger": "rhxrh\tMap method", "contents": "rhxrh(${1:args})"} ,
		{"trigger": "rotatem\tMap method", "contents": "rotatem(${1:args})"} ,
		{"trigger": "rotatetext\tMap method", "contents": "rotatetext(${1:args})"} ,
		{"trigger": "roundn\tMap method", "contents": "roundn(${1:args})"} ,
		{"trigger": "rsphere\tMap method", "contents": "rsphere(${1:args})"} ,
		{"trigger": "satbath\tMap method", "contents": "satbath(${1:args})"} ,
		{"trigger": "scaleruler\tMap method", "contents": "scaleruler(${1:args})"} ,
		{"trigger": "scatterm\tMap method", "contents": "scatterm(${1:args})"} ,
		{"trigger": "scircle1\tMap method", "contents": "scircle1(${1:args})"} ,
		{"trigger": "scircle2\tMap method", "contents": "scircle2(${1:args})"} ,
		{"trigger": "scircleg\tMap method", "contents": "scircleg(${1:args})"} ,
		{"trigger": "scirclui\tMap method", "contents": "scirclui(${1:args})"} ,
		{"trigger": "scxsc\tMap method", "contents": "scxsc(${1:args})"} ,
		{"trigger": "sdtsdemread\tMap method", "contents": "sdtsdemread(${1:args})"} ,
		{"trigger": "sdtsinfo\tMap method", "contents": "sdtsinfo(${1:args})"} ,
		{"trigger": "sectorg\tMap method", "contents": "sectorg(${1:args})"} ,
		{"trigger": "setm\tMap method", "contents": "setm(${1:args})"} ,
		{"trigger": "shaderel\tMap method", "contents": "shaderel(${1:args})"} ,
		{"trigger": "shapeinfo\tMap method", "contents": "shapeinfo(${1:args})"} ,
		{"trigger": "shaperead\tMap method", "contents": "shaperead(${1:args})"} ,
		{"trigger": "shapewrite\tMap method", "contents": "shapewrite(${1:args})"} ,
		{"trigger": "showaxes\tMap method", "contents": "showaxes(${1:args})"} ,
		{"trigger": "sm2deg\tMap method", "contents": "sm2deg(${1:args})"} ,
		{"trigger": "sm2km\tMap method", "contents": "sm2km(${1:args})"} ,
		{"trigger": "sm2nm\tMap method", "contents": "sm2nm(${1:args})"} ,
		{"trigger": "sm2rad\tMap method", "contents": "sm2rad(${1:args})"} ,
		{"trigger": "stem3m\tMap method", "contents": "stem3m(${1:args})"} ,
		{"trigger": "str2angle\tMap method", "contents": "str2angle(${1:args})"} ,
		{"trigger": "surfacem\tMap method", "contents": "surfacem(${1:args})"} ,
		{"trigger": "surflm\tMap method", "contents": "surflm(${1:args})"} ,
		{"trigger": "surflsrm\tMap method", "contents": "surflsrm(${1:args})"} ,
		{"trigger": "surfm\tMap method", "contents": "surfm(${1:args})"} ,
		{"trigger": "symbolm\tMap method", "contents": "symbolm(${1:args})"} ,
		{"trigger": "tagm\tMap method", "contents": "tagm(${1:args})"} ,
		{"trigger": "tbase\tMap method", "contents": "tbase(${1:args})"} ,
		{"trigger": "tightmap\tMap method", "contents": "tightmap(${1:args})"} ,
		{"trigger": "tissot\tMap method", "contents": "tissot(${1:args})"} ,
		{"trigger": "toDegrees\tMap method", "contents": "toDegrees(${1:args})"} ,
		{"trigger": "toRadians\tMap method", "contents": "toRadians(${1:args})"} ,
		{"trigger": "track1\tMap method", "contents": "track1(${1:args})"} ,
		{"trigger": "track2\tMap method", "contents": "track2(${1:args})"} ,
		{"trigger": "trackg\tMap method", "contents": "trackg(${1:args})"} ,
		{"trigger": "trackui\tMap method", "contents": "trackui(${1:args})"} ,
		{"trigger": "unitsratio\tMap method", "contents": "unitsratio(${1:args})"} ,
		{"trigger": "unwrapMultipart\tMap method", "contents": "unwrapMultipart(${1:args})"} ,
		{"trigger": "usamap\tMap method", "contents": "usamap(${1:args})"} ,
		{"trigger": "usgs24kdem\tMap method", "contents": "usgs24kdem(${1:args})"} ,
		{"trigger": "usgsdem\tMap method", "contents": "usgsdem(${1:args})"} ,
		{"trigger": "usgsdems\tMap method", "contents": "usgsdems(${1:args})"} ,
		{"trigger": "utmgeoid\tMap method", "contents": "utmgeoid(${1:args})"} ,
		{"trigger": "utmzone\tMap method", "contents": "utmzone(${1:args})"} ,
		{"trigger": "utmzoneui\tMap method", "contents": "utmzoneui(${1:args})"} ,
		{"trigger": "validateLengthUnit\tMap method", "contents": "validateLengthUnit(${1:args})"} ,
		{"trigger": "vec2mtx\tMap method", "contents": "vec2mtx(${1:args})"} ,
		{"trigger": "vfwdtran\tMap method", "contents": "vfwdtran(${1:args})"} ,
		{"trigger": "viewshed\tMap method", "contents": "viewshed(${1:args})"} ,
		{"trigger": "vinvtran\tMap method", "contents": "vinvtran(${1:args})"} ,
		{"trigger": "vmap0data\tMap method", "contents": "vmap0data(${1:args})"} ,
		{"trigger": "vmap0read\tMap method", "contents": "vmap0read(${1:args})"} ,
		{"trigger": "vmap0rhead\tMap method", "contents": "vmap0rhead(${1:args})"} ,
		{"trigger": "vmap0ui\tMap method", "contents": "vmap0ui(${1:args})"} ,
		{"trigger": "webmap\tMap method", "contents": "webmap(${1:args})"} ,
		{"trigger": "wgs84Ellipsoid\tMap method", "contents": "wgs84Ellipsoid(${1:args})"} ,
		{"trigger": "wmcenter\tMap method", "contents": "wmcenter(${1:args})"} ,
		{"trigger": "wmclose\tMap method", "contents": "wmclose(${1:args})"} ,
		{"trigger": "wmlimits\tMap method", "contents": "wmlimits(${1:args})"} ,
		{"trigger": "wmline\tMap method", "contents": "wmline(${1:args})"} ,
		{"trigger": "wmmarker\tMap method", "contents": "wmmarker(${1:args})"} ,
		{"trigger": "wmprint\tMap method", "contents": "wmprint(${1:args})"} ,
		{"trigger": "wmremove\tMap method", "contents": "wmremove(${1:args})"} ,
		{"trigger": "wmsfind\tMap method", "contents": "wmsfind(${1:args})"} ,
		{"trigger": "wmsinfo\tMap method", "contents": "wmsinfo(${1:args})"} ,
		{"trigger": "wmsread\tMap method", "contents": "wmsread(${1:args})"} ,
		{"trigger": "wmsupdate\tMap method", "contents": "wmsupdate(${1:args})"} ,
		{"trigger": "wmzoom\tMap method", "contents": "wmzoom(${1:args})"} ,
		{"trigger": "worldFileMatrixToRefmat\tMap method", "contents": "worldFileMatrixToRefmat(${1:args})"} ,
		{"trigger": "worldfileread\tMap method", "contents": "worldfileread(${1:args})"} ,
		{"trigger": "worldfilewrite\tMap method", "contents": "worldfilewrite(${1:args})"} ,
		{"trigger": "worldmap\tMap method", "contents": "worldmap(${1:args})"} ,
		{"trigger": "wrapTo180\tMap method", "contents": "wrapTo180(${1:args})"} ,
		{"trigger": "wrapTo2Pi\tMap method", "contents": "wrapTo2Pi(${1:args})"} ,
		{"trigger": "wrapTo360\tMap method", "contents": "wrapTo360(${1:args})"} ,
		{"trigger": "wrapToPi\tMap method", "contents": "wrapToPi(${1:args})"} ,
		{"trigger": "zdatam\tMap method", "contents": "zdatam(${1:args})"} ,

	]
}
{
	"scope": "source.matlab, source.m",
	"completions":
	[
		{"trigger": "adjoint\tSymbolic method", "contents": "adjoint(${1:args})"} ,
		{"trigger": "allMuPADNotebooks\tSymbolic method", "contents": "allMuPADNotebooks(${1:args})"} ,
		{"trigger": "assumptions\tSymbolic method", "contents": "assumptions(${1:args})"} ,
		{"trigger": "catalan\tSymbolic method", "contents": "catalan(${1:args})"} ,
		{"trigger": "ccode\tSymbolic method", "contents": "ccode(${1:args})"} ,
		{"trigger": "charpoly\tSymbolic method", "contents": "charpoly(${1:args})"} ,
		{"trigger": "chebyshevT\tSymbolic method", "contents": "chebyshevT(${1:args})"} ,
		{"trigger": "chebyshevU\tSymbolic method", "contents": "chebyshevU(${1:args})"} ,
		{"trigger": "children\tSymbolic method", "contents": "children(${1:args})"} ,
		{"trigger": "clear\tSymbolic method", "contents": "clear(${1:args})"} ,
		{"trigger": "colspace\tSymbolic method", "contents": "colspace(${1:args})"} ,
		{"trigger": "compose\tSymbolic method", "contents": "compose(${1:args})"} ,
		{"trigger": "coshint\tSymbolic method", "contents": "coshint(${1:args})"} ,
		{"trigger": "cosint\tSymbolic method", "contents": "cosint(${1:args})"} ,
		{"trigger": "daeFunction\tSymbolic method", "contents": "daeFunction(${1:args})"} ,
		{"trigger": "digits\tSymbolic method", "contents": "digits(${1:args})"} ,
		{"trigger": "divisors\tSymbolic method", "contents": "divisors(${1:args})"} ,
		{"trigger": "dsolve\tSymbolic method", "contents": "dsolve(${1:args})"} ,
		{"trigger": "ei\tSymbolic method", "contents": "ei(${1:args})"} ,
		{"trigger": "equationsToMatrix\tSymbolic method", "contents": "equationsToMatrix(${1:args})"} ,
		{"trigger": "eulergamma\tSymbolic method", "contents": "eulergamma(${1:args})"} ,
		{"trigger": "evaluateMuPADNotebook\tSymbolic method", "contents": "evaluateMuPADNotebook(${1:args})"} ,
		{"trigger": "findDecoupledBlocks\tSymbolic method", "contents": "findDecoupledBlocks(${1:args})"} ,
		{"trigger": "finverse\tSymbolic method", "contents": "finverse(${1:args})"} ,
		{"trigger": "fortran\tSymbolic method", "contents": "fortran(${1:args})"} ,
		{"trigger": "fresnelc\tSymbolic method", "contents": "fresnelc(${1:args})"} ,
		{"trigger": "fresnels\tSymbolic method", "contents": "fresnels(${1:args})"} ,
		{"trigger": "functionalDerivative\tSymbolic method", "contents": "functionalDerivative(${1:args})"} ,
		{"trigger": "funtool\tSymbolic method", "contents": "funtool(${1:args})"} ,
		{"trigger": "gegenbauerC\tSymbolic method", "contents": "gegenbauerC(${1:args})"} ,
		{"trigger": "getVar\tSymbolic method", "contents": "getVar(${1:args})"} ,
		{"trigger": "hermiteForm\tSymbolic method", "contents": "hermiteForm(${1:args})"} ,
		{"trigger": "hermiteH\tSymbolic method", "contents": "hermiteH(${1:args})"} ,
		{"trigger": "horner\tSymbolic method", "contents": "horner(${1:args})"} ,
		{"trigger": "incidenceMatrix\tSymbolic method", "contents": "incidenceMatrix(${1:args})"} ,
		{"trigger": "isAlways\tSymbolic method", "contents": "isAlways(${1:args})"} ,
		{"trigger": "isLowIndexDAE\tSymbolic method", "contents": "isLowIndexDAE(${1:args})"} ,
		{"trigger": "jacobiP\tSymbolic method", "contents": "jacobiP(${1:args})"} ,
		{"trigger": "jordan\tSymbolic method", "contents": "jordan(${1:args})"} ,
		{"trigger": "lambertw\tSymbolic method", "contents": "lambertw(${1:args})"} ,
		{"trigger": "latex\tSymbolic method", "contents": "latex(${1:args})"} ,
		{"trigger": "legendreP\tSymbolic method", "contents": "legendreP(${1:args})"} ,
		{"trigger": "logint\tSymbolic method", "contents": "logint(${1:args})"} ,
		{"trigger": "massMatrixForm\tSymbolic method", "contents": "massMatrixForm(${1:args})"} ,
		{"trigger": "matlabFunction\tSymbolic method", "contents": "matlabFunction(${1:args})"} ,
		{"trigger": "matlabFunctionBlock\tSymbolic method", "contents": "matlabFunctionBlock(${1:args})"} ,
		{"trigger": "mfun\tSymbolic method", "contents": "mfun(${1:args})"} ,
		{"trigger": "mfunlist\tSymbolic method", "contents": "mfunlist(${1:args})"} ,
		{"trigger": "minpoly\tSymbolic method", "contents": "minpoly(${1:args})"} ,
		{"trigger": "mupad\tSymbolic method", "contents": "mupad(${1:args})"} ,
		{"trigger": "mupadNotebookTitle\tSymbolic method", "contents": "mupadNotebookTitle(${1:args})"} ,
		{"trigger": "mupadwelcome\tSymbolic method", "contents": "mupadwelcome(${1:args})"} ,
		{"trigger": "numden\tSymbolic method", "contents": "numden(${1:args})"} ,
		{"trigger": "odeFunction\tSymbolic method", "contents": "odeFunction(${1:args})"} ,
		{"trigger": "odeToVectorField\tSymbolic method", "contents": "odeToVectorField(${1:args})"} ,
		{"trigger": "openmn\tSymbolic method", "contents": "openmn(${1:args})"} ,
		{"trigger": "openmu\tSymbolic method", "contents": "openmu(${1:args})"} ,
		{"trigger": "openxvc\tSymbolic method", "contents": "openxvc(${1:args})"} ,
		{"trigger": "openxvz\tSymbolic method", "contents": "openxvz(${1:args})"} ,
		{"trigger": "poly2sym\tSymbolic method", "contents": "poly2sym(${1:args})"} ,
		{"trigger": "pretty\tSymbolic method", "contents": "pretty(${1:args})"} ,
		{"trigger": "quorem\tSymbolic method", "contents": "quorem(${1:args})"} ,
		{"trigger": "reduceDAEIndex\tSymbolic method", "contents": "reduceDAEIndex(${1:args})"} ,
		{"trigger": "reduceDAEToODE\tSymbolic method", "contents": "reduceDAEToODE(${1:args})"} ,
		{"trigger": "reduceDifferentialOrder\tSymbolic method", "contents": "reduceDifferentialOrder(${1:args})"} ,
		{"trigger": "reduceRedundancies\tSymbolic method", "contents": "reduceRedundancies(${1:args})"} ,
		{"trigger": "root\tSymbolic method", "contents": "root(${1:args})"} ,
		{"trigger": "rsums\tSymbolic method", "contents": "rsums(${1:args})"} ,
		{"trigger": "setVar\tSymbolic method", "contents": "setVar(${1:args})"} ,
		{"trigger": "simscapeEquation\tSymbolic method", "contents": "simscapeEquation(${1:args})"} ,
		{"trigger": "sinhint\tSymbolic method", "contents": "sinhint(${1:args})"} ,
		{"trigger": "sinint\tSymbolic method", "contents": "sinint(${1:args})"} ,
		{"trigger": "smithForm\tSymbolic method", "contents": "smithForm(${1:args})"} ,
		{"trigger": "ssinint\tSymbolic method", "contents": "ssinint(${1:args})"} ,
		{"trigger": "subexpr\tSymbolic method", "contents": "subexpr(${1:args})"} ,
		{"trigger": "sym\tSymbolic method", "contents": "sym(${1:args})"} ,
		{"trigger": "sym2poly\tSymbolic method", "contents": "sym2poly(${1:args})"} ,
		{"trigger": "symengine\tSymbolic method", "contents": "symengine(${1:args})"} ,
		{"trigger": "symfun\tSymbolic method", "contents": "symfun(${1:args})"} ,
		{"trigger": "sympref\tSymbolic method", "contents": "sympref(${1:args})"} ,
		{"trigger": "symprod\tSymbolic method", "contents": "symprod(${1:args})"} ,
		{"trigger": "syms\tSymbolic method", "contents": "syms(${1:args})"} ,
		{"trigger": "symsum\tSymbolic method", "contents": "symsum(${1:args})"} ,
		{"trigger": "taylortool\tSymbolic method", "contents": "taylortool(${1:args})"} ,
		{"trigger": "vpa\tSymbolic method", "contents": "vpa(${1:args})"} ,
		{"trigger": "vpasolve\tSymbolic method", "contents": "vpasolve(${1:args})"} ,

	]
}